var Sevenn = (() => {
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // js/main.js
  var main_exports = {};
  __export(main_exports, {
    render: () => renderApp,
    renderApp: () => renderApp,
    resolveListKind: () => resolveListKind,
    tabs: () => tabs
  });

  // js/storage/preferences.js
  var STORAGE_KEY = "sevenn-ui-preferences";
  var cache = null;
  function canUseStorage() {
    try {
      return typeof localStorage !== "undefined";
    } catch (err) {
      return false;
    }
  }
  function readPreferences() {
    if (cache) {
      return cache;
    }
    if (!canUseStorage()) {
      cache = {};
      return cache;
    }
    try {
      const raw = localStorage.getItem(STORAGE_KEY);
      if (!raw) {
        cache = {};
        return cache;
      }
      const parsed = JSON.parse(raw);
      cache = parsed && typeof parsed === "object" ? parsed : {};
    } catch (err) {
      console.warn("Failed to read UI preferences", err);
      cache = {};
    }
    return cache;
  }
  function loadUIPreferences() {
    const stored = readPreferences();
    return stored ? { ...stored } : {};
  }
  function updateUIPreferences(patch) {
    if (!patch || typeof patch !== "object") {
      return loadUIPreferences();
    }
    const current = { ...readPreferences() };
    let changed = false;
    for (const [key, value] of Object.entries(patch)) {
      if (typeof value === "undefined") continue;
      if (current[key] !== value) {
        current[key] = value;
        changed = true;
      }
    }
    if (!changed) {
      return current;
    }
    cache = current;
    if (canUseStorage()) {
      try {
        localStorage.setItem(STORAGE_KEY, JSON.stringify(current));
      } catch (err) {
        console.warn("Failed to persist UI preferences", err);
      }
    }
    return current;
  }

  // js/state.js
  var DEFAULT_ENTRY_FILTERS = {
    types: ["disease", "drug", "concept"],
    block: "",
    week: "",
    onlyFav: false,
    sort: "updated-desc"
  };
  var DEFAULT_LECTURE_STATE = {
    query: "",
    blockId: "",
    week: "",
    status: "",
    tag: "",
    sort: "position-asc",
    openBlocks: [],
    openWeeks: [],
    openSnapshot: 0,
    scrollTop: 0
  };
  var DEFAULT_ENTRY_LAYOUT = {
    mode: "list",
    columns: 3,
    scale: 1,
    controlsVisible: false
  };
  var DEFAULT_EXAM_LAYOUT = {
    mode: "grid",
    detailsVisible: true
  };
  var preferences = loadUIPreferences();
  function sanitizeEntryFilters(value) {
    if (!value || typeof value !== "object") return {};
    const next = {};
    if (Array.isArray(value.types)) {
      const unique = Array.from(
        new Set(
          value.types.map((entry) => typeof entry === "string" ? entry.trim() : "").filter(Boolean)
        )
      );
      if (unique.length) next.types = unique;
    }
    if (Object.prototype.hasOwnProperty.call(value, "block")) {
      next.block = String(value.block ?? "");
    }
    if (Object.prototype.hasOwnProperty.call(value, "week")) {
      const raw = value.week;
      if (raw === "" || raw === null || typeof raw === "undefined") {
        next.week = "";
      } else if (Number.isFinite(Number(raw))) {
        next.week = String(Number(raw));
      }
    }
    if (Object.prototype.hasOwnProperty.call(value, "onlyFav")) {
      next.onlyFav = Boolean(value.onlyFav);
    }
    if (Object.prototype.hasOwnProperty.call(value, "sort")) {
      next.sort = String(value.sort ?? "");
    }
    return next;
  }
  function sanitizeLectureState(value, { forPersist = false } = {}) {
    if (!value || typeof value !== "object") return {};
    const next = {};
    const stringKeys = ["query", "blockId", "week", "status", "tag", "sort"];
    stringKeys.forEach((key) => {
      if (Object.prototype.hasOwnProperty.call(value, key)) {
        next[key] = String(value[key] ?? "");
      }
    });
    if (Array.isArray(value.openBlocks)) {
      const uniqueBlocks = Array.from(
        new Set(value.openBlocks.map((block) => String(block ?? "")))
      );
      next.openBlocks = uniqueBlocks;
    }
    if (Array.isArray(value.openWeeks)) {
      const uniqueWeeks2 = Array.from(
        new Set(value.openWeeks.map((week) => String(week ?? "")))
      );
      next.openWeeks = uniqueWeeks2;
    }
    if (Object.prototype.hasOwnProperty.call(value, "openSnapshot")) {
      const stamp = Number(value.openSnapshot);
      next.openSnapshot = Number.isFinite(stamp) ? stamp : 0;
    }
    if (!forPersist && Object.prototype.hasOwnProperty.call(value, "scrollTop")) {
      const top = Number(value.scrollTop);
      next.scrollTop = Number.isFinite(top) && top > 0 ? Math.max(0, Math.round(top)) : 0;
    }
    return next;
  }
  function sanitizeEntryLayout(value) {
    if (!value || typeof value !== "object") return {};
    const next = {};
    if (Object.prototype.hasOwnProperty.call(value, "mode")) {
      next.mode = value.mode === "grid" ? "grid" : "list";
    }
    if (Object.prototype.hasOwnProperty.call(value, "columns")) {
      const cols = Number(value.columns);
      if (!Number.isNaN(cols)) {
        next.columns = Math.max(1, Math.min(6, Math.round(cols)));
      }
    }
    if (Object.prototype.hasOwnProperty.call(value, "scale")) {
      const scl = Number(value.scale);
      if (!Number.isNaN(scl)) {
        next.scale = Math.max(0.6, Math.min(1.4, scl));
      }
    }
    if (Object.prototype.hasOwnProperty.call(value, "controlsVisible")) {
      next.controlsVisible = Boolean(value.controlsVisible);
    }
    return next;
  }
  function sanitizeExamLayout(value) {
    if (!value || typeof value !== "object") return {};
    const next = {};
    if (value.mode === "row" || value.mode === "grid") {
      next.mode = value.mode;
    }
    if (Object.prototype.hasOwnProperty.call(value, "detailsVisible")) {
      next.detailsVisible = Boolean(value.detailsVisible);
    }
    return next;
  }
  var initialFilters = { ...DEFAULT_ENTRY_FILTERS, ...sanitizeEntryFilters(preferences.filters) };
  var initialLectures = { ...DEFAULT_LECTURE_STATE, ...sanitizeLectureState(preferences.lectures || {}) };
  var initialEntryLayout = { ...DEFAULT_ENTRY_LAYOUT, ...sanitizeEntryLayout(preferences.entryLayout) };
  var initialExamLayout = { ...DEFAULT_EXAM_LAYOUT, ...sanitizeExamLayout(preferences.examLayout) };
  var state = {
    tab: "Block Board",
    subtab: {
      Diseases: "Browse",
      Drugs: "Browse",
      Concepts: "Browse",
      Lists: "Diseases",
      Study: "Builder",
      Exams: "",
      // placeholder
      Map: "",
      Settings: ""
    },
    query: "",
    filters: initialFilters,
    lectures: initialLectures,
    entryLayout: initialEntryLayout,
    blockBoard: {
      collapsedBlocks: [],
      hiddenTimelines: [],
      autoCollapsed: [],
      autoHidden: [],
      manualExpanded: [],
      manualTimeline: []
    },
    builder: {
      blocks: [],
      weeks: [],
      lectures: [],
      types: ["disease", "drug", "concept"],
      tags: [],
      onlyFav: false,
      manualPicks: [],
      collapsedBlocks: [],
      collapsedWeeks: [],
      activeBlockId: "",
      activeWeekKey: ""
    },
    cards: {
      collapsedBlocks: [],
      collapsedWeeks: [],
      initialized: false
    },
    cohort: [],
    review: { count: 20, format: "flashcards" },
    quizSession: null,
    flashSession: null,
    examSession: null,
    examAttemptExpanded: {},
    examLayout: initialExamLayout,
    map: { panzoom: false },
    blockMode: { section: "", assignments: {}, reveal: {}, order: {} },
    study: { selectedMode: "Flashcards" },
    studySessions: {},
    studySessionsLoaded: false
  };
  function setTab(t) {
    state.tab = t;
  }
  function setSubtab(tab, sub) {
    state.subtab[tab] = sub;
  }
  function setQuery(q) {
    state.query = q;
  }
  function setFilters(patch) {
    if (!patch) return;
    const next = { ...state.filters };
    if (Array.isArray(patch.types)) {
      const unique = Array.from(
        new Set(
          patch.types.map((entry) => typeof entry === "string" ? entry.trim() : "").filter(Boolean)
        )
      );
      if (unique.length) {
        next.types = unique;
      }
    }
    if (Object.prototype.hasOwnProperty.call(patch, "block")) {
      next.block = String(patch.block ?? "");
    }
    if (Object.prototype.hasOwnProperty.call(patch, "week")) {
      const raw = patch.week;
      if (raw === "" || raw === null || typeof raw === "undefined") {
        next.week = "";
      } else if (Number.isFinite(Number(raw))) {
        next.week = String(Number(raw));
      }
    }
    if (Object.prototype.hasOwnProperty.call(patch, "onlyFav")) {
      next.onlyFav = Boolean(patch.onlyFav);
    }
    if (Object.prototype.hasOwnProperty.call(patch, "sort")) {
      next.sort = String(patch.sort ?? "");
    }
    state.filters = next;
    updateUIPreferences({ filters: sanitizeEntryFilters(next) });
  }
  function setBuilder(patch) {
    Object.assign(state.builder, patch);
  }
  function setBlockBoardState(patch) {
    if (!patch) return;
    if (!state.blockBoard) {
      state.blockBoard = {
        collapsedBlocks: [],
        hiddenTimelines: [],
        autoCollapsed: [],
        autoHidden: [],
        manualExpanded: [],
        manualTimeline: []
      };
    }
    const current = state.blockBoard;
    if (!Array.isArray(current.hiddenTimelines)) {
      current.hiddenTimelines = [];
    }
    if (!Array.isArray(current.autoCollapsed)) {
      current.autoCollapsed = [];
    }
    if (!Array.isArray(current.autoHidden)) {
      current.autoHidden = [];
    }
    if (!Array.isArray(current.manualExpanded)) {
      current.manualExpanded = [];
    }
    if (!Array.isArray(current.manualTimeline)) {
      current.manualTimeline = [];
    }
    if (Array.isArray(patch.collapsedBlocks)) {
      const unique = Array.from(new Set(patch.collapsedBlocks.map((id) => String(id))));
      current.collapsedBlocks = unique;
    }
    if (Array.isArray(patch.hiddenTimelines)) {
      const uniqueHidden = Array.from(new Set(patch.hiddenTimelines.map((id) => String(id))));
      current.hiddenTimelines = uniqueHidden;
    }
    if (Array.isArray(patch.autoCollapsed)) {
      const autoSet = Array.from(new Set(patch.autoCollapsed.map((id) => String(id))));
      current.autoCollapsed = autoSet;
    }
    if (Array.isArray(patch.autoHidden)) {
      const autoHiddenSet = Array.from(new Set(patch.autoHidden.map((id) => String(id))));
      current.autoHidden = autoHiddenSet;
    }
    if (Array.isArray(patch.manualExpanded)) {
      const manualExpandedSet = Array.from(new Set(patch.manualExpanded.map((id) => String(id))));
      current.manualExpanded = manualExpandedSet;
    }
    if (Array.isArray(patch.manualTimeline)) {
      const manualTimelineSet = Array.from(new Set(patch.manualTimeline.map((id) => String(id))));
      current.manualTimeline = manualTimelineSet;
    }
    if (Object.prototype.hasOwnProperty.call(patch, "showDensity")) {
      const show = Boolean(patch.showDensity);
      if (show) {
        current.hiddenTimelines = current.hiddenTimelines.filter((id) => id !== "__all__");
      } else if (!current.hiddenTimelines.includes("__all__")) {
        current.hiddenTimelines = [...current.hiddenTimelines, "__all__"];
      }
    }
  }
  function setLecturesState(patch) {
    if (!patch) return;
    if (!state.lectures) {
      state.lectures = { ...DEFAULT_LECTURE_STATE };
    }
    const next = { ...state.lectures };
    const stringKeys = ["query", "blockId", "week", "status", "tag"];
    stringKeys.forEach((key) => {
      if (Object.prototype.hasOwnProperty.call(patch, key)) {
        next[key] = String(patch[key] ?? "");
      }
    });
    if (Object.prototype.hasOwnProperty.call(patch, "sort")) {
      const value = patch.sort;
      if (typeof value === "string") {
        next.sort = value;
      } else if (value && typeof value === "object") {
        const field = typeof value.field === "string" && value.field.trim() ? value.field.trim() : "position";
        const direction = value.direction === "desc" ? "desc" : "asc";
        next.sort = `${field}-${direction}`;
      }
    }
    if (Array.isArray(patch.openBlocks)) {
      next.openBlocks = Array.from(
        new Set(patch.openBlocks.map((block) => String(block ?? "")))
      );
    }
    if (Array.isArray(patch.openWeeks)) {
      next.openWeeks = Array.from(
        new Set(patch.openWeeks.map((week) => String(week ?? "")))
      );
    }
    if (Object.prototype.hasOwnProperty.call(patch, "openSnapshot")) {
      const stamp = Number(patch.openSnapshot);
      next.openSnapshot = Number.isFinite(stamp) ? stamp : 0;
    }
    if (Object.prototype.hasOwnProperty.call(patch, "scrollTop")) {
      const top = Number(patch.scrollTop);
      next.scrollTop = Number.isFinite(top) && top > 0 ? Math.max(0, Math.round(top)) : 0;
    }
    state.lectures = next;
    updateUIPreferences({ lectures: sanitizeLectureState(next, { forPersist: true }) });
  }
  function setCardsState(patch) {
    if (!patch) return;
    if (!state.cards) {
      state.cards = { collapsedBlocks: [], collapsedWeeks: [], initialized: false };
    }
    const { collapsedBlocks: collapsedBlocks2, collapsedWeeks: collapsedWeeks2 } = patch;
    if (Array.isArray(collapsedBlocks2)) {
      const unique = Array.from(new Set(collapsedBlocks2.filter(Boolean)));
      state.cards.collapsedBlocks = unique;
    }
    if (Array.isArray(collapsedWeeks2)) {
      const unique = Array.from(new Set(collapsedWeeks2.filter(Boolean)));
      state.cards.collapsedWeeks = unique;
    }
    state.cards.initialized = true;
  }
  function setCohort(items) {
    state.cohort = items;
  }
  function setFlashSession(sess) {
    state.flashSession = sess;
  }
  function setQuizSession(sess) {
    state.quizSession = sess;
  }
  function setExamSession(sess) {
    state.examSession = sess;
  }
  function setExamAttemptExpanded(examId, expanded2) {
    state.examAttemptExpanded[examId] = expanded2;
  }
  function setExamLayout(patch) {
    if (!patch) return;
    const current = state.examLayout ? { ...state.examLayout } : { ...DEFAULT_EXAM_LAYOUT };
    if (patch.mode === "row" || patch.mode === "grid") {
      current.mode = patch.mode;
    }
    if (Object.prototype.hasOwnProperty.call(patch, "detailsVisible")) {
      current.detailsVisible = Boolean(patch.detailsVisible);
    }
    state.examLayout = current;
    updateUIPreferences({ examLayout: sanitizeExamLayout(current) });
  }
  function setBlockMode(patch) {
    Object.assign(state.blockMode, patch);
  }
  function resetBlockMode() {
    state.blockMode = { section: "", assignments: {}, reveal: {}, order: {} };
  }
  function setEntryLayout(patch) {
    if (!patch) return;
    const layout = state.entryLayout;
    if (Object.prototype.hasOwnProperty.call(patch, "columns")) {
      const cols = Number(patch.columns);
      if (!Number.isNaN(cols)) {
        layout.columns = Math.max(1, Math.min(6, Math.round(cols)));
      }
    }
    if (Object.prototype.hasOwnProperty.call(patch, "scale")) {
      const scl = Number(patch.scale);
      if (!Number.isNaN(scl)) {
        layout.scale = Math.max(0.6, Math.min(1.4, scl));
      }
    }
    if (patch.mode === "list" || patch.mode === "grid") {
      layout.mode = patch.mode;
    }
    if (Object.prototype.hasOwnProperty.call(patch, "controlsVisible")) {
      layout.controlsVisible = Boolean(patch.controlsVisible);
    }
    updateUIPreferences({ entryLayout: sanitizeEntryLayout(layout) });
  }
  function setStudySelectedMode(mode) {
    if (!state.study) state.study = { selectedMode: "Flashcards" };
    if (mode === "Flashcards" || mode === "Quiz" || mode === "Blocks") {
      state.study.selectedMode = mode;
    }
  }
  function setStudySessions(map) {
    state.studySessions = map ? { ...map } : {};
    state.studySessionsLoaded = true;
  }
  function setStudySessionEntry(mode, entry) {
    if (!mode) return;
    const next = { ...state.studySessions || {} };
    if (entry) {
      next[mode] = entry;
    } else {
      delete next[mode];
    }
    state.studySessions = next;
  }
  function clearStudySessionsState() {
    state.studySessions = {};
    state.studySessionsLoaded = false;
  }

  // js/utils.js
  function uid() {
    const g = globalThis;
    return g.crypto?.randomUUID?.() || Math.random().toString(36).slice(2);
  }
  function debounce(fn, delay = 150) {
    let t;
    return (...args) => {
      clearTimeout(t);
      t = setTimeout(() => fn(...args), delay);
    };
  }
  var structuredCloneFn = typeof globalThis.structuredClone === "function" ? globalThis.structuredClone.bind(globalThis) : null;
  function cloneArrayBuffer(buffer) {
    if (typeof buffer.slice === "function") {
      return buffer.slice(0);
    }
    const copy = new ArrayBuffer(buffer.byteLength);
    new Uint8Array(copy).set(new Uint8Array(buffer));
    return copy;
  }
  function cloneArrayBufferView(view, seen) {
    if (typeof view?.constructor?.from === "function") {
      return view.constructor.from(view);
    }
    if (ArrayBuffer.isView(view)) {
      const bufferCopy = deepClone(view.buffer, seen);
      if (typeof DataView !== "undefined" && view instanceof DataView) {
        return new DataView(bufferCopy, view.byteOffset, view.byteLength);
      }
      return new view.constructor(bufferCopy, view.byteOffset, view.length ?? void 0);
    }
    return view;
  }
  function deepClone(value, seen = /* @__PURE__ */ new WeakMap()) {
    if (value == null || typeof value !== "object") {
      return value;
    }
    if (structuredCloneFn) {
      try {
        return structuredCloneFn(value);
      } catch (err) {
      }
    }
    if (seen.has(value)) {
      return seen.get(value);
    }
    if (value instanceof Date) {
      return new Date(value.getTime());
    }
    if (value instanceof RegExp) {
      const copy = new RegExp(value.source, value.flags);
      copy.lastIndex = value.lastIndex;
      return copy;
    }
    if (ArrayBuffer.isView(value)) {
      const cloned = cloneArrayBufferView(value, seen);
      seen.set(value, cloned);
      return cloned;
    }
    if (value instanceof ArrayBuffer) {
      const copy = cloneArrayBuffer(value);
      seen.set(value, copy);
      return copy;
    }
    if (Array.isArray(value)) {
      const result2 = [];
      seen.set(value, result2);
      for (let i = 0; i < value.length; i += 1) {
        result2[i] = deepClone(value[i], seen);
      }
      return result2;
    }
    if (value instanceof Map) {
      const result2 = /* @__PURE__ */ new Map();
      seen.set(value, result2);
      value.forEach((mapValue, key) => {
        const clonedKey = typeof key === "object" && key !== null ? deepClone(key, seen) : key;
        result2.set(clonedKey, deepClone(mapValue, seen));
      });
      return result2;
    }
    if (value instanceof Set) {
      const result2 = /* @__PURE__ */ new Set();
      seen.set(value, result2);
      value.forEach((entry) => {
        result2.add(deepClone(entry, seen));
      });
      return result2;
    }
    const result = {};
    seen.set(value, result);
    for (const [key, val] of Object.entries(value)) {
      result[key] = deepClone(val, seen);
    }
    return result;
  }
  function parseDateValue(value) {
    if (!value) return Number.NaN;
    if (value instanceof Date) {
      const time2 = value.getTime();
      return Number.isNaN(time2) ? Number.NaN : time2;
    }
    const date = new Date(value);
    const time = date.getTime();
    return Number.isNaN(time) ? Number.NaN : time;
  }
  function findActiveBlockId(blocks, now = Date.now()) {
    if (!Array.isArray(blocks) || blocks.length === 0) return "";
    const nowTs = Number.isFinite(now) ? now : Date.now();
    let current = null;
    let upcoming = null;
    let recent = null;
    blocks.forEach((block) => {
      if (!block || block.blockId == null) return;
      const id = String(block.blockId);
      const start = parseDateValue(block.startDate);
      const end = parseDateValue(block.endDate);
      const hasStart = Number.isFinite(start);
      const hasEnd = Number.isFinite(end);
      if (hasStart && hasEnd) {
        if (start <= nowTs && nowTs <= end) {
          if (!current || start < current.start || start === current.start && end < current.end) {
            current = { id, start, end };
          }
          return;
        }
        if (start > nowTs) {
          if (!upcoming || start < upcoming.start) {
            upcoming = { id, start };
          }
          return;
        }
        if (!recent || end > recent.end) {
          recent = { id, end };
        }
        return;
      }
      if (hasStart) {
        if (start <= nowTs) {
          if (!recent || start > recent.end) {
            recent = { id, end: start };
          }
        } else if (!upcoming || start < upcoming.start) {
          upcoming = { id, start };
        }
        return;
      }
      if (hasEnd) {
        if (nowTs <= end) {
          if (!current || end < current.end) {
            current = { id, start: end, end };
          }
        } else if (!recent || end > recent.end) {
          recent = { id, end };
        }
      }
    });
    if (current) return current.id;
    if (upcoming) return upcoming.id;
    if (recent) return recent.id;
    const first = blocks.find((block) => block && block.blockId != null);
    return first ? String(first.blockId) : "";
  }
  function setToggleState(element, active, className = "active") {
    if (!element) return;
    const isActive = Boolean(active);
    if (element.dataset) {
      element.dataset.toggle = "true";
      element.dataset.active = isActive ? "true" : "false";
    }
    if (className && element.classList) {
      element.classList.toggle(className, isActive);
    }
    if (typeof HTMLElement !== "undefined" && element instanceof HTMLElement) {
      const role = element.getAttribute("role");
      if ((element.tagName === "BUTTON" || role === "button") && typeof element.setAttribute === "function") {
        element.setAttribute("aria-pressed", isActive ? "true" : "false");
      }
    }
  }

  // js/lectures/scheduler.js
  var DAY_MINUTES = 24 * 60;
  var MINUTE_MS = 60 * 1e3;
  var DEFAULT_PASS_COLORS = [
    "#38bdf8",
    "#0ea5e9",
    "#34d399",
    "#10b981",
    "#facc15",
    "#f97316",
    "#f472b6",
    "#a855f7",
    "#818cf8",
    "#2dd4bf"
  ];
  var clone = deepClone;
  function toNumber(value, fallback = 0) {
    const num = Number(value);
    return Number.isFinite(num) ? num : fallback;
  }
  function sanitizeLabel(label, order) {
    if (typeof label === "string" && label.trim()) return label.trim();
    return `Pass ${order}`;
  }
  function sanitizeAction(action) {
    if (typeof action === "string") {
      const trimmed = action.trim();
      if (trimmed) return trimmed;
    }
    return "";
  }
  function inferAnchor(offsetMinutes) {
    if (!Number.isFinite(offsetMinutes)) return "today";
    if (offsetMinutes < DAY_MINUTES) return "today";
    if (offsetMinutes < DAY_MINUTES * 2) return "tomorrow";
    return "upcoming";
  }
  function startOfDay(timestamp) {
    const date = new Date(timestamp);
    date.setHours(0, 0, 0, 0);
    return date.getTime();
  }
  function computeAnchoredDue(startAt, step, plannerDefaults) {
    const offsetMinutes = toNumber(step?.offsetMinutes, 0);
    const base = startAt + Math.round(offsetMinutes * MINUTE_MS);
    if (!plannerDefaults || typeof plannerDefaults !== "object") return base;
    const anchorName = typeof step?.anchor === "string" && step.anchor.trim() ? step.anchor.trim() : inferAnchor(offsetMinutes);
    const anchorOffsets = plannerDefaults.anchorOffsets || {};
    const anchorMinutes = toNumber(anchorOffsets[anchorName], null);
    if (anchorMinutes == null) return base;
    const anchorBase = startOfDay(base) + Math.round(anchorMinutes * MINUTE_MS);
    if (!Number.isFinite(anchorBase)) return base;
    if (offsetMinutes >= 0 && anchorBase < base) {
      return base;
    }
    return anchorBase;
  }
  var DEFAULT_PASS_PLAN = {
    id: "default",
    schedule: [
      { order: 1, label: "Pass 1", offsetMinutes: 0, anchor: "today", action: "Notes" },
      { order: 2, label: "Pass 2", offsetMinutes: 24 * 60, anchor: "tomorrow", action: "Review" },
      { order: 3, label: "Pass 3", offsetMinutes: 72 * 60, anchor: "upcoming", action: "Quiz" }
    ]
  };
  var DEFAULT_PLANNER_DEFAULTS = {
    anchorOffsets: {
      today: 0,
      tomorrow: 8 * 60,
      upcoming: 8 * 60
    },
    passes: DEFAULT_PASS_PLAN.schedule.map((entry) => ({
      order: entry.order,
      label: entry.label,
      offsetMinutes: entry.offsetMinutes,
      anchor: entry.anchor
    })),
    passColors: DEFAULT_PASS_COLORS
  };
  function normalizePassPlan(plan) {
    const source = plan && typeof plan === "object" ? plan : {};
    const mergedSchedule = Array.isArray(source.schedule) ? source.schedule : DEFAULT_PASS_PLAN.schedule;
    const normalizedSchedule = (Array.isArray(mergedSchedule) ? mergedSchedule : []).map((step, index) => {
      const order = toNumber(step?.order, index + 1);
      const offsetMinutes = toNumber(step?.offsetMinutes, DEFAULT_PASS_PLAN.schedule[index]?.offsetMinutes ?? 0);
      const anchor = typeof step?.anchor === "string" && step.anchor.trim() ? step.anchor.trim() : inferAnchor(offsetMinutes);
      const label = sanitizeLabel(step?.label, order);
      const action = sanitizeAction(step?.action ?? DEFAULT_PASS_PLAN.schedule[index]?.action);
      return { order, offsetMinutes, anchor, label, action };
    }).sort((a, b) => a.order - b.order);
    return {
      id: typeof source.id === "string" && source.id.trim() ? source.id.trim() : DEFAULT_PASS_PLAN.id,
      schedule: normalizedSchedule
    };
  }
  function normalizePlannerDefaults(raw) {
    const source = raw && typeof raw === "object" ? raw : {};
    const anchorOffsets = {};
    const defaultAnchors = DEFAULT_PLANNER_DEFAULTS.anchorOffsets;
    const incomingAnchors = source.anchorOffsets && typeof source.anchorOffsets === "object" ? source.anchorOffsets : {};
    const allKeys = /* @__PURE__ */ new Set([
      ...Object.keys(defaultAnchors),
      ...Object.keys(incomingAnchors)
    ]);
    for (const key of allKeys) {
      const fallback = defaultAnchors[key] ?? 0;
      const value = incomingAnchors[key];
      anchorOffsets[key] = toNumber(value, fallback);
    }
    const passesSource = Array.isArray(source.passes) ? source.passes : DEFAULT_PLANNER_DEFAULTS.passes;
    const normalizedPlan = normalizePassPlan({ schedule: passesSource });
    const paletteSource = Array.isArray(source.passColors) && source.passColors.length ? source.passColors : DEFAULT_PASS_COLORS;
    const passColors = paletteSource.map((color, index) => {
      if (typeof color === "string") {
        const trimmed = color.trim();
        if (trimmed) return trimmed;
      }
      return DEFAULT_PASS_COLORS[index % DEFAULT_PASS_COLORS.length];
    });
    const palette2 = passColors.length ? passColors : DEFAULT_PASS_COLORS.slice();
    return {
      anchorOffsets,
      passes: normalizedPlan.schedule.map((step) => ({
        order: step.order,
        label: step.label,
        offsetMinutes: step.offsetMinutes,
        anchor: step.anchor,
        action: step.action
      })),
      passColors: palette2
    };
  }
  function sanitizeAttachments(raw) {
    if (!Array.isArray(raw)) return [];
    return raw.filter((att) => att != null).map((att) => typeof att === "object" ? deepClone(att) : att);
  }
  function normalizeLecturePasses({
    plan,
    passes,
    plannerDefaults,
    startAt,
    now = Date.now()
  } = {}) {
    const normalizedPlan = normalizePassPlan(plan || DEFAULT_PASS_PLAN);
    const schedule = normalizedPlan.schedule;
    const existingList = Array.isArray(passes) ? passes : [];
    const existingByOrder = /* @__PURE__ */ new Map();
    existingList.forEach((entry, index) => {
      if (!entry || typeof entry !== "object") return;
      const order = toNumber(entry.order, index + 1);
      if (!existingByOrder.has(order)) {
        existingByOrder.set(order, entry);
      }
    });
    const planner = normalizePlannerDefaults(plannerDefaults || {});
    const anchorConfig = {
      anchorOffsets: planner.anchorOffsets,
      schedule: planner.passes
    };
    const startTimestamp = Number.isFinite(startAt) ? startAt : now;
    const normalizedPasses = schedule.map((step, index) => {
      const existing = existingByOrder.get(step.order) || existingList[index] || {};
      const dueCandidate = Number.isFinite(existing?.due) ? existing.due : null;
      const due = dueCandidate != null ? dueCandidate : computeAnchoredDue(startTimestamp, step, anchorConfig);
      const completedAt = Number.isFinite(existing?.completedAt) ? existing.completedAt : null;
      const label = sanitizeLabel(existing?.label ?? step.label, step.order);
      const anchor = typeof (existing?.anchor ?? step.anchor) === "string" ? existing?.anchor ?? step.anchor : inferAnchor(step.offsetMinutes);
      const attachments = sanitizeAttachments(existing.attachments);
      const action = sanitizeAction(existing?.action ?? step.action);
      return {
        order: step.order,
        label,
        offsetMinutes: step.offsetMinutes,
        anchor,
        due,
        completedAt,
        attachments,
        action
      };
    });
    return normalizedPasses;
  }
  function calculateNextDue(passes) {
    if (!Array.isArray(passes) || !passes.length) return null;
    const dueTimes = passes.filter((pass) => pass && !pass.completedAt).map((pass) => Number.isFinite(pass.due) ? pass.due : null).filter((due) => due != null).sort((a, b) => a - b);
    return dueTimes.length ? dueTimes[0] : null;
  }
  function deriveLectureStatus(passes, base = {}) {
    const total = Array.isArray(passes) ? passes.length : 0;
    const completed = Array.isArray(passes) ? passes.filter((pass) => Number.isFinite(pass?.completedAt)).length : 0;
    const lastCompletedAt = Array.isArray(passes) ? passes.reduce((max, pass) => {
      const ts = Number.isFinite(pass?.completedAt) ? pass.completedAt : null;
      if (ts == null) return max;
      return max == null ? ts : Math.max(max, ts);
    }, null) : null;
    let state2 = "pending";
    if (total === 0) {
      state2 = "unscheduled";
    } else if (completed === 0) {
      state2 = "pending";
    } else if (completed < total) {
      state2 = "in-progress";
    } else {
      state2 = "complete";
    }
    const merged = {
      ...base,
      completedPasses: completed,
      lastCompletedAt,
      state: state2
    };
    return merged;
  }
  function markPassCompleted(lecture, passIndex, completedAt = Date.now()) {
    if (!lecture || typeof lecture !== "object") return null;
    const passes = Array.isArray(lecture.passes) ? lecture.passes.map((pass) => ({ ...pass })) : [];
    if (!Number.isFinite(passIndex)) return { ...lecture, passes, nextDueAt: calculateNextDue(passes), status: deriveLectureStatus(passes, lecture.status) };
    if (passes.length === 0) {
      return { ...lecture, passes, nextDueAt: calculateNextDue(passes), status: deriveLectureStatus(passes, lecture.status) };
    }
    const clamped = Math.floor(passIndex);
    if (clamped < 0 || clamped >= passes.length) {
      return { ...lecture, passes, nextDueAt: calculateNextDue(passes), status: deriveLectureStatus(passes, lecture.status) };
    }
    if (passes[clamped]) {
      passes[clamped].completedAt = completedAt;
    }
    const status = deriveLectureStatus(passes, lecture.status);
    const nextDueAt = calculateNextDue(passes);
    return {
      ...lecture,
      passes,
      status,
      nextDueAt
    };
  }
  function groupLectureQueues(lectures, { now = Date.now() } = {}) {
    const result = {
      overdue: [],
      today: [],
      tomorrow: [],
      upcoming: []
    };
    if (!Array.isArray(lectures) || !lectures.length) return result;
    const startToday = startOfDay(now);
    const startTomorrow = startToday + DAY_MINUTES * MINUTE_MS;
    const startDayAfter = startTomorrow + DAY_MINUTES * MINUTE_MS;
    const addEntry = (bucket, entry) => {
      result[bucket].push(entry);
    };
    for (const lecture of lectures) {
      if (!lecture || typeof lecture !== "object") continue;
      const passes = Array.isArray(lecture.passes) ? lecture.passes : [];
      const nextPass = passes.find((pass) => pass && !Number.isFinite(pass.completedAt));
      const due = Number.isFinite(nextPass?.due) ? nextPass.due : null;
      const entry = { lecture, pass: nextPass || null, due };
      if (due == null) {
        addEntry("upcoming", entry);
        continue;
      }
      if (due <= now) {
        addEntry("overdue", entry);
      } else if (due < startTomorrow) {
        addEntry("today", entry);
      } else if (due < startDayAfter) {
        addEntry("tomorrow", entry);
      } else {
        addEntry("upcoming", entry);
      }
    }
    for (const key of Object.keys(result)) {
      result[key].sort((a, b) => {
        if (a.due == null && b.due == null) return 0;
        if (a.due == null) return 1;
        if (b.due == null) return -1;
        return a.due - b.due;
      });
    }
    return result;
  }
  function clonePassPlan(plan = DEFAULT_PASS_PLAN) {
    return clone(plan || DEFAULT_PASS_PLAN);
  }
  function plannerDefaultsToPassPlan(defaults) {
    const normalized2 = normalizePlannerDefaults(defaults || {});
    const schedule = (normalized2?.passes || []).map((step, index) => {
      const order = toNumber(step?.order, index + 1);
      const offsetMinutes = toNumber(
        step?.offsetMinutes,
        DEFAULT_PASS_PLAN.schedule[index]?.offsetMinutes ?? 0
      );
      const anchor = typeof step?.anchor === "string" && step.anchor.trim() ? step.anchor.trim() : inferAnchor(offsetMinutes);
      const label = sanitizeLabel(step?.label, order);
      const action = sanitizeAction(step?.action ?? DEFAULT_PASS_PLAN.schedule[index]?.action);
      return { order, offsetMinutes, anchor, label, action };
    }).sort((a, b) => a.order - b.order);
    return {
      id: normalized2?.id || "planner-defaults",
      schedule
    };
  }

  // js/storage/lecture-schema.js
  var KEY_SEPARATOR = "|";
  var DEFAULT_LECTURE_STATUS = {
    state: "pending",
    completedPasses: 0,
    lastCompletedAt: null
  };
  function lectureKey(blockId, lectureId) {
    return `${blockId}${KEY_SEPARATOR}${lectureId}`;
  }
  function cloneDefaultPassPlan() {
    return deepClone(DEFAULT_PASS_PLAN);
  }
  function cloneDefaultStatus() {
    return deepClone(DEFAULT_LECTURE_STATUS);
  }
  function normalizeLectureRecord(blockId, lecture, now = Date.now()) {
    if (!lecture || blockId == null || lecture.id == null) return null;
    const key = lecture.key || lectureKey(blockId, lecture.id);
    const name = typeof lecture.name === "string" ? lecture.name : "";
    const weekRaw = lecture.week;
    let week = null;
    if (typeof weekRaw === "number" && Number.isFinite(weekRaw)) {
      week = weekRaw;
    } else if (typeof weekRaw === "string" && weekRaw.trim()) {
      const parsed = Number(weekRaw);
      if (!Number.isNaN(parsed)) week = parsed;
    }
    const startRaw = lecture.startAt;
    let startAt = null;
    if (Number.isFinite(startRaw)) {
      startAt = startRaw;
    } else if (typeof startRaw === "string" && startRaw.trim()) {
      const parsedStart = Number(startRaw);
      if (!Number.isNaN(parsedStart)) {
        startAt = parsedStart;
      }
    }
    if (!Number.isFinite(startAt)) {
      startAt = Number.isFinite(lecture.createdAt) ? lecture.createdAt : now;
    }
    const tags = Array.isArray(lecture.tags) ? lecture.tags.filter((tag) => typeof tag === "string" && tag.trim()).map((tag) => tag.trim()) : [];
    const passPlan = lecture.passPlan ? normalizePassPlan({ ...cloneDefaultPassPlan(), ...lecture.passPlan }) : normalizePassPlan(cloneDefaultPassPlan());
    const plannerDefaults = normalizePlannerDefaults(lecture.plannerDefaults || {});
    const passes = normalizeLecturePasses({
      plan: passPlan,
      passes: lecture.passes,
      plannerDefaults,
      startAt,
      now
    });
    const statusBase = lecture.status ? { ...cloneDefaultStatus(), ...lecture.status } : cloneDefaultStatus();
    const status = deriveLectureStatus(passes, statusBase);
    const nextDueAt = calculateNextDue(passes);
    const createdAt = typeof lecture.createdAt === "number" ? lecture.createdAt : now;
    const updatedAt = now;
    return {
      key,
      blockId,
      id: lecture.id,
      name,
      week,
      tags,
      passes,
      passPlan,
      plannerDefaults,
      status,
      nextDueAt,
      startAt,
      createdAt,
      updatedAt
    };
  }

  // js/storage/idb.js
  var DB_NAME = "sevenn-db";
  var DB_VERSION = 5;
  var MEMORY_STORAGE_KEY = "sevenn-memory-db";
  var STORE_KEY_PATHS = {
    items: "id",
    blocks: "blockId",
    exams: "id",
    settings: "id",
    exam_sessions: "examId",
    study_sessions: "mode",
    lectures: "key"
  };
  var enqueue = typeof queueMicrotask === "function" ? queueMicrotask.bind(globalThis) : ((cb) => Promise.resolve().then(cb));
  var clone2 = deepClone;
  var MemoryRequest = class {
    constructor(tx, executor) {
      this.result = void 0;
      this.error = null;
      this.onsuccess = null;
      this.onerror = null;
      tx._requestStarted();
      enqueue(() => {
        try {
          this.result = executor();
          if (typeof this.onsuccess === "function") {
            this.onsuccess({ target: this });
          }
          tx._requestFinished();
        } catch (err) {
          this.error = err;
          if (typeof this.onerror === "function") {
            this.onerror({ target: this });
          }
          tx._requestFailed(err);
        }
      });
    }
  };
  var MemoryIndex = class {
    constructor(store2, extractor, multiEntry = false) {
      this.store = store2;
      this.extractor = extractor;
      this.multiEntry = multiEntry;
    }
    getAll(value) {
      return new MemoryRequest(this.store.tx, () => {
        const results = [];
        for (const item of this.store._map().values()) {
          const extracted = this.extractor(item);
          if (this.multiEntry && Array.isArray(extracted)) {
            if (extracted.includes(value)) results.push(clone2(item));
          } else if (extracted === value) {
            results.push(clone2(item));
          }
        }
        return results;
      });
    }
    getAllKeys(value) {
      return new MemoryRequest(this.store.tx, () => {
        const results = [];
        for (const [key, item] of this.store._map()) {
          const extracted = this.extractor(item);
          if (this.multiEntry && Array.isArray(extracted)) {
            if (extracted.includes(value)) results.push(key);
          } else if (extracted === value) {
            results.push(key);
          }
        }
        return results;
      });
    }
  };
  var MemoryStore = class {
    constructor(tx, name) {
      this.tx = tx;
      this.name = name;
    }
    _map() {
      if (!this.tx.db.maps[this.name]) {
        this.tx.db.maps[this.name] = /* @__PURE__ */ new Map();
      }
      return this.tx.db.maps[this.name];
    }
    _keyFromValue(value) {
      const keyPath = STORE_KEY_PATHS[this.name];
      if (!keyPath) return void 0;
      return value?.[keyPath];
    }
    get(key) {
      return new MemoryRequest(this.tx, () => {
        const found = this._map().get(key);
        return clone2(found);
      });
    }
    getAll() {
      return new MemoryRequest(this.tx, () => {
        return Array.from(this._map().values()).map(clone2);
      });
    }
    put(value) {
      return new MemoryRequest(this.tx, () => {
        const key = this._keyFromValue(value);
        if (key == null) throw new Error(`Missing key for store ${this.name}`);
        this._map().set(key, clone2(value));
        this.tx.db._persist();
        return clone2(value);
      });
    }
    delete(key) {
      return new MemoryRequest(this.tx, () => {
        this._map().delete(key);
        this.tx.db._persist();
        return void 0;
      });
    }
    clear() {
      return new MemoryRequest(this.tx, () => {
        this._map().clear();
        this.tx.db._persist();
        return void 0;
      });
    }
    index(name) {
      if (this.name === "items") {
        switch (name) {
          case "by_kind":
            return new MemoryIndex(this, (item) => item.kind || null);
          case "by_blocks":
            return new MemoryIndex(this, (item) => item.blocks || [], true);
          case "by_weeks":
            return new MemoryIndex(this, (item) => item.weeks || [], true);
          case "by_favorite":
            return new MemoryIndex(this, (item) => !!item.favorite);
          default:
            break;
        }
      } else if (this.name === "lectures") {
        switch (name) {
          case "by_block":
            return new MemoryIndex(this, (item) => item.blockId || null);
          case "by_tags":
            return new MemoryIndex(this, (item) => item.tags || [], true);
          case "by_nextDue":
            return new MemoryIndex(this, (item) => item.nextDueAt ?? null);
          default:
            break;
        }
      }
      return {
        getAll: () => new MemoryRequest(this.tx, () => []),
        getAllKeys: () => new MemoryRequest(this.tx, () => [])
      };
    }
  };
  var MemoryTransaction = class {
    constructor(db, names, mode) {
      this.db = db;
      this.names = Array.isArray(names) ? names : [names];
      this.mode = mode;
      this._stores = /* @__PURE__ */ new Map();
      this._pending = 0;
      this._failed = false;
      this._completePending = false;
      this._errorPending = null;
      this._oncomplete = null;
      this._onerror = null;
      Object.defineProperty(this, "oncomplete", {
        get: () => this._oncomplete,
        set: (fn) => {
          this._oncomplete = fn;
          if (this._completePending && typeof fn === "function") {
            this._completePending = false;
            enqueue(() => fn({ target: this }));
          }
        }
      });
      Object.defineProperty(this, "onerror", {
        get: () => this._onerror,
        set: (fn) => {
          this._onerror = fn;
          if (this._errorPending && typeof fn === "function") {
            const err = this._errorPending;
            this._errorPending = null;
            enqueue(() => fn({ target: this, error: err }));
          }
        }
      });
    }
    objectStore(name) {
      if (!this._stores.has(name)) {
        this._stores.set(name, new MemoryStore(this, name));
      }
      return this._stores.get(name);
    }
    _requestStarted() {
      this._pending += 1;
    }
    _requestFinished() {
      if (this._pending > 0) this._pending -= 1;
      if (this._pending === 0 && !this._failed) {
        if (typeof this._oncomplete === "function") {
          enqueue(() => this._oncomplete({ target: this }));
        } else {
          this._completePending = true;
        }
      }
    }
    _requestFailed(error) {
      this._failed = true;
      if (typeof this._onerror === "function") {
        enqueue(() => this._onerror({ target: this, error }));
      } else {
        this._errorPending = error;
      }
    }
  };
  var MemoryDB = class {
    constructor() {
      this.maps = {};
      this.persistKey = MEMORY_STORAGE_KEY;
      this.canPersist = false;
      if (typeof localStorage !== "undefined") {
        try {
          const testKey = `${MEMORY_STORAGE_KEY}-test`;
          localStorage.setItem(testKey, "1");
          localStorage.removeItem(testKey);
          this.canPersist = true;
        } catch (err) {
          this.canPersist = false;
        }
      }
      for (const name of Object.keys(STORE_KEY_PATHS)) {
        this.maps[name] = /* @__PURE__ */ new Map();
      }
      this._load();
    }
    _load() {
      if (!this.canPersist) return;
      try {
        const raw = localStorage.getItem(this.persistKey);
        if (!raw) return;
        const parsed = JSON.parse(raw);
        for (const name of Object.keys(STORE_KEY_PATHS)) {
          const list = parsed?.[name];
          if (Array.isArray(list)) {
            for (const entry of list) {
              const keyPath = STORE_KEY_PATHS[name];
              const key = entry?.[keyPath];
              if (key != null) {
                this.maps[name].set(key, clone2(entry));
              }
            }
          }
        }
      } catch (err) {
        console.warn("Failed to load memory DB from storage", err);
        for (const name of Object.keys(STORE_KEY_PATHS)) {
          this.maps[name].clear();
        }
      }
    }
    _persist() {
      if (!this.canPersist) return;
      try {
        const payload = {};
        for (const name of Object.keys(STORE_KEY_PATHS)) {
          payload[name] = Array.from(this.maps[name].values()).map(clone2);
        }
        localStorage.setItem(this.persistKey, JSON.stringify(payload));
      } catch (err) {
        console.warn("Failed to persist memory DB", err);
        this.canPersist = false;
      }
    }
    transaction(names, mode = "readonly") {
      return new MemoryTransaction(this, names, mode);
    }
    close() {
    }
  };
  function fallbackToMemory(message, error) {
    if (message) {
      console.warn(message, error);
    }
    return new MemoryDB();
  }
  function openDB() {
    if (!("indexedDB" in globalThis)) {
      return Promise.resolve(fallbackToMemory("IndexedDB unavailable, using in-memory storage."));
    }
    return new Promise((resolve) => {
      let settled = false;
      let req;
      try {
        req = indexedDB.open(DB_NAME, DB_VERSION);
      } catch (err) {
        settled = true;
        resolve(fallbackToMemory("IndexedDB threw during open, using in-memory storage.", err));
        return;
      }
      const timer = setTimeout(() => {
        if (!settled) {
          settled = true;
          resolve(fallbackToMemory("IndexedDB open timeout, using in-memory storage."));
        }
      }, 5e3);
      req.onerror = () => {
        if (settled) return;
        settled = true;
        clearTimeout(timer);
        resolve(fallbackToMemory("IndexedDB failed to open, using in-memory storage.", req.error));
      };
      req.onupgradeneeded = (event) => {
        const db = req.result;
        const tx = req.transaction;
        if (!db.objectStoreNames.contains("items")) {
          const items = db.createObjectStore("items", { keyPath: "id" });
          items.createIndex("by_kind", "kind");
          items.createIndex("by_updatedAt", "updatedAt");
          items.createIndex("by_favorite", "favorite");
          items.createIndex("by_blocks", "blocks", { multiEntry: true });
          items.createIndex("by_weeks", "weeks", { multiEntry: true });
          items.createIndex("by_lecture_ids", "lectures.id", { multiEntry: true });
          items.createIndex("by_search", "tokens");
        }
        if (!db.objectStoreNames.contains("blocks")) {
          const blocks = db.createObjectStore("blocks", { keyPath: "blockId" });
          blocks.createIndex("by_title", "title");
          blocks.createIndex("by_createdAt", "createdAt");
        }
        if (!db.objectStoreNames.contains("exams")) {
          const exams = db.createObjectStore("exams", { keyPath: "id" });
          exams.createIndex("by_createdAt", "createdAt");
        }
        if (!db.objectStoreNames.contains("settings")) {
          db.createObjectStore("settings", { keyPath: "id" });
        }
        if (!db.objectStoreNames.contains("exam_sessions")) {
          const sessions = db.createObjectStore("exam_sessions", { keyPath: "examId" });
          sessions.createIndex("by_updatedAt", "updatedAt");
        }
        if (!db.objectStoreNames.contains("study_sessions")) {
          const sessions = db.createObjectStore("study_sessions", { keyPath: "mode" });
          sessions.createIndex("by_updatedAt", "updatedAt");
        }
        let lecturesStore = null;
        if (!db.objectStoreNames.contains("lectures")) {
          lecturesStore = db.createObjectStore("lectures", { keyPath: "key" });
          lecturesStore.createIndex("by_block", "blockId");
          lecturesStore.createIndex("by_tags", "tags", { multiEntry: true });
          lecturesStore.createIndex("by_nextDue", "nextDueAt");
        } else if (tx) {
          try {
            lecturesStore = tx.objectStore("lectures");
            if (lecturesStore) {
              const indexNames = Array.from(lecturesStore.indexNames || []);
              if (!indexNames.includes("by_block")) {
                lecturesStore.createIndex("by_block", "blockId");
              }
              if (!indexNames.includes("by_tags")) {
                lecturesStore.createIndex("by_tags", "tags", { multiEntry: true });
              }
              if (!indexNames.includes("by_nextDue")) {
                lecturesStore.createIndex("by_nextDue", "nextDueAt");
              }
            }
          } catch (err) {
            console.warn("Failed to ensure lecture indexes", err);
          }
        }
        if (tx && lecturesStore && event.oldVersion < 5) {
          try {
            const blocksStore = tx.objectStore("blocks");
            if (blocksStore && typeof blocksStore.getAll === "function") {
              const readReq = blocksStore.getAll();
              readReq.onsuccess = () => {
                const blocks = Array.isArray(readReq.result) ? readReq.result : [];
                const now = Date.now();
                for (const block of blocks) {
                  const originalLectures = Array.isArray(block?.lectures) ? block.lectures : [];
                  const hadLecturesField = Object.prototype.hasOwnProperty.call(block || {}, "lectures");
                  if (originalLectures.length) {
                    const sanitized = { ...block };
                    delete sanitized.lectures;
                    try {
                      blocksStore.put(sanitized);
                    } catch (err) {
                      console.warn("Failed to persist migrated block", err);
                    }
                    for (const lecture of originalLectures) {
                      const normalized2 = normalizeLectureRecord(block.blockId, lecture, now);
                      if (!normalized2) continue;
                      try {
                        lecturesStore.put(normalized2);
                      } catch (err) {
                        console.warn("Failed to migrate lecture", err);
                      }
                    }
                  } else if (hadLecturesField) {
                    const sanitized = { ...block };
                    delete sanitized.lectures;
                    try {
                      blocksStore.put(sanitized);
                    } catch (err) {
                      console.warn("Failed to clean block lectures field", err);
                    }
                  }
                }
              };
              readReq.onerror = () => {
                console.warn("Failed to read blocks during lecture migration", readReq.error);
              };
            }
          } catch (err) {
            console.warn("Lecture migration failed", err);
          }
        }
      };
      req.onsuccess = () => {
        if (settled) return;
        settled = true;
        clearTimeout(timer);
        resolve(req.result);
      };
    });
  }

  // js/storage/lectures.js
  var clone3 = deepClone;
  function prom(req) {
    return new Promise((resolve, reject) => {
      req.onsuccess = () => resolve(req.result);
      req.onerror = () => reject(req.error);
    });
  }
  async function lectureStore(mode = "readonly") {
    const db = await openDB();
    return db.transaction("lectures", mode).objectStore("lectures");
  }
  async function fetchLecturesForBlock(storeRef, blockId) {
    if (!blockId) return [];
    try {
      if (typeof storeRef.index === "function") {
        const idx = storeRef.index("by_block");
        if (idx && typeof idx.getAll === "function") {
          const results = await prom(idx.getAll(blockId));
          return Array.isArray(results) ? results : [];
        }
      }
    } catch (err) {
      console.warn("Failed to use lecture block index, falling back to scan", err);
    }
    const all = await prom(storeRef.getAll());
    return (Array.isArray(all) ? all : []).filter((entry) => entry?.blockId === blockId);
  }
  function buildNormalizedLecture(blockId, input, existing, now) {
    const lectureId = input?.id ?? existing?.id;
    if (blockId == null || lectureId == null) return null;
    const tags = Array.isArray(input?.tags) ? input.tags : Array.isArray(existing?.tags) ? existing.tags : void 0;
    const explicitPasses = Array.isArray(input?.passes);
    const passPlanChanged = Boolean(input?.passPlan);
    const plannerDefaultsChanged = Boolean(input?.plannerDefaults);
    const startProvided = input?.startAt !== void 0;
    const passContextChanged = passPlanChanged || plannerDefaultsChanged || startProvided;
    const shouldPreserveScheduleState = !explicitPasses && !passContextChanged;
    let passes;
    if (explicitPasses) {
      passes = input.passes;
    } else if (passContextChanged && Array.isArray(existing?.passes)) {
      passes = existing.passes.map((pass) => {
        if (!pass || typeof pass !== "object") return pass;
        const next = { ...pass };
        delete next.due;
        return next;
      });
    } else {
      passes = Array.isArray(existing?.passes) ? existing.passes : void 0;
    }
    const passPlan = passPlanChanged ? { ...existing?.passPlan || {}, ...input.passPlan } : existing?.passPlan;
    const status = input?.status ? { ...existing?.status || {}, ...input.status } : existing?.status;
    const plannerDefaults = plannerDefaultsChanged ? { ...existing?.plannerDefaults || {}, ...input.plannerDefaults } : existing?.plannerDefaults;
    const nextDueAt = input?.nextDueAt !== void 0 ? input.nextDueAt : existing?.nextDueAt;
    const composite = {
      ...existing || {},
      ...input || {},
      blockId,
      id: lectureId,
      key: lectureKey(blockId, lectureId),
      tags,
      passes,
      passPlan,
      plannerDefaults,
      status,
      nextDueAt
    };
    const normalized2 = normalizeLectureRecord(blockId, composite, now);
    if (existing?.createdAt != null) normalized2.createdAt = existing.createdAt;
    if (existing && !input?.passPlan && existing.passPlan) normalized2.passPlan = clone3(existing.passPlan);
    if (existing && shouldPreserveScheduleState && !input?.status && existing.status) {
      normalized2.status = clone3(existing.status);
    }
    if (existing && shouldPreserveScheduleState && Array.isArray(existing.passes)) {
      normalized2.passes = clone3(existing.passes);
    }
    if (existing && !Array.isArray(input?.tags) && Array.isArray(existing.tags)) {
      normalized2.tags = clone3(existing.tags);
    }
    if (existing && shouldPreserveScheduleState && input?.nextDueAt === void 0 && existing.nextDueAt !== void 0) {
      normalized2.nextDueAt = existing.nextDueAt ?? null;
    }
    return normalized2;
  }
  async function listLecturesByBlock(blockId) {
    try {
      const store2 = await lectureStore();
      const rows = await fetchLecturesForBlock(store2, blockId);
      return rows.map(clone3);
    } catch (err) {
      console.warn("listLecturesByBlock failed", err);
      return [];
    }
  }
  async function listAllLectures() {
    try {
      const store2 = await lectureStore();
      const rows = await prom(store2.getAll());
      return Array.isArray(rows) ? rows.map(clone3) : [];
    } catch (err) {
      console.warn("listAllLectures failed", err);
      return [];
    }
  }
  async function saveLecture(lecture) {
    if (!lecture || lecture.blockId == null) {
      throw new Error("Missing lecture identity for save");
    }
    const store2 = await lectureStore("readwrite");
    let lectureId = lecture.id;
    if (lectureId == null) {
      const rows = await fetchLecturesForBlock(store2, lecture.blockId);
      let maxId = 0;
      for (const row of rows) {
        const value = Number(row?.id);
        if (Number.isFinite(value) && value > maxId) {
          maxId = value;
        }
      }
      lectureId = maxId + 1;
    }
    if (typeof lectureId === "string") {
      const parsed = Number(lectureId);
      if (!Number.isNaN(parsed)) {
        lectureId = parsed;
      }
    }
    const key = lectureKey(lecture.blockId, lectureId);
    const existing = await prom(store2.get(key));
    const now = Date.now();
    const normalized2 = buildNormalizedLecture(lecture.blockId, { ...lecture, id: lectureId }, existing, now);
    if (!normalized2) throw new Error("Failed to normalize lecture payload");
    await prom(store2.put(normalized2));
    return clone3(normalized2);
  }
  async function deleteLectureRecord(blockId, lectureId) {
    if (blockId == null || lectureId == null) return;
    const store2 = await lectureStore("readwrite");
    await prom(store2.delete(lectureKey(blockId, lectureId)));
  }
  async function removeLecturesForBlock(blockId) {
    if (!blockId) return;
    const store2 = await lectureStore("readwrite");
    const rows = await fetchLecturesForBlock(store2, blockId);
    for (const row of rows) {
      await prom(store2.delete(row.key));
    }
  }

  // js/search.js
  var contentFields = [
    "etiology",
    "pathophys",
    "clinical",
    "diagnosis",
    "treatment",
    "complications",
    "mnemonic",
    "class",
    "source",
    "moa",
    "uses",
    "sideEffects",
    "contraindications",
    "type",
    "definition",
    "mechanism",
    "clinicalRelevance",
    "example"
  ];
  function stripHtml(value = "") {
    return value.replace(/<br\s*\/?>(\s*)/gi, " ").replace(/<[^>]+>/g, " ").replace(/&nbsp;/gi, " ").replace(/&[#a-z0-9]+;/gi, " ");
  }
  function tokenize(str) {
    return str.toLowerCase().replace(/[^\p{L}\p{N}\s]/gu, " ").split(/\s+/).filter(Boolean);
  }
  function buildTokens(item) {
    const fields = [];
    if (item.name) fields.push(item.name);
    if (item.concept) fields.push(item.concept);
    fields.push(...item.tags || []);
    if (Array.isArray(item.extras)) {
      item.extras.forEach((extra) => {
        if (!extra) return;
        if (extra.title) fields.push(extra.title);
        if (extra.body) fields.push(stripHtml(extra.body));
      });
    } else if (item.facts && item.facts.length) {
      fields.push(...item.facts);
    }
    if (item.lectures) fields.push(...item.lectures.map((l) => l.name));
    contentFields.forEach((field) => {
      if (typeof item[field] === "string" && item[field]) {
        fields.push(stripHtml(item[field]));
      }
    });
    return Array.from(new Set(tokenize(fields.join(" ")))).slice(0, 200).join(" ");
  }
  function buildSearchMeta(item) {
    const pieces = [];
    if (item.name) pieces.push(item.name);
    if (item.concept) pieces.push(item.concept);
    pieces.push(...item.tags || []);
    pieces.push(...item.blocks || []);
    if (Array.isArray(item.lectures)) {
      pieces.push(...item.lectures.map((l) => l?.name || ""));
    }
    return pieces.join(" ").toLowerCase();
  }

  // js/storage/export.js
  var MAP_CONFIG_KEY = "map-config";
  var TRANSACTION_STORES = [
    "items",
    "blocks",
    "exams",
    "settings",
    "exam_sessions",
    "study_sessions",
    "lectures"
  ];
  function prom2(req) {
    return new Promise((resolve, reject) => {
      req.onsuccess = () => resolve(req.result);
      req.onerror = () => reject(req.error);
    });
  }
  async function exportJSON() {
    const db = await openDB();
    const tx = db.transaction(TRANSACTION_STORES);
    const itemsStore = tx.objectStore("items");
    const blocksStore = tx.objectStore("blocks");
    const examsStore = tx.objectStore("exams");
    const settingsStore = tx.objectStore("settings");
    const examSessionsStore = tx.objectStore("exam_sessions");
    const studySessionsStore = tx.objectStore("study_sessions");
    const lecturesStore = tx.objectStore("lectures");
    const [
      items = [],
      blocks = [],
      exams = [],
      settingsArr = [],
      examSessions = [],
      studySessions = [],
      lectures = []
    ] = await Promise.all([
      prom2(itemsStore.getAll()),
      prom2(blocksStore.getAll()),
      prom2(examsStore.getAll()),
      prom2(settingsStore.getAll()),
      prom2(examSessionsStore.getAll()),
      prom2(studySessionsStore.getAll()),
      prom2(lecturesStore.getAll())
    ]);
    const settings = settingsArr.find((s) => s?.id === "app") || { id: "app", dailyCount: 20, theme: "dark" };
    const mapConfigEntry = settingsArr.find((s) => s?.id === MAP_CONFIG_KEY);
    const mapConfig = mapConfigEntry && typeof mapConfigEntry === "object" ? mapConfigEntry.config : null;
    const additionalSettings = settingsArr.filter((entry) => {
      if (!entry || typeof entry !== "object") return false;
      if (!entry.id || entry.id === "app" || entry.id === MAP_CONFIG_KEY) return false;
      return true;
    });
    return {
      items,
      blocks,
      exams,
      lectures,
      examSessions,
      studySessions,
      settings,
      mapConfig,
      settingsEntries: additionalSettings
    };
  }
  async function importJSON(dbDump) {
    try {
      const db = await openDB();
      const tx = db.transaction(TRANSACTION_STORES, "readwrite");
      const items = tx.objectStore("items");
      const blocks = tx.objectStore("blocks");
      const exams = tx.objectStore("exams");
      const settings = tx.objectStore("settings");
      const examSessions = tx.objectStore("exam_sessions");
      const studySessions = tx.objectStore("study_sessions");
      const lectures = tx.objectStore("lectures");
      await Promise.all([
        prom2(items.clear()),
        prom2(blocks.clear()),
        prom2(exams.clear()),
        prom2(settings.clear()),
        prom2(examSessions.clear()),
        prom2(studySessions.clear()),
        prom2(lectures.clear())
      ]);
      const additionalSettings = Array.isArray(dbDump?.settingsEntries) ? dbDump.settingsEntries.filter((entry) => entry && typeof entry === "object" && entry.id && entry.id !== "app") : [];
      if (dbDump?.settings && typeof dbDump.settings === "object") {
        await prom2(settings.put({ ...dbDump.settings, id: "app" }));
      } else {
        await prom2(settings.put({ id: "app", dailyCount: 20, theme: "dark" }));
      }
      if (dbDump?.mapConfig && typeof dbDump.mapConfig === "object") {
        await prom2(settings.put({ id: MAP_CONFIG_KEY, config: dbDump.mapConfig }));
      }
      for (const entry of additionalSettings) {
        await prom2(settings.put(entry));
      }
      const lectureRecords = /* @__PURE__ */ new Map();
      const addLectureRecord = (record, { preferExisting = false } = {}) => {
        if (!record || typeof record !== "object") return;
        const blockId = record.blockId ?? record.block ?? null;
        const lectureId = record.id ?? record.lectureId ?? null;
        if (blockId == null || lectureId == null) return;
        const key = record.key || lectureKey(blockId, lectureId);
        if (!key) return;
        if (preferExisting && lectureRecords.has(key)) return;
        const payload = deepClone({ ...record, key, blockId, id: lectureId });
        lectureRecords.set(key, payload);
      };
      if (Array.isArray(dbDump?.lectures)) {
        for (const lecture of dbDump.lectures) {
          addLectureRecord(lecture);
        }
      }
      const migrationTimestamp = Date.now();
      if (Array.isArray(dbDump?.blocks)) {
        for (const b of dbDump.blocks) {
          if (!b || typeof b !== "object") continue;
          const { lectures: legacyLectures, ...rest } = b;
          await prom2(blocks.put(rest));
          if (!Array.isArray(legacyLectures) || legacyLectures.length === 0) continue;
          const blockId = rest?.blockId;
          if (blockId == null) continue;
          for (const legacy of legacyLectures) {
            const normalized2 = normalizeLectureRecord(blockId, legacy, migrationTimestamp);
            if (!normalized2) continue;
            if (typeof legacy?.createdAt === "number" && Number.isFinite(legacy.createdAt)) {
              normalized2.createdAt = legacy.createdAt;
            }
            if (typeof legacy?.updatedAt === "number" && Number.isFinite(legacy.updatedAt)) {
              normalized2.updatedAt = legacy.updatedAt;
            }
            addLectureRecord(normalized2, { preferExisting: true });
          }
        }
      }
      if (lectureRecords.size) {
        for (const lecture of lectureRecords.values()) {
          await prom2(lectures.put(lecture));
        }
      }
      if (Array.isArray(dbDump?.items)) {
        for (const it of dbDump.items) {
          if (!it || typeof it !== "object") continue;
          it.tokens = buildTokens(it);
          it.searchMeta = buildSearchMeta(it);
          await prom2(items.put(it));
        }
      }
      if (Array.isArray(dbDump?.exams)) {
        for (const ex of dbDump.exams) {
          if (!ex || typeof ex !== "object") continue;
          await prom2(exams.put(ex));
        }
      }
      if (Array.isArray(dbDump?.examSessions)) {
        for (const session of dbDump.examSessions) {
          if (!session || typeof session !== "object") continue;
          await prom2(examSessions.put(session));
        }
      }
      if (Array.isArray(dbDump?.studySessions)) {
        for (const session of dbDump.studySessions) {
          if (!session || typeof session !== "object") continue;
          await prom2(studySessions.put(session));
        }
      }
      await new Promise((resolve, reject) => {
        tx.oncomplete = () => resolve();
        tx.onerror = () => reject(tx.error);
      });
      if (db && typeof db.close === "function") {
        try {
          db.close();
        } catch (_) {
        }
      }
      return { ok: true, message: "Import complete" };
    } catch (e) {
      return { ok: false, message: e.message };
    }
  }
  function escapeCSV(value) {
    return '"' + String(value).replace(/"/g, '""') + '"';
  }
  async function exportAnkiCSV(profile, cohort) {
    const rows = [];
    if (profile === "cloze") {
      const regex = /\{\{c\d+::(.*?)\}\}/g;
      for (const item of cohort) {
        const title = item.name || item.concept || "";
        for (const [key, val] of Object.entries(item)) {
          if (typeof val !== "string") continue;
          let m;
          while (m = regex.exec(val)) {
            const answer = m[1];
            const question = val.replace(regex, "_____");
            rows.push([question, answer, title]);
          }
        }
      }
    } else {
      const qaMap = {
        disease: [
          ["etiology", "Etiology of NAME?"],
          ["pathophys", "Pathophysiology of NAME?"],
          ["clinical", "Clinical features of NAME?"],
          ["diagnosis", "Diagnosis of NAME?"],
          ["treatment", "Treatment of NAME?"],
          ["complications", "Complications of NAME?"]
        ],
        drug: [
          ["class", "Class of NAME?"],
          ["moa", "Mechanism of action of NAME?"],
          ["uses", "Uses of NAME?"],
          ["sideEffects", "Side effects of NAME?"],
          ["contraindications", "Contraindications of NAME?"]
        ],
        concept: [
          ["definition", "Definition of NAME?"],
          ["mechanism", "Mechanism of NAME?"],
          ["clinicalRelevance", "Clinical relevance of NAME?"],
          ["example", "Example of NAME?"]
        ]
      };
      for (const item of cohort) {
        const title = item.name || item.concept || "";
        const mappings = qaMap[item.kind] || [];
        for (const [field, tmpl] of mappings) {
          const val = item[field];
          if (!val) continue;
          const question = tmpl.replace("NAME", title);
          rows.push([question, val, title]);
        }
      }
    }
    const csv = rows.map((r) => r.map(escapeCSV).join(",")).join("\n");
    return new Blob([csv], { type: "text/csv" });
  }

  // js/review/constants.js
  var REVIEW_RATINGS = ["again", "hard", "good", "easy"];
  var RETIRE_RATING = "retire";
  var DEFAULT_REVIEW_STEPS = {
    again: 10,
    hard: 60,
    good: 720,
    easy: 2160
  };

  // js/review/settings.js
  function normalizeReviewSteps(raw) {
    const normalized2 = { ...DEFAULT_REVIEW_STEPS };
    if (!raw || typeof raw !== "object") return normalized2;
    for (const key of REVIEW_RATINGS) {
      const value = raw[key];
      const num = Number(value);
      if (Number.isFinite(num) && num > 0) {
        normalized2[key] = num;
      }
    }
    return normalized2;
  }

  // js/review/sr-data.js
  var SR_VERSION = 2;
  function sanitizeNumber(value, fallback = 0) {
    const num = Number(value);
    if (!Number.isFinite(num) || num < 0) return fallback;
    return num;
  }
  function defaultSectionState() {
    return {
      streak: 0,
      lastRating: null,
      last: 0,
      due: 0,
      retired: false,
      contentDigest: null,
      lectureScope: []
    };
  }
  function normalizeSectionRecord(record) {
    const base = defaultSectionState();
    if (!record || typeof record !== "object") return base;
    if (typeof record.streak === "number" && Number.isFinite(record.streak) && record.streak > 0) {
      base.streak = Math.max(0, Math.round(record.streak));
    }
    if (typeof record.lastRating === "string") {
      const rating = record.lastRating;
      if (REVIEW_RATINGS.includes(rating) || rating === RETIRE_RATING) {
        base.lastRating = rating;
      }
    }
    base.last = sanitizeNumber(record.last, 0);
    base.due = sanitizeNumber(record.due, 0);
    base.retired = Boolean(record.retired);
    if (typeof record.contentDigest === "string" && record.contentDigest) {
      base.contentDigest = record.contentDigest;
    }
    if (Array.isArray(record.lectureScope) && record.lectureScope.length) {
      const normalizedScope = record.lectureScope.map((entry) => typeof entry === "string" ? entry.trim() : "").filter(Boolean);
      base.lectureScope = Array.from(new Set(normalizedScope)).sort();
    }
    return base;
  }
  function normalizeSrRecord(sr) {
    const normalized2 = { version: SR_VERSION, sections: {} };
    if (!sr || typeof sr !== "object") return normalized2;
    const sections = sr.sections && typeof sr.sections === "object" ? sr.sections : {};
    for (const [key, value] of Object.entries(sections)) {
      if (!key) continue;
      normalized2.sections[key] = normalizeSectionRecord(value);
    }
    return normalized2;
  }

  // js/validators.js
  var randomId = () => globalThis.crypto?.randomUUID?.() ?? Math.random().toString(36).slice(2);
  var MAX_GRAVITY_BOOST = 999;
  function escapeHtml(str = "") {
    return String(str).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#39;");
  }
  function sanitizeGravityBoost(value) {
    if (value === null || value === void 0) return 0;
    const num = Number(value);
    if (!Number.isFinite(num) || num <= 0) return 0;
    const clamped = Math.min(MAX_GRAVITY_BOOST, num);
    return Math.round(clamped * 100) / 100;
  }
  function legacyFactsToHtml(facts = []) {
    return facts.map((f) => `<p>${escapeHtml(f)}</p>`).join("");
  }
  function cleanItem(item) {
    const extras = Array.isArray(item.extras) ? item.extras : [];
    const normalizedExtras = extras.map((ex) => {
      if (!ex || typeof ex !== "object") return null;
      const id = typeof ex.id === "string" && ex.id ? ex.id : randomId();
      const title = typeof ex.title === "string" ? ex.title : "";
      const body = typeof ex.body === "string" ? ex.body : "";
      if (!title.trim() && !body.trim()) return null;
      return { id, title: title.trim(), body };
    }).filter(Boolean);
    if (!normalizedExtras.length && Array.isArray(item.facts) && item.facts.length) {
      normalizedExtras.push({
        id: randomId(),
        title: "Highlights",
        body: legacyFactsToHtml(item.facts)
      });
    }
    return {
      ...item,
      favorite: !!item.favorite,
      color: item.color || null,
      extras: normalizedExtras,
      facts: normalizedExtras.length ? [] : Array.isArray(item.facts) ? item.facts : [],
      tags: item.tags || [],
      links: item.links || [],
      blocks: item.blocks || [],
      weeks: item.weeks || [],
      lectures: item.lectures || [],
      mapPos: item.mapPos || null,
      mapHidden: !!item.mapHidden,
      mapGravityBoost: sanitizeGravityBoost(item.mapGravityBoost),
      sr: normalizeSrRecord(item.sr)
    };
  }

  // js/storage/storage.js
  var dbPromise;
  var DEFAULT_KINDS = ["disease", "drug", "concept"];
  var RESULT_BATCH_SIZE = 50;
  var MAP_CONFIG_KEY2 = "map-config";
  var MAP_CONFIG_BACKUP_KEY = "sevenn-map-config-backup";
  var DATA_BACKUP_KEY = "sevenn-backup-snapshot";
  var DATA_BACKUP_STORES = ["items", "blocks", "exams", "settings", "exam_sessions", "study_sessions", "lectures"];
  var DEFAULT_APP_SETTINGS = {
    id: "app",
    dailyCount: 20,
    theme: "dark",
    reviewSteps: { ...DEFAULT_REVIEW_STEPS },
    plannerDefaults: normalizePlannerDefaults(DEFAULT_PLANNER_DEFAULTS)
  };
  var backupTimer = null;
  var DEFAULT_MAP_CONFIG = {
    activeTabId: "default",
    tabs: [
      {
        id: "default",
        name: "All concepts",
        includeLinked: true,
        manualMode: false,
        manualIds: [],
        layout: {},
        layoutSeeded: true,
        filter: { blockId: "", week: "", lectureKey: "" }
      }
    ]
  };
  function prom3(req) {
    return new Promise((resolve, reject) => {
      req.onsuccess = () => resolve(req.result);
      req.onerror = () => reject(req.error);
    });
  }
  async function store(name, mode = "readonly") {
    const db = await dbPromise;
    return db.transaction(name, mode).objectStore(name);
  }
  function canUseStorage2() {
    return typeof localStorage !== "undefined";
  }
  function readMapConfigBackup() {
    if (!canUseStorage2()) return null;
    try {
      const raw = localStorage.getItem(MAP_CONFIG_BACKUP_KEY);
      if (!raw) return null;
      const parsed = JSON.parse(raw);
      if (parsed && typeof parsed === "object") {
        return parsed;
      }
    } catch (err) {
      console.warn("Failed to read map backup", err);
    }
    return null;
  }
  function writeMapConfigBackup(config) {
    if (!canUseStorage2()) return;
    try {
      localStorage.setItem(MAP_CONFIG_BACKUP_KEY, JSON.stringify(config));
    } catch (err) {
      console.warn("Failed to persist map backup", err);
    }
  }
  async function writeDataBackup() {
    if (!canUseStorage2()) return;
    try {
      const db = await dbPromise;
      if (!db || typeof db.transaction !== "function") return;
      const snapshot = {};
      for (const name of DATA_BACKUP_STORES) {
        try {
          const tx = db.transaction(name, "readonly");
          const s = tx.objectStore(name);
          const all = await prom3(s.getAll());
          snapshot[name] = Array.isArray(all) ? all : [];
        } catch (err) {
          console.warn(`Failed to snapshot store ${name}`, err);
          snapshot[name] = [];
        }
      }
      snapshot.__timestamp = Date.now();
      localStorage.setItem(DATA_BACKUP_KEY, JSON.stringify(snapshot));
    } catch (err) {
      console.warn("Failed to persist data backup", err);
    }
  }
  function scheduleBackup() {
    if (!canUseStorage2()) return;
    if (backupTimer) clearTimeout(backupTimer);
    backupTimer = setTimeout(() => {
      backupTimer = null;
      writeDataBackup().catch((err) => console.warn("Backup write failed", err));
    }, 1e3);
  }
  async function maybeRestoreFromBackup() {
    if (!canUseStorage2()) return;
    let parsed;
    try {
      const raw = localStorage.getItem(DATA_BACKUP_KEY);
      if (!raw) return;
      parsed = JSON.parse(raw);
    } catch (err) {
      console.warn("Failed to parse saved backup", err);
      return;
    }
    if (!parsed || typeof parsed !== "object") return;
    try {
      const db = await dbPromise;
      if (!db || typeof db.transaction !== "function") return;
      const emptyChecks = await Promise.all(DATA_BACKUP_STORES.map(async (name) => {
        try {
          const tx = db.transaction(name, "readonly");
          const s = tx.objectStore(name);
          const existing = await prom3(s.getAll());
          return !existing || existing.length === 0;
        } catch (err) {
          console.warn(`Failed to inspect store ${name}`, err);
          return false;
        }
      }));
      if (!emptyChecks.every(Boolean)) return;
      for (const name of DATA_BACKUP_STORES) {
        const list = Array.isArray(parsed[name]) ? parsed[name] : [];
        if (!list.length) continue;
        try {
          const tx = db.transaction(name, "readwrite");
          const s = tx.objectStore(name);
          for (const entry of list) {
            await prom3(s.put(entry));
          }
        } catch (err) {
          console.warn(`Failed to restore store ${name}`, err);
        }
      }
    } catch (err) {
      console.warn("Failed to restore data from backup", err);
    }
  }
  async function initDB() {
    if (!dbPromise) dbPromise = openDB();
    await maybeRestoreFromBackup();
    const s = await store("settings", "readwrite");
    const existing = await prom3(s.get("app"));
    if (!existing) {
      await prom3(s.put(DEFAULT_APP_SETTINGS));
    }
    scheduleBackup();
  }
  async function getSettings() {
    const s = await store("settings");
    const settings = await prom3(s.get("app"));
    if (!settings) return { ...DEFAULT_APP_SETTINGS };
    const merged = { ...DEFAULT_APP_SETTINGS, ...settings };
    merged.reviewSteps = normalizeReviewSteps(settings.reviewSteps || merged.reviewSteps);
    merged.plannerDefaults = normalizePlannerDefaults(settings.plannerDefaults || merged.plannerDefaults);
    return merged;
  }
  async function saveSettings(patch) {
    const s = await store("settings", "readwrite");
    const current = await prom3(s.get("app")) || { ...DEFAULT_APP_SETTINGS };
    const mergedSteps = normalizeReviewSteps({
      ...DEFAULT_APP_SETTINGS.reviewSteps,
      ...current.reviewSteps || {},
      ...patch.reviewSteps || {}
    });
    const basePlanner = current.plannerDefaults || DEFAULT_APP_SETTINGS.plannerDefaults;
    const patchPlanner = patch?.plannerDefaults || {};
    const mergedPlannerDefaults = normalizePlannerDefaults({
      anchorOffsets: {
        ...DEFAULT_APP_SETTINGS.plannerDefaults?.anchorOffsets || {},
        ...basePlanner?.anchorOffsets || {},
        ...patchPlanner.anchorOffsets || {}
      },
      passes: Array.isArray(patchPlanner.passes) && patchPlanner.passes.length ? patchPlanner.passes : basePlanner?.passes || DEFAULT_APP_SETTINGS.plannerDefaults?.passes,
      passColors: Array.isArray(patchPlanner.passColors) && patchPlanner.passColors.length ? patchPlanner.passColors : basePlanner?.passColors || DEFAULT_APP_SETTINGS.plannerDefaults?.passColors
    });
    const next = {
      ...current,
      ...patch,
      id: "app",
      reviewSteps: mergedSteps,
      plannerDefaults: mergedPlannerDefaults
    };
    await prom3(s.put(next));
    scheduleBackup();
  }
  function cloneConfig(config) {
    return deepClone(config);
  }
  async function getMapConfig() {
    try {
      const s = await store("settings", "readwrite");
      const existing = await prom3(s.get(MAP_CONFIG_KEY2));
      if (existing && existing.config) {
        const config = cloneConfig(existing.config);
        writeMapConfigBackup(config);
        return config;
      }
      const backup = readMapConfigBackup();
      if (backup) {
        const payload = cloneConfig(backup);
        await prom3(s.put({ id: MAP_CONFIG_KEY2, config: payload }));
        writeMapConfigBackup(payload);
        scheduleBackup();
        return payload;
      }
      const fallback = cloneConfig(DEFAULT_MAP_CONFIG);
      await prom3(s.put({ id: MAP_CONFIG_KEY2, config: fallback }));
      writeMapConfigBackup(fallback);
      scheduleBackup();
      return fallback;
    } catch (err) {
      console.warn("getMapConfig failed", err);
      const backup = readMapConfigBackup();
      if (backup) {
        return cloneConfig(backup);
      }
      return cloneConfig(DEFAULT_MAP_CONFIG);
    }
  }
  async function saveMapConfig(config) {
    const payload = config ? cloneConfig(config) : cloneConfig(DEFAULT_MAP_CONFIG);
    const s = await store("settings", "readwrite");
    await prom3(s.put({ id: MAP_CONFIG_KEY2, config: payload }));
    writeMapConfigBackup(payload);
    scheduleBackup();
  }
  async function listBlocks() {
    try {
      const lecturePromise = listAllLectures();
      const blockStore = await store("blocks");
      const all = await prom3(blockStore.getAll());
      const lectures = await lecturePromise;
      const blocks = (all || []).map((block) => {
        if (!block || typeof block !== "object") return block;
        const { lectures: _ignored, ...rest } = block;
        return { ...rest };
      }).sort((a, b) => {
        const ao = a.order ?? a.createdAt;
        const bo = b.order ?? b.createdAt;
        return bo - ao;
      });
      const lectureIndex = {};
      for (const lecture of lectures || []) {
        if (!lecture || lecture.blockId == null || lecture.id == null) continue;
        const blockId = lecture.blockId;
        if (!lectureIndex[blockId]) lectureIndex[blockId] = {};
        lectureIndex[blockId][lecture.id] = { ...lecture };
      }
      return { blocks, lectureIndex };
    } catch (err) {
      console.warn("listBlocks failed", err);
      return { blocks: [], lectureIndex: {} };
    }
  }
  function slugifyBlockTitle(title) {
    if (typeof title !== "string" || !title.trim()) return "block";
    const base = title.toLowerCase().replace(/[^a-z0-9]+/g, "-").replace(/^-+|-+$/g, "").slice(0, 40);
    return base || "block";
  }
  async function generateBlockId(storeRef, title) {
    const base = slugifyBlockTitle(title);
    let candidate = base;
    let attempt = 1;
    while (true) {
      const existing = candidate ? await prom3(storeRef.get(candidate)) : null;
      if (!existing && candidate) {
        return candidate;
      }
      attempt += 1;
      candidate = `${base}-${attempt}`;
      if (attempt > 1e3) {
        return `block-${Date.now()}`;
      }
    }
  }
  function normalizeDateInput(value) {
    if (value == null) return null;
    if (value instanceof Date) {
      if (Number.isNaN(value.getTime())) return null;
      return value.toISOString().slice(0, 10);
    }
    if (typeof value === "number") {
      const date = new Date(value);
      if (Number.isNaN(date.getTime())) return null;
      return date.toISOString().slice(0, 10);
    }
    if (typeof value === "string") {
      const trimmed = value.trim();
      if (!trimmed) return null;
      const date = new Date(trimmed);
      if (Number.isNaN(date.getTime())) return null;
      return date.toISOString().slice(0, 10);
    }
    return null;
  }
  async function upsertBlock(def) {
    const title = typeof def?.title === "string" ? def.title : "";
    let blockId = typeof def?.blockId === "string" && def.blockId.trim() ? def.blockId.trim() : "";
    const readStore = await store("blocks");
    if (!blockId) {
      blockId = await generateBlockId(readStore, title || "block");
    }
    const existing = await prom3(readStore.get(blockId));
    const existingLectures = await listLecturesByBlock(blockId);
    const now = Date.now();
    const incomingLectures = Array.isArray(def.lectures) ? def.lectures.map((lecture) => ({
      ...lecture,
      blockId
    })) : existingLectures.map((lecture) => ({
      blockId: lecture.blockId,
      id: lecture.id,
      name: lecture.name,
      week: lecture.week,
      tags: Array.isArray(lecture.tags) ? lecture.tags : []
    }));
    const removedLectureIds = [];
    let prunedLectures = incomingLectures;
    if (existing && typeof def.weeks === "number" && def.weeks < existing.weeks) {
      const maxWeek = def.weeks;
      prunedLectures = incomingLectures.filter((lecture) => {
        const week = lecture?.week;
        const keep = week == null || week <= maxWeek;
        if (!keep && lecture?.id != null) {
          removedLectureIds.push(lecture.id);
        }
        return keep;
      });
      const i = await store("items", "readwrite");
      const all = await prom3(i.getAll());
      for (const it of all) {
        let changed = false;
        if (it.lectures) {
          const before = it.lectures.length;
          it.lectures = it.lectures.filter((l) => !(l.blockId === blockId && l.week > maxWeek));
          if (it.lectures.length !== before) changed = true;
        }
        if (it.weeks) {
          const beforeW = it.weeks.length;
          it.weeks = it.weeks.filter((w) => w <= maxWeek);
          if (it.weeks.length !== beforeW) changed = true;
        }
        if (changed) {
          it.tokens = buildTokens(it);
          it.searchMeta = buildSearchMeta(it);
          await prom3(i.put(it));
        }
      }
    }
    const next = {
      ...def,
      blockId,
      color: def.color || existing?.color || null,
      order: def.order || existing?.order || now,
      createdAt: existing?.createdAt || now,
      updatedAt: now,
      weeks: typeof def.weeks === "number" ? def.weeks : existing?.weeks,
      startDate: def.startDate !== void 0 ? normalizeDateInput(def.startDate) : existing?.startDate ? normalizeDateInput(existing.startDate) : null,
      endDate: def.endDate !== void 0 ? normalizeDateInput(def.endDate) : existing?.endDate ? normalizeDateInput(existing.endDate) : null
    };
    delete next.lectures;
    const writeStore = await store("blocks", "readwrite");
    await prom3(writeStore.put(next));
    const incomingKeySet = new Set(
      prunedLectures.filter((lecture) => lecture?.id != null).map((lecture) => lectureKey(blockId, lecture.id))
    );
    for (const lecture of existingLectures) {
      const key = lecture?.key || lectureKey(lecture.blockId, lecture.id);
      if (!incomingKeySet.has(key) && lecture?.id != null) {
        removedLectureIds.push(lecture.id);
      }
    }
    for (const lecture of prunedLectures) {
      if (lecture?.id == null) continue;
      await saveLecture({
        blockId,
        id: lecture.id,
        name: lecture.name,
        week: lecture.week,
        tags: Array.isArray(lecture.tags) ? lecture.tags : void 0,
        passes: Array.isArray(lecture.passes) ? lecture.passes : void 0,
        passPlan: lecture.passPlan,
        status: lecture.status,
        nextDueAt: lecture.nextDueAt
      });
    }
    const uniqueRemoved = Array.from(new Set(removedLectureIds.filter((id) => id != null)));
    for (const lectureId of uniqueRemoved) {
      await deleteLectureRecord(blockId, lectureId);
    }
    if (uniqueRemoved.length) {
      await removeLectureReferencesFromItems(blockId, uniqueRemoved);
    }
    scheduleBackup();
  }
  async function removeLectureReferencesFromItems(blockId, lectureIds) {
    if (!lectureIds.length) return;
    const i = await store("items", "readwrite");
    const all = await prom3(i.getAll());
    for (const it of all) {
      const before = it.lectures?.length || 0;
      if (!before) continue;
      it.lectures = it.lectures.filter((l) => !(l.blockId === blockId && lectureIds.includes(l.id)));
      if (it.lectures.length !== before) {
        it.blocks = it.blocks?.filter((bid) => bid !== blockId || it.lectures.some((l) => l.blockId === bid));
        const validWeeks = new Set((it.lectures || []).map((l) => l.week));
        it.weeks = Array.from(validWeeks);
        it.tokens = buildTokens(it);
        it.searchMeta = buildSearchMeta(it);
        await prom3(i.put(it));
      }
    }
  }
  async function deleteBlock(blockId) {
    const b = await store("blocks", "readwrite");
    await prom3(b.delete(blockId));
    await removeLecturesForBlock(blockId);
    const i = await store("items", "readwrite");
    const all = await prom3(i.getAll());
    for (const it of all) {
      const beforeBlocks = it.blocks?.length || 0;
      const beforeLects = it.lectures?.length || 0;
      if (beforeBlocks || beforeLects) {
        if (it.blocks) it.blocks = it.blocks.filter((bId) => bId !== blockId);
        if (it.lectures) it.lectures = it.lectures.filter((l) => l.blockId !== blockId);
        if (it.weeks) {
          const validWeeks = new Set((it.lectures || []).map((l) => l.week));
          it.weeks = Array.from(validWeeks);
        }
        if ((it.blocks?.length || 0) !== beforeBlocks || (it.lectures?.length || 0) !== beforeLects) {
          it.tokens = buildTokens(it);
          it.searchMeta = buildSearchMeta(it);
          await prom3(i.put(it));
        }
      }
    }
    scheduleBackup();
  }
  async function deleteLecture(blockId, lectureId) {
    await deleteLectureRecord(blockId, lectureId);
    await removeLectureReferencesFromItems(blockId, [lectureId]);
    scheduleBackup();
  }
  async function listItemsByKind(kind) {
    const i = await store("items");
    const idx = i.index("by_kind");
    return await prom3(idx.getAll(kind));
  }
  function titleOf(item) {
    return item.name || item.concept || "";
  }
  var DEFAULT_SORT = { mode: "updated", direction: "desc" };
  function normalizeSort(sort) {
    const raw = typeof sort === "string" ? sort.toLowerCase() : "";
    switch (raw) {
      case "updated-asc":
        return { mode: "updated", direction: "asc" };
      case "updated-desc":
      case "updated":
        return { mode: "updated", direction: "desc" };
      case "created-asc":
        return { mode: "created", direction: "asc" };
      case "created-desc":
      case "created":
        return { mode: "created", direction: "desc" };
      case "lecture-asc":
        return { mode: "lecture", direction: "asc" };
      case "lecture-desc":
      case "lecture":
        return { mode: "lecture", direction: "desc" };
      case "name-desc":
        return { mode: "name", direction: "desc" };
      case "name":
      case "name-asc":
        return { mode: "name", direction: "asc" };
      default:
        return { ...DEFAULT_SORT };
    }
  }
  function normalizeFilter(filter = {}) {
    const rawTypes = Array.isArray(filter.types) ? filter.types.filter((t) => typeof t === "string" && t) : [];
    const types = rawTypes.length ? Array.from(new Set(rawTypes)) : DEFAULT_KINDS;
    const block = typeof filter.block === "string" ? filter.block : "";
    const weekRaw = filter.week;
    let week = null;
    if (typeof weekRaw === "number" && !Number.isNaN(weekRaw)) {
      week = weekRaw;
    } else if (typeof weekRaw === "string" && weekRaw.trim()) {
      const parsed = Number(weekRaw);
      if (!Number.isNaN(parsed)) week = parsed;
    }
    const onlyFav = Boolean(filter.onlyFav);
    const query = typeof filter.query === "string" ? filter.query.trim() : "";
    const normalizedQuery = query.toLowerCase();
    const tokens = query ? tokenize(query) : [];
    return {
      types,
      block,
      week,
      onlyFav,
      tokens: tokens.length ? tokens : null,
      query: normalizedQuery,
      sort: normalizeSort(filter.sort)
    };
  }
  async function getKeySet(storeRef, indexName, value) {
    if (value === null || value === void 0 || value === "" || value !== value) return null;
    if (typeof storeRef.index !== "function") return null;
    const idx = storeRef.index(indexName);
    if (!idx || typeof idx.getAllKeys !== "function") return null;
    const keys = await prom3(idx.getAllKeys(value));
    return new Set(keys);
  }
  async function keysForKinds(storeRef, kinds) {
    const idx = typeof storeRef.index === "function" ? storeRef.index("by_kind") : null;
    const seen = /* @__PURE__ */ new Set();
    const allKeys = [];
    for (const kind of kinds) {
      if (!kind) continue;
      let keys = [];
      if (idx && typeof idx.getAllKeys === "function") {
        keys = await prom3(idx.getAllKeys(kind));
      } else if (idx && typeof idx.getAll === "function") {
        const values = await prom3(idx.getAll(kind));
        keys = values.map((v) => v?.id).filter(Boolean);
      }
      for (const key of keys) {
        if (!seen.has(key)) {
          seen.add(key);
          allKeys.push(key);
        }
      }
    }
    return allKeys;
  }
  async function executeItemQuery(filter) {
    const normalized2 = normalizeFilter(filter);
    const itemsStore = await store("items");
    const blockSet = normalized2.block && normalized2.block !== "__unlabeled" ? await getKeySet(itemsStore, "by_blocks", normalized2.block) : null;
    const weekSet = normalized2.week != null ? await getKeySet(itemsStore, "by_weeks", normalized2.week) : null;
    const favoriteSet = normalized2.onlyFav ? await getKeySet(itemsStore, "by_favorite", true) : null;
    const baseKeys = await keysForKinds(itemsStore, normalized2.types);
    const filteredKeys = baseKeys.filter((id) => {
      if (!id) return false;
      if (blockSet && !blockSet.has(id)) return false;
      if (weekSet && !weekSet.has(id)) return false;
      if (favoriteSet && !favoriteSet.has(id)) return false;
      return true;
    });
    const results = [];
    for (let i = 0; i < filteredKeys.length; i += RESULT_BATCH_SIZE) {
      const chunk = filteredKeys.slice(i, i + RESULT_BATCH_SIZE);
      const fetched = await Promise.all(chunk.map((id) => prom3(itemsStore.get(id))));
      for (const item of fetched) {
        if (!item) continue;
        if (normalized2.block === "__unlabeled" && Array.isArray(item.blocks) && item.blocks.length) continue;
        if (normalized2.tokens) {
          const tokenField = item.tokens || "";
          const metaField = item.searchMeta || buildSearchMeta(item);
          const matches = normalized2.tokens.every((tok) => tokenField.includes(tok) || metaField.includes(tok));
          if (!matches) continue;
        }
        results.push(item);
      }
    }
    let lectureDateIndex = null;
    if (normalized2.sort.mode === "lecture") {
      const lectures = await listAllLectures();
      lectureDateIndex = /* @__PURE__ */ new Map();
      (lectures || []).forEach((lecture) => {
        if (!lecture || lecture.blockId == null || lecture.id == null) return;
        const key = lectureKey(lecture.blockId, lecture.id);
        const created = typeof lecture.createdAt === "number" ? lecture.createdAt : 0;
        lectureDateIndex.set(key, created);
      });
    }
    const lectureSortCache = /* @__PURE__ */ new Map();
    function lectureTimestamp(item) {
      if (!lectureDateIndex) return 0;
      const cacheKey = item?.id ?? null;
      if (cacheKey != null && lectureSortCache.has(cacheKey)) {
        return lectureSortCache.get(cacheKey);
      }
      const links = Array.isArray(item?.lectures) ? item.lectures : [];
      let latest = 0;
      for (const link of links) {
        if (!link || link.blockId == null || link.id == null) continue;
        const key = lectureKey(link.blockId, link.id);
        const created = lectureDateIndex.get(key);
        if (typeof created === "number" && created > latest) {
          latest = created;
        }
      }
      if (cacheKey != null) lectureSortCache.set(cacheKey, latest);
      return latest;
    }
    const queryString = typeof normalized2.query === "string" ? normalized2.query : "";
    const hasQueryString = queryString.length > 0;
    function nameMatchScore(item) {
      if (!hasQueryString) return 0;
      const title = titleOf(item).toLowerCase();
      if (!title) return 0;
      if (title.startsWith(queryString)) return 2;
      if (title.includes(queryString)) return 1;
      return 0;
    }
    results.sort((a, b) => {
      if (hasQueryString) {
        const aScore = nameMatchScore(a);
        const bScore = nameMatchScore(b);
        if (aScore !== bScore) {
          return bScore - aScore;
        }
      }
      let cmp = 0;
      switch (normalized2.sort.mode) {
        case "name":
          cmp = titleOf(a).localeCompare(titleOf(b));
          break;
        case "created": {
          const av = typeof a.createdAt === "number" ? a.createdAt : 0;
          const bv = typeof b.createdAt === "number" ? b.createdAt : 0;
          cmp = av - bv;
          break;
        }
        case "lecture":
          cmp = lectureTimestamp(a) - lectureTimestamp(b);
          break;
        case "updated":
        default: {
          const av = typeof a.updatedAt === "number" ? a.updatedAt : 0;
          const bv = typeof b.updatedAt === "number" ? b.updatedAt : 0;
          cmp = av - bv;
          break;
        }
      }
      if (cmp === 0 && normalized2.sort.mode !== "name") {
        cmp = titleOf(a).localeCompare(titleOf(b));
      }
      return normalized2.sort.direction === "asc" ? cmp : -cmp;
    });
    return results;
  }
  function findItemsByFilter(filter) {
    let memo;
    const run = () => {
      if (!memo) memo = executeItemQuery(filter);
      return memo;
    };
    return {
      async toArray() {
        const items = await run();
        return items.slice();
      },
      async *[Symbol.asyncIterator]() {
        const items = await run();
        for (let i = 0; i < items.length; i += RESULT_BATCH_SIZE) {
          yield items.slice(i, i + RESULT_BATCH_SIZE);
        }
      }
    };
  }
  async function getItem(id) {
    const i = await store("items");
    return await prom3(i.get(id));
  }
  async function upsertItem(item) {
    const i = await store("items", "readwrite");
    const existing = await prom3(i.get(item.id));
    const now = Date.now();
    const next = cleanItem({
      ...item,
      createdAt: existing?.createdAt || now,
      updatedAt: now
    });
    next.tokens = buildTokens(next);
    next.searchMeta = buildSearchMeta(next);
    for (const link of next.links) {
      const other = await prom3(i.get(link.id));
      if (other) {
        other.links = other.links || [];
        if (!other.links.find((l) => l.id === next.id)) {
          other.links.push({ id: next.id, type: link.type });
          other.tokens = buildTokens(other);
          other.searchMeta = buildSearchMeta(other);
          await prom3(i.put(other));
        }
      }
    }
    await prom3(i.put(next));
    scheduleBackup();
  }
  async function deleteItem(id) {
    const i = await store("items", "readwrite");
    const all = await prom3(i.getAll());
    for (const it of all) {
      if (it.links?.some((l) => l.id === id)) {
        it.links = it.links.filter((l) => l.id !== id);
        it.tokens = buildTokens(it);
        it.searchMeta = buildSearchMeta(it);
        await prom3(i.put(it));
      }
    }
    await prom3(i.delete(id));
    scheduleBackup();
  }
  async function listExams() {
    const e = await store("exams");
    return await prom3(e.getAll());
  }
  async function upsertExam(exam) {
    const e = await store("exams", "readwrite");
    const existing = await prom3(e.get(exam.id));
    const now = Date.now();
    const next = {
      ...exam,
      createdAt: existing?.createdAt || now,
      updatedAt: now,
      results: exam.results || existing?.results || []
    };
    await prom3(e.put(next));
    scheduleBackup();
  }
  async function deleteExam(id) {
    const e = await store("exams", "readwrite");
    await prom3(e.delete(id));
    scheduleBackup();
  }
  async function listExamSessions() {
    const s = await store("exam_sessions");
    return await prom3(s.getAll());
  }
  async function loadExamSession(examId) {
    const s = await store("exam_sessions");
    return await prom3(s.get(examId));
  }
  async function saveExamSessionProgress(progress) {
    const s = await store("exam_sessions", "readwrite");
    const now = Date.now();
    await prom3(s.put({ ...progress, updatedAt: now }));
    scheduleBackup();
  }
  async function deleteExamSessionProgress(examId) {
    const s = await store("exam_sessions", "readwrite");
    await prom3(s.delete(examId));
    scheduleBackup();
  }
  async function listStudySessions() {
    try {
      const s = await store("study_sessions");
      const list = await prom3(s.getAll());
      return Array.isArray(list) ? list : [];
    } catch (err) {
      console.warn("Failed to list study sessions", err);
      return [];
    }
  }
  async function saveStudySessionRecord(record) {
    if (!record || !record.mode) throw new Error("Study session record requires a mode");
    const s = await store("study_sessions", "readwrite");
    const now = Date.now();
    await prom3(s.put({ ...record, updatedAt: now }));
    scheduleBackup();
  }
  async function deleteStudySessionRecord(mode) {
    if (!mode) return;
    const s = await store("study_sessions", "readwrite");
    await prom3(s.delete(mode));
    scheduleBackup();
  }
  async function clearAllStudySessionRecords() {
    const s = await store("study_sessions", "readwrite");
    await prom3(s.clear());
    scheduleBackup();
  }

  // js/storage/block-catalog.js
  var cache2 = null;
  var pending = null;
  function cloneBlock(block) {
    if (!block || typeof block !== "object") return block;
    return { ...block };
  }
  function cloneLecture(lecture) {
    if (!lecture || typeof lecture !== "object") return lecture;
    return { ...lecture };
  }
  function cloneLectureIndex(index) {
    const copy = {};
    for (const [blockId, lectures] of Object.entries(index || {})) {
      const next = {};
      for (const [lectureId, lecture] of Object.entries(lectures || {})) {
        next[lectureId] = cloneLecture(lecture);
      }
      copy[blockId] = next;
    }
    return copy;
  }
  function sortLectures(a, b) {
    const aw = a?.week ?? 0;
    const bw = b?.week ?? 0;
    if (aw !== bw) return aw - bw;
    const an = (a?.name || "").toLowerCase();
    const bn = (b?.name || "").toLowerCase();
    if (an !== bn) return an.localeCompare(bn);
    const ai = a?.id ?? 0;
    const bi = b?.id ?? 0;
    return ai - bi;
  }
  function buildLectureLists(index) {
    const map = {};
    for (const [blockId, lectures] of Object.entries(index || {})) {
      const list = Object.values(lectures || {}).map(cloneLecture);
      list.sort(sortLectures);
      map[blockId] = list;
    }
    return map;
  }
  function snapshotCatalog(source) {
    return {
      blocks: (source?.blocks || []).map(cloneBlock),
      lectureIndex: cloneLectureIndex(source?.lectureIndex || {}),
      lectureLists: Object.fromEntries(
        Object.entries(source?.lectureLists || {}).map(([blockId, list]) => [
          blockId,
          list.map(cloneLecture)
        ])
      )
    };
  }
  async function loadBlockCatalog(options = {}) {
    if (!pending || options.force) {
      pending = (async () => {
        const { blocks, lectureIndex } = await listBlocks();
        const normalizedBlocks = (blocks || []).map(cloneBlock);
        const normalizedIndex = cloneLectureIndex(lectureIndex || {});
        const lectureLists = buildLectureLists(normalizedIndex);
        cache2 = { blocks: normalizedBlocks, lectureIndex: normalizedIndex, lectureLists };
        return snapshotCatalog(cache2);
      })();
    }
    return pending;
  }
  function invalidateBlockCatalog() {
    cache2 = null;
    pending = null;
  }

  // js/ui/components/confirm.js
  function confirmModal(message) {
    return new Promise((resolve) => {
      const overlay = document.createElement("div");
      overlay.className = "modal";
      const box = document.createElement("div");
      box.className = "card";
      const msg = document.createElement("p");
      msg.textContent = message;
      box.appendChild(msg);
      const actions = document.createElement("div");
      actions.className = "row";
      const yes = document.createElement("button");
      yes.className = "btn";
      yes.textContent = "Yes";
      yes.addEventListener("click", () => {
        document.body.removeChild(overlay);
        resolve(true);
      });
      const no = document.createElement("button");
      no.className = "btn";
      no.textContent = "No";
      no.addEventListener("click", () => {
        document.body.removeChild(overlay);
        resolve(false);
      });
      actions.appendChild(yes);
      actions.appendChild(no);
      box.appendChild(actions);
      overlay.appendChild(box);
      overlay.addEventListener("click", (e) => {
        if (e.target === overlay) {
          document.body.removeChild(overlay);
          resolve(false);
        }
      });
      document.body.appendChild(overlay);
      yes.focus();
    });
  }

  // js/lectures/actions.js
  var LECTURE_PASS_ACTIONS = [
    "Notes",
    "Read",
    "Tape",
    "Quiz",
    "Flashcards",
    "Summarize",
    "Review",
    "Active Recall",
    "Anki",
    "Practice Questions",
    "Teach-Back",
    "Whiteboard",
    "Mind Map",
    "Case Review",
    "Group Study",
    "Audio Review",
    "Lecture Rewatch",
    "Cheat Sheet",
    "Sketch/Diagram",
    "Blocks"
  ];

  // js/ui/components/pass-colors.js
  var palette = DEFAULT_PASS_COLORS.slice();
  function normalizePalette(colors = []) {
    if (!Array.isArray(colors) || !colors.length) {
      return DEFAULT_PASS_COLORS.slice();
    }
    return colors.map((color, index) => {
      if (typeof color === "string") {
        const trimmed = color.trim();
        if (trimmed) return trimmed;
      }
      return DEFAULT_PASS_COLORS[index % DEFAULT_PASS_COLORS.length];
    });
  }
  function setPassColorPalette(colors) {
    palette = normalizePalette(colors);
  }
  function passColorForOrder(order = 1) {
    const list = palette.length ? palette : DEFAULT_PASS_COLORS;
    if (!Number.isFinite(order)) {
      return list[0] || DEFAULT_PASS_COLORS[0];
    }
    const index = Math.max(0, Math.floor(order) - 1) % list.length;
    return list[index];
  }

  // js/ui/settings.js
  function createEmptyState() {
    const empty = document.createElement("div");
    empty.className = "settings-empty-blocks";
    empty.textContent = "No blocks yet. Use \u201CAdd block\u201D to create one.";
    return empty;
  }
  var DAY_MS = 24 * 60 * 60 * 1e3;
  var DAY_MINUTES2 = 24 * 60;
  var MAX_PASS_COUNT = 20;
  var OFFSET_UNITS = [
    { id: "minutes", label: "minutes", minutes: 1 },
    { id: "hours", label: "hours", minutes: 60 },
    { id: "days", label: "days", minutes: 60 * 24 },
    { id: "weeks", label: "weeks", minutes: 60 * 24 * 7 }
  ];
  function formatOffset(minutes) {
    if (!Number.isFinite(minutes)) return "0m";
    const abs = Math.abs(minutes);
    if (abs < 60) return `${Math.round(minutes)}m`;
    const hours = minutes / 60;
    if (Math.abs(hours) < 24) return `${Math.round(hours)}h`;
    const days = minutes / (60 * 24);
    if (Math.abs(days) < 7) return `${Math.round(days)}d`;
    const weeks = minutes / (60 * 24 * 7);
    if (Math.abs(weeks) < 4) return `${Math.round(weeks)}w`;
    const months = minutes / (60 * 24 * 30);
    return `${Math.round(months)}mo`;
  }
  function normalizeOffsetUnit(id) {
    const fallback = OFFSET_UNITS[2];
    if (typeof id !== "string") return fallback.id;
    const match = OFFSET_UNITS.find((option) => option.id === id);
    return match ? match.id : fallback.id;
  }
  function splitOffsetMinutes(minutes) {
    const value = Number.isFinite(minutes) ? Math.max(0, Math.round(minutes)) : 0;
    if (value === 0) {
      return { value: 0, unit: "days" };
    }
    const preferred = [...OFFSET_UNITS].reverse().find((option) => value % option.minutes === 0);
    if (preferred) {
      return { value: Math.round(value / preferred.minutes), unit: preferred.id };
    }
    if (value < 60) {
      return { value, unit: "minutes" };
    }
    if (value < 60 * 24) {
      return { value: Math.round(value / 60), unit: "hours" };
    }
    return { value: Math.round(value / (60 * 24)), unit: "days" };
  }
  function combineOffsetValueUnit(value, unitId) {
    const normalizedUnit = normalizeOffsetUnit(unitId);
    const option = OFFSET_UNITS.find((entry) => entry.id === normalizedUnit) || OFFSET_UNITS[2];
    const numeric = Number(value);
    if (!Number.isFinite(numeric) || numeric <= 0) {
      return 0;
    }
    return Math.max(0, Math.round(numeric * option.minutes));
  }
  function defaultActionForIndex(index) {
    if (!Array.isArray(LECTURE_PASS_ACTIONS) || !LECTURE_PASS_ACTIONS.length) return "";
    const normalized2 = index % LECTURE_PASS_ACTIONS.length;
    return LECTURE_PASS_ACTIONS[Math.max(0, normalized2)];
  }
  function baseSchedule(plan) {
    if (plan && Array.isArray(plan.schedule)) {
      return plan.schedule;
    }
    return DEFAULT_PASS_PLAN.schedule;
  }
  function computeDefaultGap(schedule) {
    if (!Array.isArray(schedule) || schedule.length < 2) return DAY_MINUTES2;
    const deltas = [];
    for (let i = 1; i < schedule.length; i += 1) {
      const prev = Number(schedule[i - 1]?.offsetMinutes);
      const current = Number(schedule[i]?.offsetMinutes);
      if (Number.isFinite(prev) && Number.isFinite(current)) {
        const delta = current - prev;
        if (delta > 0) deltas.push(delta);
      }
    }
    return deltas.length ? deltas[deltas.length - 1] : DAY_MINUTES2;
  }
  function fallbackAnchor(index) {
    if (index === 0) return "today";
    if (index === 1) return "tomorrow";
    return "upcoming";
  }
  function buildScheduleTemplate(plan, count) {
    const template = baseSchedule(plan);
    const numericCount = Number(count);
    const safeCount = Math.max(0, Number.isFinite(numericCount) ? Math.round(numericCount) : 0);
    const defaultGap = computeDefaultGap(template);
    const schedule = [];
    for (let i = 0; i < safeCount; i += 1) {
      const source = template[i] || {};
      const previous = schedule[i - 1] || null;
      const order = i + 1;
      const offset = Number.isFinite(source.offsetMinutes) ? source.offsetMinutes : previous ? previous.offsetMinutes + defaultGap : i === 0 ? 0 : defaultGap * i;
      const anchor = typeof source.anchor === "string" && source.anchor.trim() ? source.anchor.trim() : previous?.anchor || fallbackAnchor(i);
      const label = typeof source.label === "string" && source.label.trim() ? source.label.trim() : `Pass ${order}`;
      const action = typeof source.action === "string" && source.action.trim() ? source.action.trim() : defaultActionForIndex(i);
      schedule.push({
        order,
        offsetMinutes: offset,
        anchor,
        label,
        action
      });
    }
    return schedule;
  }
  function adjustPassConfigs(current, count, plan) {
    const template = buildScheduleTemplate(plan || { schedule: current }, count);
    const byOrder = /* @__PURE__ */ new Map();
    (Array.isArray(current) ? current : []).forEach((entry) => {
      const order = Number(entry?.order);
      if (Number.isFinite(order) && !byOrder.has(order)) {
        byOrder.set(order, entry);
      }
    });
    return template.map((step, index) => {
      const existing = byOrder.get(step.order) || current[index] || {};
      const action = typeof existing?.action === "string" && existing.action.trim() ? existing.action.trim() : step.action;
      const offsetMinutes = Number.isFinite(existing?.offsetMinutes) ? Math.max(0, Math.round(existing.offsetMinutes)) : step.offsetMinutes;
      const anchor = typeof existing?.anchor === "string" && existing.anchor.trim() ? existing.anchor.trim() : step.anchor;
      const label = typeof existing?.label === "string" && existing.label.trim() ? existing.label.trim() : step.label;
      return { ...step, action, offsetMinutes, anchor, label };
    });
  }
  function clampPassCount(value) {
    const parsed = Number(value);
    if (!Number.isFinite(parsed)) return 0;
    return Math.min(MAX_PASS_COUNT, Math.max(0, Math.round(parsed)));
  }
  function buildPassPlanPayload(passConfigs, existingPlan) {
    const planId = existingPlan && typeof existingPlan.id === "string" && existingPlan.id.trim() ? existingPlan.id.trim() : "custom";
    return {
      id: planId,
      schedule: passConfigs.map((config, index) => {
        const order = index + 1;
        const label = typeof config.label === "string" && config.label.trim() ? config.label.trim() : `Pass ${order}`;
        const offset = Number.isFinite(config.offsetMinutes) ? Math.max(0, Math.round(config.offsetMinutes)) : index === 0 ? 0 : (passConfigs[index - 1]?.offsetMinutes ?? 0) + DAY_MINUTES2;
        const anchor = typeof config.anchor === "string" && config.anchor.trim() ? config.anchor.trim() : fallbackAnchor(index);
        const action = typeof config.action === "string" && config.action.trim() ? config.action.trim() : defaultActionForIndex(index);
        return {
          order,
          label,
          offsetMinutes: offset,
          anchor,
          action
        };
      })
    };
  }
  function formatPassPlan(plan) {
    if (!plan || !Array.isArray(plan.schedule) || !plan.schedule.length) {
      return "No passes scheduled";
    }
    const steps = plan.schedule.slice().sort((a, b) => (a?.order ?? 0) - (b?.order ?? 0)).map((step) => {
      const action = typeof step?.action === "string" && step.action.trim() ? step.action.trim() : `Pass ${step?.order ?? ""}`;
      const offset = formatOffset(step?.offsetMinutes ?? 0);
      return `${action} \u2022 ${offset}`;
    });
    return `Plan: ${steps.join(", ")}`;
  }
  function formatWeekCount(weeks) {
    if (!Number.isFinite(weeks) || weeks <= 0) return null;
    const rounded = Math.max(1, Math.round(weeks));
    return `${rounded} week${rounded === 1 ? "" : "s"}`;
  }
  function parseBlockDate(value) {
    if (!value) return null;
    const date = new Date(value);
    if (Number.isNaN(date.getTime())) return null;
    return date;
  }
  function formatBlockDate(value, options = { month: "short", day: "numeric", year: "numeric" }) {
    const date = parseBlockDate(value);
    if (!date) return null;
    const formatter = new Intl.DateTimeFormat(void 0, options);
    return formatter.format(date);
  }
  function formatDateRange(start, end) {
    const startDate = parseBlockDate(start);
    const endDate = parseBlockDate(end);
    if (!startDate && !endDate) return null;
    if (startDate && endDate) {
      const formatter = new Intl.DateTimeFormat(void 0, { month: "short", day: "numeric", year: "numeric" });
      return `${formatter.format(startDate)} \u2192 ${formatter.format(endDate)}`;
    }
    if (startDate) {
      const formatted2 = formatBlockDate(startDate);
      return formatted2 ? `Starts ${formatted2}` : null;
    }
    const formatted = formatBlockDate(endDate);
    return formatted ? `Ends ${formatted}` : null;
  }
  function computeSpanDays(start, end) {
    const startDate = parseBlockDate(start);
    const endDate = parseBlockDate(end);
    if (!startDate || !endDate) return null;
    const diff = endDate.getTime() - startDate.getTime();
    if (diff < 0) return null;
    return Math.round(diff / DAY_MS) + 1;
  }
  function formatBlockMeta(block) {
    if (!block) return "No block data";
    const parts = [];
    const weeks = formatWeekCount(Number(block.weeks));
    if (weeks) parts.push(weeks);
    const range = formatDateRange(block.startDate, block.endDate);
    if (range) parts.push(range);
    const spanDays = computeSpanDays(block.startDate, block.endDate);
    if (spanDays) parts.push(`${spanDays} day${spanDays === 1 ? "" : "s"}`);
    return parts.join(" \u2022 ") || "Block details unavailable";
  }
  async function renderSettings(root) {
    root.innerHTML = "";
    const layout = document.createElement("div");
    layout.className = "settings-layout";
    root.appendChild(layout);
    const [catalogResult, settingsResult] = await Promise.allSettled([
      loadBlockCatalog(),
      getSettings()
    ]);
    if (catalogResult.status === "rejected") {
      console.warn("Failed to load block catalog", catalogResult.reason);
    }
    if (settingsResult.status === "rejected") {
      console.warn("Failed to load app settings", settingsResult.reason);
    }
    const catalog = catalogResult.status === "fulfilled" && catalogResult.value ? catalogResult.value : { blocks: [] };
    const settings = settingsResult.status === "fulfilled" ? settingsResult.value : null;
    const blocks = Array.isArray(catalog.blocks) ? catalog.blocks : [];
    const reviewSteps = {
      ...DEFAULT_REVIEW_STEPS,
      ...settings?.reviewSteps || {}
    };
    const plannerDefaults = settings?.plannerDefaults || DEFAULT_PLANNER_DEFAULTS;
    const blocksCard = document.createElement("section");
    blocksCard.className = "card";
    const bHeading = document.createElement("h2");
    bHeading.textContent = "Blocks";
    blocksCard.appendChild(bHeading);
    const list = document.createElement("div");
    list.className = "block-list";
    blocksCard.appendChild(list);
    if (!blocks.length) {
      list.appendChild(createEmptyState());
    }
    blocks.forEach((block, index) => {
      if (!block) return;
      const wrap = document.createElement("div");
      wrap.className = "settings-block-row";
      if (block.color) {
        wrap.style.setProperty("--block-accent", block.color);
        wrap.classList.add("has-accent");
      }
      const header = document.createElement("div");
      header.className = "settings-block-header";
      const title = document.createElement("h3");
      title.className = "settings-block-title";
      title.textContent = block.title || "Untitled block";
      if (block.color) {
        title.style.setProperty("--block-accent", block.color);
        title.classList.add("has-accent");
      }
      header.appendChild(title);
      const meta = document.createElement("div");
      meta.className = "settings-block-meta";
      meta.textContent = formatBlockMeta(block);
      header.appendChild(meta);
      const controls = document.createElement("div");
      controls.className = "settings-block-controls";
      const upBtn = document.createElement("button");
      upBtn.type = "button";
      upBtn.className = "btn tertiary";
      upBtn.textContent = "\u2191";
      upBtn.disabled = index === 0;
      upBtn.addEventListener("click", async () => {
        const other = blocks[index - 1];
        if (!other) return;
        const tmp = block.order;
        block.order = other.order;
        other.order = tmp;
        await upsertBlock(block);
        await upsertBlock(other);
        invalidateBlockCatalog();
        await renderSettings(root);
      });
      controls.appendChild(upBtn);
      const downBtn = document.createElement("button");
      downBtn.type = "button";
      downBtn.className = "btn tertiary";
      downBtn.textContent = "\u2193";
      downBtn.disabled = index === blocks.length - 1;
      downBtn.addEventListener("click", async () => {
        const other = blocks[index + 1];
        if (!other) return;
        const tmp = block.order;
        block.order = other.order;
        other.order = tmp;
        await upsertBlock(block);
        await upsertBlock(other);
        invalidateBlockCatalog();
        await renderSettings(root);
      });
      controls.appendChild(downBtn);
      const editBtn = document.createElement("button");
      editBtn.type = "button";
      editBtn.className = "btn secondary";
      editBtn.textContent = "Edit";
      controls.appendChild(editBtn);
      const deleteBtn = document.createElement("button");
      deleteBtn.type = "button";
      deleteBtn.className = "btn secondary";
      deleteBtn.textContent = "Delete";
      deleteBtn.addEventListener("click", async () => {
        if (!await confirmModal("Delete block?")) return;
        await deleteBlock(block.blockId);
        invalidateBlockCatalog();
        await renderSettings(root);
      });
      controls.appendChild(deleteBtn);
      header.appendChild(controls);
      wrap.appendChild(header);
      const detailGrid = document.createElement("div");
      detailGrid.className = "settings-block-detail-grid";
      const startDetail = document.createElement("div");
      startDetail.className = "settings-block-detail";
      startDetail.innerHTML = `<span>Start</span><strong>${formatBlockDate(block.startDate) || "\u2014"}</strong>`;
      detailGrid.appendChild(startDetail);
      const endDetail = document.createElement("div");
      endDetail.className = "settings-block-detail";
      endDetail.innerHTML = `<span>End</span><strong>${formatBlockDate(block.endDate) || "\u2014"}</strong>`;
      detailGrid.appendChild(endDetail);
      const weeksDetail = document.createElement("div");
      weeksDetail.className = "settings-block-detail";
      weeksDetail.innerHTML = `<span>Weeks</span><strong>${formatWeekCount(Number(block.weeks)) || "\u2014"}</strong>`;
      detailGrid.appendChild(weeksDetail);
      const spanDays = computeSpanDays(block.startDate, block.endDate);
      const daysDetail = document.createElement("div");
      daysDetail.className = "settings-block-detail";
      daysDetail.innerHTML = `<span>Span</span><strong>${spanDays ? `${spanDays} day${spanDays === 1 ? "" : "s"}` : "\u2014"}</strong>`;
      detailGrid.appendChild(daysDetail);
      wrap.appendChild(detailGrid);
      const editForm = document.createElement("form");
      editForm.className = "settings-block-edit";
      editForm.hidden = true;
      const titleInput2 = document.createElement("input");
      titleInput2.type = "text";
      titleInput2.required = true;
      titleInput2.className = "input";
      titleInput2.value = block.title || "";
      const weeksInput2 = document.createElement("input");
      weeksInput2.type = "number";
      weeksInput2.min = "1";
      weeksInput2.required = true;
      weeksInput2.className = "input";
      weeksInput2.value = block.weeks != null ? String(block.weeks) : "1";
      const startInput2 = document.createElement("input");
      startInput2.type = "date";
      startInput2.className = "input";
      startInput2.value = block.startDate || "";
      const endInput2 = document.createElement("input");
      endInput2.type = "date";
      endInput2.className = "input";
      endInput2.value = block.endDate || "";
      const colorInput2 = document.createElement("input");
      colorInput2.type = "color";
      colorInput2.className = "input";
      colorInput2.value = block.color || "#ffffff";
      const saveBtn = document.createElement("button");
      saveBtn.type = "submit";
      saveBtn.className = "btn";
      saveBtn.textContent = "Save changes";
      const cancelBtn = document.createElement("button");
      cancelBtn.type = "button";
      cancelBtn.className = "btn secondary";
      cancelBtn.textContent = "Cancel";
      cancelBtn.addEventListener("click", () => {
        editForm.hidden = true;
      });
      editForm.append(titleInput2, startInput2, endInput2, weeksInput2, colorInput2, saveBtn, cancelBtn);
      editForm.addEventListener("submit", async (event) => {
        event.preventDefault();
        const titleValue = titleInput2.value.trim();
        const weeksValue = Number(weeksInput2.value);
        if (!titleValue || !Number.isFinite(weeksValue) || weeksValue <= 0) {
          return;
        }
        let startValue = startInput2.value || null;
        let endValue = endInput2.value || null;
        if (startValue && endValue) {
          const startDate = new Date(startValue);
          const endDate = new Date(endValue);
          if (!Number.isNaN(startDate.getTime()) && !Number.isNaN(endDate.getTime()) && startDate > endDate) {
            const swap = startValue;
            startValue = endValue;
            endValue = swap;
          }
        }
        const payload = {
          ...block,
          title: titleValue,
          weeks: weeksValue,
          color: colorInput2.value || null,
          startDate: startValue,
          endDate: endValue
        };
        await upsertBlock(payload);
        invalidateBlockCatalog();
        await renderSettings(root);
      });
      wrap.appendChild(editForm);
      editBtn.addEventListener("click", () => {
        editForm.hidden = !editForm.hidden;
      });
      list.appendChild(wrap);
    });
    const form = document.createElement("form");
    form.className = "settings-block-add";
    const titleInput = document.createElement("input");
    titleInput.type = "text";
    titleInput.required = true;
    titleInput.placeholder = "Block title";
    titleInput.className = "input";
    const startInput = document.createElement("input");
    startInput.type = "date";
    startInput.className = "input";
    startInput.placeholder = "Start date";
    startInput.setAttribute("aria-label", "Block start date");
    const endInput = document.createElement("input");
    endInput.type = "date";
    endInput.className = "input";
    endInput.placeholder = "End date";
    endInput.setAttribute("aria-label", "Block end date");
    const weeksInput = document.createElement("input");
    weeksInput.type = "number";
    weeksInput.min = "1";
    weeksInput.required = true;
    weeksInput.value = "1";
    weeksInput.placeholder = "Weeks";
    weeksInput.className = "input";
    const colorInput = document.createElement("input");
    colorInput.type = "color";
    colorInput.className = "input";
    colorInput.value = "#ffffff";
    const submitBtn = document.createElement("button");
    submitBtn.type = "submit";
    submitBtn.className = "btn";
    submitBtn.textContent = "Add block (top)";
    form.append(titleInput, startInput, endInput, weeksInput, colorInput, submitBtn);
    form.addEventListener("submit", async (event) => {
      event.preventDefault();
      const titleValue = titleInput.value.trim();
      const weeksValue = Number(weeksInput.value);
      if (!titleValue || !Number.isFinite(weeksValue) || weeksValue <= 0) {
        return;
      }
      let startValue = startInput.value || null;
      let endValue = endInput.value || null;
      if (startValue && endValue) {
        const startDate = new Date(startValue);
        const endDate = new Date(endValue);
        if (!Number.isNaN(startDate.getTime()) && !Number.isNaN(endDate.getTime()) && startDate > endDate) {
          const swap = startValue;
          startValue = endValue;
          endValue = swap;
        }
      }
      await upsertBlock({
        title: titleValue,
        weeks: weeksValue,
        color: colorInput.value || null,
        startDate: startValue,
        endDate: endValue
      });
      titleInput.value = "";
      startInput.value = "";
      endInput.value = "";
      weeksInput.value = "1";
      colorInput.value = "#ffffff";
      invalidateBlockCatalog();
      await renderSettings(root);
    });
    blocksCard.appendChild(form);
    layout.appendChild(blocksCard);
    const reviewCard = document.createElement("section");
    reviewCard.className = "card";
    const rHeading = document.createElement("h2");
    rHeading.textContent = "Review";
    reviewCard.appendChild(rHeading);
    const reviewForm = document.createElement("form");
    reviewForm.className = "settings-review-form";
    reviewForm.dataset.section = "review";
    const stepsHeading = document.createElement("h3");
    stepsHeading.className = "settings-subheading";
    stepsHeading.textContent = "Spaced repetition steps (minutes)";
    reviewForm.appendChild(stepsHeading);
    const grid = document.createElement("div");
    grid.className = "settings-review-grid";
    reviewForm.appendChild(grid);
    const labels = {
      again: "Again",
      hard: "Hard",
      good: "Good",
      easy: "Easy"
    };
    const reviewInputs = /* @__PURE__ */ new Map();
    for (const rating of REVIEW_RATINGS) {
      const row = document.createElement("label");
      row.className = "settings-review-row";
      const label = document.createElement("span");
      label.textContent = labels[rating] || rating;
      row.appendChild(label);
      const input = document.createElement("input");
      input.type = "number";
      input.min = "1";
      input.required = true;
      input.className = "input settings-review-input";
      input.value = String(reviewSteps[rating] ?? DEFAULT_REVIEW_STEPS[rating]);
      input.dataset.rating = rating;
      row.appendChild(input);
      reviewInputs.set(rating, input);
      grid.appendChild(row);
    }
    const saveReviewBtn = document.createElement("button");
    saveReviewBtn.type = "submit";
    saveReviewBtn.className = "btn";
    saveReviewBtn.textContent = "Save review settings";
    reviewForm.appendChild(saveReviewBtn);
    const reviewStatus = document.createElement("p");
    reviewStatus.className = "settings-review-status";
    reviewStatus.hidden = true;
    reviewForm.appendChild(reviewStatus);
    reviewForm.addEventListener("submit", async (event) => {
      event.preventDefault();
      reviewStatus.textContent = "";
      reviewStatus.hidden = true;
      reviewStatus.classList.remove("is-error");
      const nextSteps = {};
      for (const [rating, input] of reviewInputs) {
        const value = Number(input.value);
        if (!Number.isFinite(value) || value <= 0) {
          reviewStatus.textContent = "Enter a positive number of minutes for each step.";
          reviewStatus.classList.add("is-error");
          reviewStatus.hidden = false;
          input.focus();
          return;
        }
        const rounded = Math.max(1, Math.round(value));
        nextSteps[rating] = rounded;
      }
      const originalText = saveReviewBtn.textContent;
      saveReviewBtn.disabled = true;
      saveReviewBtn.textContent = "Saving\u2026";
      try {
        await saveSettings({ reviewSteps: nextSteps });
        const updated = await getSettings();
        const normalized2 = {
          ...DEFAULT_REVIEW_STEPS,
          ...updated?.reviewSteps || {}
        };
        for (const [rating, input] of reviewInputs) {
          const value = normalized2[rating];
          if (Number.isFinite(value) && value > 0) {
            input.value = String(value);
          }
        }
        reviewStatus.textContent = "Review settings saved.";
        reviewStatus.hidden = false;
      } catch (err) {
        console.warn("Failed to save review settings", err);
        reviewStatus.textContent = "Failed to save review settings.";
        reviewStatus.classList.add("is-error");
        reviewStatus.hidden = false;
      } finally {
        saveReviewBtn.disabled = false;
        saveReviewBtn.textContent = originalText;
      }
    });
    reviewCard.appendChild(reviewForm);
    layout.appendChild(reviewCard);
    const passDefaultsCard = document.createElement("section");
    passDefaultsCard.className = "card";
    const passHeading = document.createElement("h2");
    passHeading.textContent = "Lecture pass defaults";
    passDefaultsCard.appendChild(passHeading);
    const passDescription = document.createElement("p");
    passDescription.className = "settings-pass-description";
    passDescription.textContent = "Configure the default pass count, timing, and pass functions applied to new lectures.";
    passDefaultsCard.appendChild(passDescription);
    const passForm = document.createElement("form");
    passForm.className = "settings-pass-form";
    passDefaultsCard.appendChild(passForm);
    let currentPlannerDefaults = plannerDefaults;
    const defaultPlan = plannerDefaultsToPassPlan(currentPlannerDefaults);
    let planTemplate = defaultPlan;
    let passConfigs = Array.isArray(defaultPlan.schedule) ? defaultPlan.schedule.map((step) => ({ ...step })) : [];
    let passColors = Array.isArray(currentPlannerDefaults?.passColors) && currentPlannerDefaults.passColors.length ? currentPlannerDefaults.passColors.slice() : DEFAULT_PASS_COLORS.slice();
    function ensurePassColorCount(count) {
      const normalized2 = Math.max(0, Number.isFinite(count) ? Math.round(count) : 0);
      const next = [];
      for (let i = 0; i < normalized2; i += 1) {
        const existing = passColors[i];
        if (typeof existing === "string" && existing.trim()) {
          next.push(existing.trim());
        } else {
          next.push(DEFAULT_PASS_COLORS[i % DEFAULT_PASS_COLORS.length]);
        }
      }
      passColors = next;
    }
    function resolvedPassColor(index) {
      if (typeof passColors[index] === "string" && passColors[index].trim()) {
        return passColors[index].trim();
      }
      return DEFAULT_PASS_COLORS[index % DEFAULT_PASS_COLORS.length];
    }
    ensurePassColorCount(passConfigs.length);
    const passCountField = document.createElement("label");
    passCountField.className = "lecture-pass-count settings-pass-count";
    passCountField.textContent = "Default pass count";
    const passCountInput = document.createElement("input");
    passCountInput.type = "number";
    passCountInput.min = "0";
    passCountInput.max = String(MAX_PASS_COUNT);
    passCountInput.className = "input";
    passCountInput.value = String(passConfigs.length);
    passCountField.appendChild(passCountInput);
    const passCountHelp = document.createElement("span");
    passCountHelp.className = "lecture-pass-help";
    passCountHelp.textContent = "Set the default number of spaced passes for new lectures.";
    passCountField.appendChild(passCountHelp);
    passForm.appendChild(passCountField);
    const passColorSection = document.createElement("div");
    passColorSection.className = "settings-pass-colors";
    const passColorTitle = document.createElement("h3");
    passColorTitle.className = "settings-pass-colors-title";
    passColorTitle.textContent = "Pass colors";
    passColorSection.appendChild(passColorTitle);
    const passColorHint = document.createElement("p");
    passColorHint.className = "settings-pass-colors-hint";
    passColorHint.textContent = "Choose the accent color used for pass chips and timeline bars.";
    passColorSection.appendChild(passColorHint);
    const passColorList = document.createElement("div");
    passColorList.className = "settings-pass-color-list";
    passColorSection.appendChild(passColorList);
    const passColorActions = document.createElement("div");
    passColorActions.className = "settings-pass-color-actions";
    const passColorReset = document.createElement("button");
    passColorReset.type = "button";
    passColorReset.className = "settings-pass-colors-reset";
    passColorReset.textContent = "Reset to defaults";
    passColorActions.appendChild(passColorReset);
    passColorSection.appendChild(passColorActions);
    passForm.appendChild(passColorSection);
    const passSummary = document.createElement("div");
    passSummary.className = "lecture-pass-summary-line settings-pass-summary";
    passForm.appendChild(passSummary);
    const passAdvanced = document.createElement("details");
    passAdvanced.className = "lecture-pass-advanced settings-pass-advanced";
    passAdvanced.open = true;
    const passAdvancedSummary = document.createElement("summary");
    passAdvancedSummary.textContent = `Pass details (${passConfigs.length})`;
    passAdvanced.appendChild(passAdvancedSummary);
    const passAdvancedHint = document.createElement("p");
    passAdvancedHint.className = "lecture-pass-advanced-hint";
    passAdvancedHint.textContent = "Tune the pass function and spacing for each default pass.";
    passAdvanced.appendChild(passAdvancedHint);
    const passList = document.createElement("div");
    passList.className = "lecture-pass-editor settings-pass-editor";
    passAdvanced.appendChild(passList);
    passForm.appendChild(passAdvanced);
    const passStatus = document.createElement("p");
    passStatus.className = "settings-pass-status";
    passStatus.hidden = true;
    passForm.appendChild(passStatus);
    const passSaveBtn = document.createElement("button");
    passSaveBtn.type = "submit";
    passSaveBtn.className = "btn";
    passSaveBtn.textContent = "Save pass defaults";
    passForm.appendChild(passSaveBtn);
    function updatePassSummary() {
      if (!passConfigs.length) {
        passSummary.textContent = "No default passes scheduled.";
      } else {
        const previewPlan = buildPassPlanPayload(passConfigs, planTemplate);
        const previewText = formatPassPlan(previewPlan);
        const cleaned = previewText.startsWith("Plan: ") ? previewText.slice(6) : previewText;
        passSummary.textContent = `${passConfigs.length} pass${passConfigs.length === 1 ? "" : "es"} \u2022 ${cleaned}`;
      }
      passAdvancedSummary.textContent = `Pass details (${passConfigs.length})`;
    }
    function renderPassColorInputs() {
      passColorList.innerHTML = "";
      ensurePassColorCount(passConfigs.length);
      if (!passColors.length) {
        passColorReset.disabled = true;
        const empty = document.createElement("p");
        empty.className = "settings-pass-colors-empty";
        empty.textContent = "Increase the pass count above to configure colors.";
        passColorList.appendChild(empty);
        return;
      }
      passColorReset.disabled = false;
      passColors = passColors.map((_, index) => resolvedPassColor(index));
      passColors.forEach((color, index) => {
        const row = document.createElement("div");
        row.className = "settings-pass-color";
        const label = document.createElement("span");
        label.className = "settings-pass-color-label";
        label.textContent = `Pass ${index + 1}`;
        const swatch = document.createElement("span");
        swatch.className = "settings-pass-color-swatch";
        swatch.style.setProperty("--swatch-color", color);
        const input = document.createElement("input");
        input.className = "input settings-pass-color-input";
        input.type = "text";
        input.value = color;
        input.placeholder = DEFAULT_PASS_COLORS[index % DEFAULT_PASS_COLORS.length];
        input.addEventListener("input", (event) => {
          const next = event.target.value.trim();
          const value = next || DEFAULT_PASS_COLORS[index % DEFAULT_PASS_COLORS.length];
          passColors[index] = value;
          swatch.style.setProperty("--swatch-color", value);
        });
        row.append(label, swatch, input);
        passColorList.appendChild(row);
      });
    }
    function renderPassEditor() {
      passList.innerHTML = "";
      if (!passConfigs.length) {
        const empty = document.createElement("div");
        empty.className = "lecture-pass-empty";
        empty.textContent = "No passes planned. Increase the count above to build a default schedule.";
        passList.appendChild(empty);
        updatePassSummary();
        renderPassColorInputs();
        return;
      }
      passConfigs.forEach((config, index) => {
        const row = document.createElement("div");
        row.className = "lecture-pass-row";
        const label = document.createElement("div");
        label.className = "lecture-pass-label";
        label.textContent = `Pass ${index + 1}`;
        row.appendChild(label);
        const controls = document.createElement("div");
        controls.className = "lecture-pass-controls";
        const actionField = document.createElement("div");
        actionField.className = "lecture-pass-field";
        const actionLabel = document.createElement("span");
        actionLabel.className = "lecture-pass-field-label";
        actionLabel.textContent = "Pass function";
        actionField.appendChild(actionLabel);
        const select = document.createElement("select");
        select.className = "input lecture-pass-action";
        LECTURE_PASS_ACTIONS.forEach((action) => {
          const option = document.createElement("option");
          option.value = action;
          option.textContent = action;
          select.appendChild(option);
        });
        if (config.action && !LECTURE_PASS_ACTIONS.includes(config.action)) {
          const custom = document.createElement("option");
          custom.value = config.action;
          custom.textContent = config.action;
          select.appendChild(custom);
        }
        select.value = config.action || "";
        select.addEventListener("change", (event) => {
          const value = event.target.value;
          passConfigs[index] = { ...passConfigs[index], action: value };
          updatePassSummary();
        });
        actionField.appendChild(select);
        controls.appendChild(actionField);
        const offsetField = document.createElement("div");
        offsetField.className = "lecture-pass-field lecture-pass-offset-field";
        const offsetLabel = document.createElement("span");
        offsetLabel.className = "lecture-pass-field-label";
        offsetLabel.textContent = "Timing";
        offsetField.appendChild(offsetLabel);
        const offsetInputs = document.createElement("div");
        offsetInputs.className = "lecture-pass-offset-inputs";
        const split = splitOffsetMinutes(config.offsetMinutes ?? 0);
        const offsetInput = document.createElement("input");
        offsetInput.type = "number";
        offsetInput.min = "0";
        offsetInput.step = "1";
        offsetInput.className = "input lecture-pass-offset-value";
        offsetInput.value = String(split.value);
        const unitSelect = document.createElement("select");
        unitSelect.className = "input lecture-pass-offset-unit";
        OFFSET_UNITS.forEach((option) => {
          const opt = document.createElement("option");
          opt.value = option.id;
          opt.textContent = option.label;
          unitSelect.appendChild(opt);
        });
        unitSelect.value = split.unit;
        offsetInputs.appendChild(offsetInput);
        offsetInputs.appendChild(unitSelect);
        offsetField.appendChild(offsetInputs);
        const preview = document.createElement("span");
        preview.className = "lecture-pass-offset-preview";
        preview.textContent = formatOffset(config.offsetMinutes ?? 0);
        offsetField.appendChild(preview);
        function commitOffset() {
          const minutes = combineOffsetValueUnit(offsetInput.value, unitSelect.value);
          passConfigs[index] = {
            ...passConfigs[index],
            offsetMinutes: minutes
          };
          preview.textContent = formatOffset(passConfigs[index].offsetMinutes ?? 0);
          updatePassSummary();
        }
        offsetInput.addEventListener("change", () => {
          const numeric = Number(offsetInput.value);
          if (!Number.isFinite(numeric) || numeric < 0) {
            offsetInput.value = "0";
          }
          commitOffset();
        });
        offsetInput.addEventListener("blur", () => {
          const numeric = Math.max(0, Math.round(Number(offsetInput.value) || 0));
          offsetInput.value = String(numeric);
          commitOffset();
        });
        unitSelect.addEventListener("change", commitOffset);
        controls.appendChild(offsetField);
        row.appendChild(controls);
        passList.appendChild(row);
      });
      updatePassSummary();
      renderPassColorInputs();
    }
    renderPassEditor();
    passColorReset.addEventListener("click", () => {
      passColors = DEFAULT_PASS_COLORS.slice(0, passConfigs.length || DEFAULT_PASS_COLORS.length);
      ensurePassColorCount(passConfigs.length);
      renderPassColorInputs();
    });
    passCountInput.addEventListener("change", () => {
      const next = clampPassCount(passCountInput.value);
      passCountInput.value = String(next);
      const template = passConfigs.length ? { schedule: passConfigs.slice() } : planTemplate;
      passConfigs = adjustPassConfigs(passConfigs, next, template);
      ensurePassColorCount(next);
      renderPassEditor();
    });
    passForm.addEventListener("submit", async (event) => {
      event.preventDefault();
      passStatus.textContent = "";
      passStatus.hidden = true;
      passStatus.classList.remove("is-error");
      const anchorOffsets = {
        ...DEFAULT_PLANNER_DEFAULTS.anchorOffsets || {},
        ...currentPlannerDefaults?.anchorOffsets || {}
      };
      const payloadPlan = buildPassPlanPayload(passConfigs, planTemplate);
      const payloadPasses = payloadPlan.schedule.map((step) => ({
        order: step.order,
        label: step.label,
        offsetMinutes: step.offsetMinutes,
        anchor: step.anchor,
        action: step.action
      }));
      const originalText = passSaveBtn.textContent;
      passSaveBtn.disabled = true;
      passSaveBtn.textContent = "Saving\u2026";
      const palette2 = passColors.map((color, index) => {
        if (typeof color === "string") {
          const trimmed = color.trim();
          if (trimmed) return trimmed;
        }
        return DEFAULT_PASS_COLORS[index % DEFAULT_PASS_COLORS.length];
      });
      try {
        await saveSettings({ plannerDefaults: { anchorOffsets, passes: payloadPasses, passColors: palette2 } });
        const updated = await getSettings();
        currentPlannerDefaults = updated?.plannerDefaults || DEFAULT_PLANNER_DEFAULTS;
        const refreshedPlan = plannerDefaultsToPassPlan(currentPlannerDefaults);
        planTemplate = refreshedPlan;
        passConfigs = Array.isArray(refreshedPlan.schedule) ? refreshedPlan.schedule.map((step) => ({ ...step })) : [];
        passColors = Array.isArray(currentPlannerDefaults?.passColors) && currentPlannerDefaults.passColors.length ? currentPlannerDefaults.passColors.slice() : DEFAULT_PASS_COLORS.slice();
        passCountInput.value = String(passConfigs.length);
        renderPassEditor();
        passStatus.textContent = "Pass defaults saved.";
        passStatus.hidden = false;
      } catch (err) {
        console.warn("Failed to save pass defaults", err);
        passStatus.textContent = "Failed to save pass defaults.";
        passStatus.classList.add("is-error");
        passStatus.hidden = false;
      } finally {
        passSaveBtn.disabled = false;
        passSaveBtn.textContent = originalText;
      }
    });
    layout.appendChild(passDefaultsCard);
    const dataCard = document.createElement("section");
    dataCard.className = "card";
    const dHeading = document.createElement("h2");
    dHeading.textContent = "Data";
    dataCard.appendChild(dHeading);
    async function triggerExportDownload(options = {}) {
      const { prefix = "sevenn-export", withTimestamp = false } = options;
      const dump = await exportJSON();
      const blob = new Blob([JSON.stringify(dump, null, 2)], { type: "application/json" });
      const url = URL.createObjectURL(blob);
      const timestamp = (/* @__PURE__ */ new Date()).toISOString().replace(/[:.]/g, "-");
      const suffix = withTimestamp ? `-${timestamp}` : "";
      const a = document.createElement("a");
      a.href = url;
      a.download = `${prefix}${suffix}.json`;
      a.click();
      URL.revokeObjectURL(url);
    }
    const exportBtn = document.createElement("button");
    exportBtn.className = "btn";
    exportBtn.textContent = "Export DB";
    exportBtn.addEventListener("click", async () => {
      try {
        await triggerExportDownload();
      } catch (err) {
        console.error("Failed to export database", err);
        alert("Export failed");
      }
    });
    dataCard.appendChild(exportBtn);
    const importInput = document.createElement("input");
    importInput.type = "file";
    importInput.accept = "application/json";
    importInput.style.display = "none";
    importInput.addEventListener("change", async () => {
      const file = importInput.files[0];
      if (!file) return;
      try {
        const confirmBackup = window.confirm(
          "Importing will replace your current data. Would you like to download a backup first?"
        );
        if (confirmBackup) {
          try {
            await triggerExportDownload({ prefix: "sevenn-backup", withTimestamp: true });
          } catch (err) {
            console.error("Failed to create backup prior to import", err);
            alert("Backup failed. Import cancelled.");
            importInput.value = "";
            return;
          }
        }
        const text = await file.text();
        const json = JSON.parse(text);
        const res = await importJSON(json);
        if (!res?.ok) {
          alert(res?.message || "Import failed");
          return;
        }
        alert(res.message || "Import complete");
        location.reload();
      } catch (e) {
        alert("Import failed");
      } finally {
        importInput.value = "";
      }
    });
    const importBtn = document.createElement("button");
    importBtn.className = "btn";
    importBtn.textContent = "Import DB";
    importBtn.addEventListener("click", () => importInput.click());
    dataCard.appendChild(importBtn);
    dataCard.appendChild(importInput);
    const ankiBtn = document.createElement("button");
    ankiBtn.className = "btn";
    ankiBtn.textContent = "Export Anki CSV";
    ankiBtn.addEventListener("click", async () => {
      const dump = await exportJSON();
      const blob = await exportAnkiCSV("qa", dump.items || []);
      const a = document.createElement("a");
      a.href = URL.createObjectURL(blob);
      a.download = "sevenn-anki.csv";
      a.click();
      URL.revokeObjectURL(a.href);
    });
    dataCard.appendChild(ankiBtn);
    layout.appendChild(dataCard);
  }

  // js/ui/components/window-manager.js
  var windows = /* @__PURE__ */ new Set();
  var zIndexCounter = 2e3;
  var dock;
  var dockList;
  var dockHandle;
  function ensureDock() {
    if (dock) return;
    dock = document.createElement("div");
    dock.className = "window-dock";
    dockHandle = document.createElement("button");
    dockHandle.type = "button";
    dockHandle.className = "window-dock-handle";
    dockHandle.textContent = "\u{1F5C2}";
    dockHandle.addEventListener("click", () => {
      dock.classList.toggle("open");
    });
    dock.appendChild(dockHandle);
    dockList = document.createElement("div");
    dockList.className = "window-dock-list";
    dock.appendChild(dockList);
    document.body.appendChild(dock);
  }
  function bringToFront(win) {
    if (!win) return;
    zIndexCounter += 1;
    win.style.zIndex = zIndexCounter;
  }
  function setupDragging(win, header) {
    let active = null;
    header.addEventListener("mousedown", (e) => {
      if (e.target.closest("button")) return;
      active = {
        offsetX: e.clientX - win.offsetLeft,
        offsetY: e.clientY - win.offsetTop
      };
      bringToFront(win);
      document.addEventListener("mousemove", handleMove);
      document.addEventListener("mouseup", stopDrag);
      e.preventDefault();
    });
    function handleMove(e) {
      if (!active) return;
      const left = e.clientX - active.offsetX;
      const top = e.clientY - active.offsetY;
      win.style.left = `${left}px`;
      win.style.top = `${top}px`;
    }
    function stopDrag() {
      active = null;
      document.removeEventListener("mousemove", handleMove);
      document.removeEventListener("mouseup", stopDrag);
    }
  }
  function createFloatingWindow({ title, width = 520, onClose, onBeforeClose } = {}) {
    ensureDock();
    const win = document.createElement("div");
    win.className = "floating-window";
    win.style.width = typeof width === "number" ? `${width}px` : width;
    win.style.left = `${120 + windows.size * 32}px`;
    win.style.top = `${100 + windows.size * 24}px`;
    bringToFront(win);
    const header = document.createElement("div");
    header.className = "floating-header";
    const titleEl = document.createElement("div");
    titleEl.className = "floating-title";
    titleEl.textContent = title || "Window";
    header.appendChild(titleEl);
    const actions = document.createElement("div");
    actions.className = "floating-actions";
    const minimizeBtn = document.createElement("button");
    minimizeBtn.type = "button";
    minimizeBtn.className = "floating-action";
    minimizeBtn.title = "Minimize";
    minimizeBtn.textContent = "\u2014";
    actions.appendChild(minimizeBtn);
    const closeBtn = document.createElement("button");
    closeBtn.type = "button";
    closeBtn.className = "floating-action";
    closeBtn.title = "Close";
    closeBtn.textContent = "\xD7";
    actions.appendChild(closeBtn);
    function appendActionButton({
      text = "",
      icon,
      title: actionTitle = "",
      ariaLabel = "",
      className = "",
      onClick,
      position = "before-close"
    } = {}) {
      const btn = document.createElement("button");
      btn.type = "button";
      btn.className = ["floating-action", className].filter(Boolean).join(" ");
      if (icon) {
        btn.innerHTML = icon;
      } else {
        btn.textContent = text;
      }
      if (actionTitle) btn.title = actionTitle;
      if (ariaLabel || actionTitle) {
        btn.setAttribute("aria-label", ariaLabel || actionTitle);
      }
      if (typeof onClick === "function") {
        btn.addEventListener("click", onClick);
      }
      if (position === "start") {
        actions.insertBefore(btn, actions.firstChild || null);
      } else if (position === "end") {
        actions.appendChild(btn);
      } else if (position === "after-minimize") {
        if (minimizeBtn.nextSibling) {
          actions.insertBefore(btn, minimizeBtn.nextSibling);
        } else {
          actions.appendChild(btn);
        }
      } else if (position === "before-close" && closeBtn.parentElement === actions) {
        actions.insertBefore(btn, closeBtn);
      } else {
        actions.appendChild(btn);
      }
      return btn;
    }
    header.appendChild(actions);
    win.appendChild(header);
    const body = document.createElement("div");
    body.className = "floating-body";
    win.appendChild(body);
    const resizeHandle = document.createElement("div");
    resizeHandle.className = "floating-resize-handle";
    win.appendChild(resizeHandle);
    const MIN_WIDTH = 320;
    const MIN_HEIGHT = 260;
    let resizeState = null;
    resizeHandle.addEventListener("pointerdown", (event) => {
      if (event.button !== 0) return;
      bringToFront(win);
      resizeState = {
        pointerId: event.pointerId,
        startX: event.clientX,
        startY: event.clientY,
        startWidth: win.offsetWidth,
        startHeight: win.offsetHeight,
        useGlobalEvents: typeof resizeHandle.setPointerCapture !== "function"
      };
      if (!resizeState.useGlobalEvents && typeof resizeHandle.setPointerCapture === "function") {
        resizeHandle.setPointerCapture(event.pointerId);
      }
      if (resizeState.useGlobalEvents) {
        window.addEventListener("pointermove", handlePointerMove2);
        window.addEventListener("pointerup", stopResize);
        window.addEventListener("pointercancel", stopResize);
      }
      event.preventDefault();
    });
    const handlePointerMove2 = (event) => {
      if (!resizeState || event.pointerId !== resizeState.pointerId) return;
      const deltaX = event.clientX - resizeState.startX;
      const deltaY = event.clientY - resizeState.startY;
      const nextWidth = Math.max(MIN_WIDTH, resizeState.startWidth + deltaX);
      const nextHeight = Math.max(MIN_HEIGHT, resizeState.startHeight + deltaY);
      win.style.width = `${nextWidth}px`;
      win.style.height = `${nextHeight}px`;
    };
    const stopResize = (event) => {
      if (!resizeState || event.pointerId !== resizeState.pointerId) return;
      const state2 = resizeState;
      resizeState = null;
      if (!state2.useGlobalEvents && typeof resizeHandle.releasePointerCapture === "function") {
        resizeHandle.releasePointerCapture(event.pointerId);
      }
      if (state2.useGlobalEvents) {
        window.removeEventListener("pointermove", handlePointerMove2);
        window.removeEventListener("pointerup", stopResize);
        window.removeEventListener("pointercancel", stopResize);
      }
    };
    resizeHandle.addEventListener("pointermove", handlePointerMove2);
    resizeHandle.addEventListener("pointerup", stopResize);
    resizeHandle.addEventListener("pointercancel", stopResize);
    let minimized = false;
    let dockButton = null;
    function handleMinimize() {
      if (minimized) {
        restore();
        return;
      }
      minimized = true;
      win.classList.add("minimized");
      win.style.display = "none";
      dock.classList.add("open");
      dockButton = document.createElement("button");
      dockButton.type = "button";
      dockButton.className = "dock-entry";
      dockButton.textContent = titleEl.textContent;
      dockButton.addEventListener("click", () => restore());
      dockList.appendChild(dockButton);
    }
    function destroyDockButton() {
      if (dockButton && dockButton.parentElement) {
        dockButton.parentElement.removeChild(dockButton);
      }
      dockButton = null;
      if (!dockList.childElementCount) {
        dock.classList.remove("open");
      }
    }
    function restore() {
      if (!minimized) return;
      minimized = false;
      win.classList.remove("minimized");
      win.style.display = "";
      bringToFront(win);
      destroyDockButton();
    }
    minimizeBtn.addEventListener("click", handleMinimize);
    async function close(reason) {
      if (typeof onBeforeClose === "function") {
        try {
          const shouldClose = await onBeforeClose(reason);
          if (shouldClose === false) return false;
        } catch (err) {
          console.error(err);
          return false;
        }
      }
      destroyDockButton();
      windows.delete(win);
      if (win.parentElement) win.parentElement.removeChild(win);
      if (typeof onClose === "function") onClose(reason);
      return true;
    }
    closeBtn.addEventListener("click", () => {
      void close("close");
    });
    function isInteractiveTarget(target) {
      if (!(target instanceof HTMLElement)) return false;
      if (target.closest('input, textarea, select, [contenteditable="true"], button, label, .rich-editor-area')) {
        return true;
      }
      return false;
    }
    win.addEventListener("mousedown", (event) => {
      if (isInteractiveTarget(event.target)) {
        requestAnimationFrame(() => bringToFront(win));
        return;
      }
      bringToFront(win);
    });
    win.addEventListener("focusin", () => bringToFront(win));
    setupDragging(win, header);
    document.body.appendChild(win);
    windows.add(win);
    return {
      element: win,
      body,
      header,
      actions,
      setContent(node) {
        body.innerHTML = "";
        if (node) body.appendChild(node);
      },
      close,
      minimize: handleMinimize,
      restore,
      setTitle(text) {
        titleEl.textContent = text;
        if (dockButton) dockButton.textContent = text;
      },
      isMinimized() {
        return minimized;
      },
      focus() {
        bringToFront(win);
      },
      addAction: appendActionButton
    };
  }

  // js/ui/components/media-upload.js
  var DEFAULT_FRAME_WIDTH = 520;
  function clamp(value, min, max) {
    if (Number.isNaN(value)) return min;
    if (value < min) return min;
    if (value > max) return max;
    return value;
  }
  function sanitizeAspectRatio(ratio) {
    if (!Number.isFinite(ratio) || ratio <= 0) return 1;
    return clamp(ratio, 0.25, 4);
  }
  function toDataUrl(canvas, mimeType, quality) {
    try {
      return canvas.toDataURL(mimeType, quality);
    } catch (err) {
      console.error("Failed to export canvas", err);
      return canvas.toDataURL();
    }
  }
  function inferMimeFromDataUrl(src) {
    if (typeof src !== "string") return "";
    const match = src.match(/^data:([^;,]+)[;,]/i);
    return match ? match[1] : "";
  }
  function editImageSource(src, { altText = "", width, height, mimeType } = {}) {
    if (!src) {
      return Promise.reject(new Error("Image source is required."));
    }
    return new Promise((resolve, reject) => {
      const image = new Image();
      image.onload = () => {
        const options = {
          initialAlt: altText,
          initialWidth: typeof width === "number" && width > 0 ? width : void 0,
          initialHeight: typeof height === "number" && height > 0 ? height : void 0,
          mimeType: mimeType || inferMimeFromDataUrl(src) || "image/png"
        };
        try {
          openCropDialog({ image, file: null }, options).then(resolve).catch(reject);
        } catch (err) {
          reject(err);
        }
      };
      image.onerror = () => {
        reject(new Error("Failed to load image."));
      };
      try {
        if (!/^data:/i.test(src) && !/^blob:/i.test(src)) {
          image.crossOrigin = "anonymous";
        }
        image.src = src;
      } catch (err) {
        reject(err);
      }
    });
  }
  function openCropDialog({ image, file }, options = {}) {
    return new Promise((resolve) => {
      const overlay = document.createElement("div");
      overlay.className = "media-cropper-overlay";
      overlay.setAttribute("role", "dialog");
      overlay.setAttribute("aria-modal", "true");
      const dialog = document.createElement("div");
      dialog.className = "media-cropper-dialog";
      overlay.appendChild(dialog);
      const header = document.createElement("header");
      header.className = "media-cropper-header";
      const title = document.createElement("h3");
      title.textContent = "Upload image";
      header.appendChild(title);
      const closeBtn = document.createElement("button");
      closeBtn.type = "button";
      closeBtn.className = "icon-btn ghost media-cropper-close";
      closeBtn.title = "Cancel";
      closeBtn.textContent = "\u2715";
      header.appendChild(closeBtn);
      dialog.appendChild(header);
      const body = document.createElement("div");
      body.className = "media-cropper-body";
      dialog.appendChild(body);
      const preview = document.createElement("div");
      preview.className = "media-cropper-preview";
      const canvas = document.createElement("canvas");
      canvas.width = DEFAULT_FRAME_WIDTH;
      canvas.height = Math.round(DEFAULT_FRAME_WIDTH * 0.75);
      preview.appendChild(canvas);
      body.appendChild(preview);
      const controls = document.createElement("div");
      controls.className = "media-cropper-controls";
      body.appendChild(controls);
      const ratioRow = document.createElement("div");
      ratioRow.className = "media-cropper-row";
      const ratioLabel = document.createElement("label");
      ratioLabel.textContent = "Aspect ratio";
      const ratioSelect = document.createElement("select");
      ratioSelect.className = "media-cropper-select";
      const naturalRatio = sanitizeAspectRatio(image.naturalWidth / image.naturalHeight || 1);
      const ratioOptions = [
        { value: "original", label: "Original", ratio: naturalRatio },
        { value: "1:1", label: "Square", ratio: 1 },
        { value: "4:3", label: "4 : 3", ratio: 4 / 3 },
        { value: "3:4", label: "3 : 4", ratio: 3 / 4 },
        { value: "16:9", label: "16 : 9", ratio: 16 / 9 }
      ];
      ratioOptions.forEach((opt) => {
        const option = document.createElement("option");
        option.value = opt.value;
        option.textContent = opt.label;
        ratioSelect.appendChild(option);
      });
      ratioSelect.value = "original";
      ratioLabel.appendChild(ratioSelect);
      ratioRow.appendChild(ratioLabel);
      controls.appendChild(ratioRow);
      const zoomRow = document.createElement("div");
      zoomRow.className = "media-cropper-row media-cropper-zoom";
      const zoomLabel = document.createElement("span");
      zoomLabel.textContent = "Zoom";
      zoomRow.appendChild(zoomLabel);
      const zoomRange = document.createElement("input");
      zoomRange.type = "range";
      zoomRange.min = "1";
      zoomRange.max = "3";
      zoomRange.step = "0.01";
      zoomRange.value = "1";
      zoomRange.className = "media-cropper-zoom-range";
      zoomRow.appendChild(zoomRange);
      const zoomValue = document.createElement("span");
      zoomValue.className = "media-cropper-zoom-value";
      zoomValue.textContent = "100%";
      zoomRow.appendChild(zoomValue);
      controls.appendChild(zoomRow);
      const sizeRow = document.createElement("div");
      sizeRow.className = "media-cropper-row";
      const widthLabel = document.createElement("label");
      widthLabel.textContent = "Output width";
      const widthInput = document.createElement("input");
      widthInput.type = "number";
      widthInput.min = "64";
      const naturalWidth = Math.round(image.naturalWidth) || Math.round(image.width) || 1024;
      widthInput.max = String(Math.max(64, naturalWidth));
      const presetWidth = Math.round(options.initialWidth || 0);
      const defaultWidth = Math.min(960, naturalWidth || 960);
      widthInput.value = String(presetWidth > 0 ? Math.min(Math.max(64, presetWidth), Math.max(64, naturalWidth)) : defaultWidth);
      widthInput.className = "media-cropper-size-input";
      widthLabel.appendChild(widthInput);
      sizeRow.appendChild(widthLabel);
      const dimensions = document.createElement("span");
      dimensions.className = "media-cropper-dimensions";
      dimensions.textContent = "\xD7";
      sizeRow.appendChild(dimensions);
      controls.appendChild(sizeRow);
      const altRow = document.createElement("div");
      altRow.className = "media-cropper-row";
      const altLabel = document.createElement("label");
      altLabel.textContent = "Alt text";
      const altInput = document.createElement("input");
      altInput.type = "text";
      altInput.placeholder = "Describe the image";
      const defaultAlt = options.initialAlt != null && options.initialAlt !== "" ? options.initialAlt : (file?.name || "").replace(/\.[^.]+$/, "").replace(/[_-]+/g, " ").trim();
      altInput.value = defaultAlt;
      altInput.className = "media-cropper-alt-input";
      altLabel.appendChild(altInput);
      altRow.appendChild(altLabel);
      controls.appendChild(altRow);
      const actions = document.createElement("div");
      actions.className = "media-cropper-actions";
      const cancelBtn = document.createElement("button");
      cancelBtn.type = "button";
      cancelBtn.className = "btn subtle";
      cancelBtn.textContent = "Cancel";
      const confirmBtn = document.createElement("button");
      confirmBtn.type = "button";
      confirmBtn.className = "btn";
      confirmBtn.textContent = "Insert image";
      actions.appendChild(cancelBtn);
      actions.appendChild(confirmBtn);
      dialog.appendChild(actions);
      document.body.appendChild(overlay);
      const ctx = canvas.getContext("2d");
      ctx.imageSmoothingQuality = "high";
      let aspectRatio = naturalRatio;
      let frameWidth = Math.min(DEFAULT_FRAME_WIDTH, presetWidth > 0 ? presetWidth : naturalWidth || DEFAULT_FRAME_WIDTH);
      if (!Number.isFinite(frameWidth) || frameWidth <= 0) frameWidth = DEFAULT_FRAME_WIDTH;
      let frameHeight = Math.max(120, Math.round(frameWidth / aspectRatio));
      let minZoom = 1;
      let zoom = 1;
      let offsetX = 0;
      let offsetY = 0;
      let dragging = false;
      let dragStartX = 0;
      let dragStartY = 0;
      let dragOffsetX = 0;
      let dragOffsetY = 0;
      function focusDefault() {
        requestAnimationFrame(() => {
          altInput.focus({ preventScroll: true });
        });
      }
      function updateCanvasSize() {
        frameHeight = Math.max(120, Math.round(frameWidth / aspectRatio));
        canvas.width = frameWidth;
        canvas.height = frameHeight;
        updateZoomBounds();
      }
      function updateZoomBounds() {
        const widthRatio = frameWidth / (image.naturalWidth || image.width || 1);
        const heightRatio = frameHeight / (image.naturalHeight || image.height || 1);
        const nextMin = sanitizeAspectRatio(Math.max(widthRatio, heightRatio));
        minZoom = nextMin;
        if (!Number.isFinite(zoom) || zoom < minZoom) {
          zoom = minZoom;
        }
        zoomRange.min = String(Math.max(0.1, minZoom));
        zoomRange.max = String(Math.max(minZoom * 4, minZoom + 0.5));
        if (Number(zoomRange.value) < minZoom) {
          zoomRange.value = String(minZoom);
        }
        render();
      }
      function clampOffsets() {
        const scaledWidth = (image.naturalWidth || image.width || frameWidth) * zoom;
        const scaledHeight = (image.naturalHeight || image.height || frameHeight) * zoom;
        const maxOffsetX = Math.max(0, (scaledWidth - frameWidth) / 2);
        const maxOffsetY = Math.max(0, (scaledHeight - frameHeight) / 2);
        offsetX = clamp(offsetX, -maxOffsetX, maxOffsetX);
        offsetY = clamp(offsetY, -maxOffsetY, maxOffsetY);
      }
      function getOutputWidth() {
        const raw = Number(widthInput.value);
        const maxWidth = Math.max(64, naturalWidth);
        if (!Number.isFinite(raw)) return Math.min(maxWidth, 960);
        return clamp(Math.round(raw), 64, maxWidth);
      }
      function updateMeta() {
        const zoomPercent = Math.round(zoom / minZoom * 100);
        zoomValue.textContent = `${zoomPercent}%`;
        const outWidth = getOutputWidth();
        const outHeight = Math.max(1, Math.round(outWidth / aspectRatio));
        dimensions.textContent = `${outWidth} \xD7 ${outHeight}`;
      }
      function render() {
        clampOffsets();
        ctx.fillStyle = "rgba(15, 23, 42, 0.88)";
        ctx.fillRect(0, 0, frameWidth, frameHeight);
        const drawWidth = (image.naturalWidth || image.width || frameWidth) * zoom;
        const drawHeight = (image.naturalHeight || image.height || frameHeight) * zoom;
        const originX = (frameWidth - drawWidth) / 2 + offsetX;
        const originY = (frameHeight - drawHeight) / 2 + offsetY;
        ctx.save();
        ctx.imageSmoothingEnabled = true;
        ctx.imageSmoothingQuality = "high";
        ctx.drawImage(image, originX, originY, drawWidth, drawHeight);
        ctx.restore();
        ctx.strokeStyle = "rgba(148, 163, 184, 0.65)";
        ctx.lineWidth = 1;
        ctx.strokeRect(0.5, 0.5, frameWidth - 1, frameHeight - 1);
        updateMeta();
      }
      function closeDialog(result) {
        window.removeEventListener("keydown", onKeyDown, true);
        overlay.remove();
        resolve(result || null);
      }
      function onKeyDown(event) {
        if (event.key === "Escape") {
          event.preventDefault();
          closeDialog(null);
        }
      }
      ratioSelect.addEventListener("change", () => {
        const selected = ratioOptions.find((opt) => opt.value === ratioSelect.value);
        aspectRatio = sanitizeAspectRatio(selected ? selected.ratio : naturalRatio);
        updateCanvasSize();
        render();
      });
      zoomRange.addEventListener("input", () => {
        const next = Number(zoomRange.value);
        if (!Number.isFinite(next)) return;
        const previous = zoom;
        zoom = Math.max(minZoom, next);
        if (previous > 0) {
          const scale = zoom / previous;
          offsetX *= scale;
          offsetY *= scale;
        }
        render();
      });
      widthInput.addEventListener("input", () => updateMeta());
      let activePointerId = null;
      canvas.style.touchAction = "none";
      canvas.addEventListener("pointerdown", (event) => {
        activePointerId = event.pointerId;
        dragging = true;
        dragStartX = event.clientX;
        dragStartY = event.clientY;
        dragOffsetX = offsetX;
        dragOffsetY = offsetY;
        canvas.classList.add("dragging");
        try {
          canvas.setPointerCapture(event.pointerId);
        } catch (err) {
        }
      });
      const handlePointerEnd = (event) => {
        if (activePointerId !== null && event.pointerId !== activePointerId) return;
        dragging = false;
        canvas.classList.remove("dragging");
        try {
          canvas.releasePointerCapture(event.pointerId);
        } catch (err) {
        }
        activePointerId = null;
      };
      canvas.addEventListener("pointerup", handlePointerEnd);
      canvas.addEventListener("pointerleave", handlePointerEnd);
      canvas.addEventListener("pointermove", (event) => {
        if (!dragging) return;
        const dx = event.clientX - dragStartX;
        const dy = event.clientY - dragStartY;
        offsetX = dragOffsetX + dx;
        offsetY = dragOffsetY + dy;
        render();
      });
      cancelBtn.addEventListener("click", () => closeDialog(null));
      closeBtn.addEventListener("click", () => closeDialog(null));
      confirmBtn.addEventListener("click", () => {
        const exportCanvas = document.createElement("canvas");
        const outWidth = getOutputWidth();
        const outHeight = Math.max(1, Math.round(outWidth / aspectRatio));
        exportCanvas.width = outWidth;
        exportCanvas.height = outHeight;
        const exportCtx = exportCanvas.getContext("2d");
        exportCtx.imageSmoothingEnabled = true;
        exportCtx.imageSmoothingQuality = "high";
        const drawWidth = (image.naturalWidth || image.width || outWidth) * zoom;
        const drawHeight = (image.naturalHeight || image.height || outHeight) * zoom;
        const originX = (frameWidth - drawWidth) / 2 + offsetX;
        const originY = (frameHeight - drawHeight) / 2 + offsetY;
        const cropX = clamp(-originX / zoom, 0, image.naturalWidth || image.width || outWidth);
        const cropY = clamp(-originY / zoom, 0, image.naturalHeight || image.height || outHeight);
        const cropWidth = Math.min(frameWidth / zoom, image.naturalWidth || image.width || outWidth);
        const cropHeight = Math.min(frameHeight / zoom, image.naturalHeight || image.height || outHeight);
        exportCtx.drawImage(
          image,
          cropX,
          cropY,
          cropWidth,
          cropHeight,
          0,
          0,
          exportCanvas.width,
          exportCanvas.height
        );
        const preferredMime = options.mimeType || file?.type || "";
        const mime = /^image\/jpe?g$/i.test(preferredMime) ? "image/jpeg" : /^image\/png$/i.test(preferredMime) ? "image/png" : "image/png";
        const quality = mime === "image/jpeg" ? 0.92 : void 0;
        const dataUrl = toDataUrl(exportCanvas, mime, quality);
        const altText = altInput.value.trim();
        closeDialog({
          dataUrl,
          width: exportCanvas.width,
          height: exportCanvas.height,
          mimeType: mime,
          altText
        });
      });
      window.addEventListener("keydown", onKeyDown, true);
      updateCanvasSize();
      render();
      focusDefault();
    });
  }
  function readFileAsDataUrl(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => resolve(reader.result);
      reader.onerror = () => reject(reader.error || new Error("Failed to read file."));
      try {
        reader.readAsDataURL(file);
      } catch (err) {
        reject(err);
      }
    });
  }

  // js/ui/components/rich-text.js
  var allowedTags = /* @__PURE__ */ new Set([
    "a",
    "b",
    "strong",
    "i",
    "em",
    "u",
    "s",
    "strike",
    "del",
    "mark",
    "span",
    "font",
    "p",
    "div",
    "br",
    "ul",
    "ol",
    "li",
    "img",
    "sub",
    "sup",
    "blockquote",
    "code",
    "pre",
    "hr",
    "video",
    "audio",
    "source",
    "iframe"
  ]);
  var allowedAttributes = {
    "a": ["href", "title", "target", "rel"],
    "img": ["src", "alt", "title", "width", "height"],
    "span": ["style", "data-cloze"],
    "div": ["style"],
    "p": ["style"],
    "font": ["style", "color", "face", "size"],
    "blockquote": ["style"],
    "code": ["style"],
    "pre": ["style"],
    "video": ["src", "controls", "width", "height", "poster", "preload", "loop", "muted", "playsinline"],
    "audio": ["src", "controls", "preload", "loop", "muted"],
    "source": ["src", "type"],
    "iframe": ["src", "title", "width", "height", "allow", "allowfullscreen", "frameborder"]
  };
  var allowedStyles = /* @__PURE__ */ new Set([
    "color",
    "background-color",
    "font-size",
    "font-family",
    "font-weight",
    "font-style",
    "text-decoration-line",
    "text-decoration",
    "text-decoration-color",
    "text-decoration-style",
    "text-align"
  ]);
  var RICH_TEXT_CACHE_LIMIT = 400;
  var richTextCache = /* @__PURE__ */ new Map();
  var richTextCacheKeys = [];
  function escapeHtml2(str = "") {
    return str.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#39;");
  }
  var htmlEntityDecoder = typeof document !== "undefined" ? document.createElement("textarea") : null;
  function decodeHtmlEntities(str = "") {
    if (!str) return "";
    if (!htmlEntityDecoder) return String(str);
    htmlEntityDecoder.innerHTML = str;
    return htmlEntityDecoder.value;
  }
  function isSafeUrl(value = "", { allowData = false, requireHttps = false } = {}) {
    const trimmed = value.trim();
    if (!trimmed) return false;
    if (/^javascript:/i.test(trimmed)) return false;
    if (!allowData && /^data:/i.test(trimmed)) return false;
    if (/^blob:/i.test(trimmed)) return true;
    if (requireHttps) {
      if (trimmed.startsWith("//")) return true;
      if (trimmed.startsWith("/") || trimmed.startsWith("./") || trimmed.startsWith("../")) return true;
      if (/^https:/i.test(trimmed)) return true;
      return false;
    }
    return true;
  }
  function cleanStyles(node) {
    const style = node.getAttribute("style");
    if (!style) return;
    const cleaned = style.split(";").map((part) => part.trim()).filter(Boolean).map((part) => {
      const [rawProp, ...valueParts] = part.split(":");
      if (!rawProp || !valueParts.length) return null;
      const prop = rawProp.trim().toLowerCase();
      if (!allowedStyles.has(prop)) return null;
      return `${prop}: ${valueParts.join(":").trim()}`;
    }).filter(Boolean).join("; ");
    if (cleaned) node.setAttribute("style", cleaned);
    else node.removeAttribute("style");
  }
  function sanitizeNode(node) {
    if (node.nodeType === Node.TEXT_NODE) return;
    if (node.nodeType === Node.COMMENT_NODE) {
      node.remove();
      return;
    }
    const tag = node.tagName?.toLowerCase();
    if (!tag) return;
    if (!allowedTags.has(tag)) {
      if (node.childNodes.length) {
        const parent = node.parentNode;
        while (node.firstChild) parent.insertBefore(node.firstChild, node);
        node.remove();
      } else {
        node.remove();
      }
      return;
    }
    const attrs = Array.from(node.attributes || []);
    const allowList = allowedAttributes[tag] || [];
    attrs.forEach((attr) => {
      const name = attr.name.toLowerCase();
      if (name === "style") {
        cleanStyles(node);
        return;
      }
      if (!allowList.includes(name)) {
        node.removeAttribute(attr.name);
        return;
      }
      if (tag === "a" && name === "href") {
        const value = attr.value.trim();
        if (!value || value.startsWith("javascript:")) {
          node.removeAttribute(attr.name);
        } else {
          node.setAttribute("target", "_blank");
          node.setAttribute("rel", "noopener noreferrer");
        }
      }
      if (name === "src" && ["img", "video", "audio", "source", "iframe"].includes(tag)) {
        const allowData = tag === "img";
        const requireHttps = tag === "iframe";
        if (!isSafeUrl(attr.value || "", { allowData, requireHttps })) {
          node.removeAttribute(attr.name);
        }
      }
    });
    Array.from(node.childNodes).forEach(sanitizeNode);
  }
  var CLOZE_ATTR = "data-cloze";
  var CLOZE_VALUE = "true";
  var CLOZE_SELECTOR = `[${CLOZE_ATTR}="${CLOZE_VALUE}"]`;
  function createClozeSpan(content) {
    const span = document.createElement("span");
    span.setAttribute(CLOZE_ATTR, CLOZE_VALUE);
    span.textContent = content;
    return span;
  }
  function upgradeClozeSyntax(root) {
    if (!root) return;
    const braceRegex = /\{([^{}]+)\}/g;
    const walker = document.createTreeWalker(
      root,
      NodeFilter.SHOW_TEXT,
      {
        acceptNode: (node) => {
          if (!node?.nodeValue || node.nodeValue.indexOf("{") === -1) {
            return NodeFilter.FILTER_SKIP;
          }
          if (node.parentElement?.closest(CLOZE_SELECTOR)) {
            return NodeFilter.FILTER_SKIP;
          }
          return NodeFilter.FILTER_ACCEPT;
        }
      }
    );
    const targets = [];
    while (walker.nextNode()) targets.push(walker.currentNode);
    targets.forEach((node) => {
      const text = node.nodeValue || "";
      let match;
      braceRegex.lastIndex = 0;
      let lastIndex = 0;
      let replaced = false;
      const fragment = document.createDocumentFragment();
      while (match = braceRegex.exec(text)) {
        const before = text.slice(lastIndex, match.index);
        if (before) fragment.appendChild(document.createTextNode(before));
        const inner = match[1];
        const trimmed = inner.trim();
        if (trimmed) {
          fragment.appendChild(createClozeSpan(trimmed));
          replaced = true;
        } else {
          fragment.appendChild(document.createTextNode(match[0]));
        }
        lastIndex = match.index + match[0].length;
      }
      if (!replaced) return;
      const after = text.slice(lastIndex);
      if (after) fragment.appendChild(document.createTextNode(after));
      const parent = node.parentNode;
      if (!parent) return;
      parent.insertBefore(fragment, node);
      parent.removeChild(node);
    });
  }
  function sanitizeHtml(html = "") {
    const template = document.createElement("template");
    template.innerHTML = html;
    Array.from(template.content.childNodes).forEach(sanitizeNode);
    upgradeClozeSyntax(template.content);
    return template.innerHTML;
  }
  function sanitizeToPlainText(html = "") {
    if (!html) return "";
    const template = document.createElement("template");
    template.innerHTML = sanitizeHtml(html);
    const text = template.content.textContent || "";
    return text.replace(/\u00a0/g, " ");
  }
  function htmlToPlainText(html = "") {
    return sanitizeToPlainText(html);
  }
  function normalizeInput(value = "") {
    if (value == null) return "";
    const str = String(value);
    if (!str) return "";
    const looksHtml = /<([a-z][^>]*>)/i.test(str);
    if (looksHtml) return sanitizeHtml(str);
    const decoded = decodeHtmlEntities(str);
    return sanitizeHtml(escapeHtml2(decoded).replace(/\r?\n/g, "<br>"));
  }
  var FONT_SIZE_VALUES = [10, 12, 14, 16, 18, 20, 22, 24, 28, 32, 36, 40, 48];
  var FONT_OPTIONS = [
    { value: "", label: "Default" },
    { value: '"Inter", "Segoe UI", sans-serif', label: "Modern Sans" },
    { value: '"Helvetica Neue", Arial, sans-serif', label: "Classic Sans" },
    { value: '"Times New Roman", Times, serif', label: "Serif" },
    { value: '"Source Code Pro", Menlo, monospace', label: "Monospace" },
    { value: '"Comic Neue", "Comic Sans MS", cursive', label: "Handwriting" }
  ];
  function isEmptyHtml(html = "") {
    if (!html) return true;
    const template = document.createElement("template");
    template.innerHTML = html;
    const hasMedia = template.content.querySelector("img,video,audio,iframe");
    const text = template.content.textContent?.replace(/\u00a0/g, " ").trim();
    return !hasMedia && !text;
  }
  function createToolbarButton(label, title, onClick) {
    const btn = document.createElement("button");
    btn.type = "button";
    btn.className = "rich-editor-btn";
    btn.textContent = label;
    btn.title = title;
    btn.setAttribute("aria-label", title);
    btn.dataset.toggle = "true";
    btn.dataset.active = "false";
    btn.setAttribute("aria-pressed", "false");
    btn.addEventListener("mousedown", (e) => e.preventDefault());
    btn.addEventListener("click", onClick);
    return btn;
  }
  function createRichTextEditor({ value = "", onChange, ariaLabel, ariaLabelledBy } = {}) {
    const wrapper = document.createElement("div");
    wrapper.className = "rich-editor";
    const toolbar = document.createElement("div");
    toolbar.className = "rich-editor-toolbar";
    toolbar.setAttribute("role", "toolbar");
    toolbar.setAttribute("aria-label", "Text formatting toolbar");
    wrapper.appendChild(toolbar);
    const imageFileInput = document.createElement("input");
    imageFileInput.type = "file";
    imageFileInput.accept = "image/*";
    imageFileInput.style.display = "none";
    wrapper.appendChild(imageFileInput);
    const mediaFileInput = document.createElement("input");
    mediaFileInput.type = "file";
    mediaFileInput.accept = "video/*,audio/*";
    mediaFileInput.style.display = "none";
    wrapper.appendChild(mediaFileInput);
    let pendingImageTarget = null;
    let activeImageEditor = null;
    function loadImageDimensions(dataUrl) {
      return new Promise((resolve, reject) => {
        const image = new Image();
        image.onload = () => {
          resolve({
            width: image.naturalWidth || image.width || 0,
            height: image.naturalHeight || image.height || 0
          });
        };
        image.onerror = () => reject(new Error("Failed to load image preview."));
        image.src = dataUrl;
      });
    }
    function sanitizeImageDimension(value2) {
      if (!Number.isFinite(value2)) return null;
      const MIN_SIZE = 32;
      const MAX_SIZE = 4096;
      const clamped = Math.max(MIN_SIZE, Math.min(MAX_SIZE, Math.round(value2)));
      return clamped > 0 ? clamped : null;
    }
    async function insertImageFile(file, targetImage = null) {
      if (!(file instanceof File)) return;
      try {
        const dataUrl = await readFileAsDataUrl(file);
        if (!dataUrl) return;
        let dimensions = { width: null, height: null };
        try {
          dimensions = await loadImageDimensions(dataUrl);
        } catch (err) {
          dimensions = { width: null, height: null };
        }
        const width = sanitizeImageDimension(dimensions.width);
        const height = sanitizeImageDimension(dimensions.height);
        const defaultAlt = (file.name || "").replace(/\.[^.]+$/, "").replace(/[_-]+/g, " ").trim();
        if (targetImage && wrapper.contains(targetImage)) {
          const existingAlt = targetImage.getAttribute("alt") || "";
          const altText = existingAlt.trim() || defaultAlt;
          targetImage.src = dataUrl;
          if (altText) {
            targetImage.setAttribute("alt", altText);
          } else {
            targetImage.removeAttribute("alt");
          }
          setImageSize(targetImage, width, height);
          triggerEditorChange();
          if (activeImageEditor && activeImageEditor.image === targetImage && typeof activeImageEditor.update === "function") {
            requestAnimationFrame(() => activeImageEditor.update());
          }
        } else {
          const safeAlt = defaultAlt ? escapeHtml2(defaultAlt) : "";
          const altAttr = safeAlt ? ` alt="${safeAlt}"` : "";
          const widthAttr = width ? ` width="${width}"` : "";
          const heightAttr = height ? ` height="${height}"` : "";
          const html = `<img src="${dataUrl}"${widthAttr}${heightAttr}${altAttr}>`;
          insertHtml(html);
        }
      } catch (err) {
        console.error("Failed to upload image", err);
      }
    }
    async function insertMediaFile(file) {
      try {
        const dataUrl = await readFileAsDataUrl(file);
        if (!dataUrl) return;
        const isAudio = file.type?.startsWith("audio/");
        if (isAudio) {
          insertHtml(`<audio controls preload="metadata" src="${dataUrl}"></audio>`);
        } else {
          insertHtml(`<video controls preload="metadata" src="${dataUrl}" width="640"></video>`);
        }
      } catch (err) {
        console.error("Failed to add media file", err);
      }
    }
    imageFileInput.addEventListener("change", () => {
      const file = imageFileInput.files?.[0];
      const target = pendingImageTarget;
      pendingImageTarget = null;
      if (file) insertImageFile(file, target);
      imageFileInput.value = "";
    });
    mediaFileInput.addEventListener("change", () => {
      const file = mediaFileInput.files?.[0];
      if (file) insertMediaFile(file);
      mediaFileInput.value = "";
    });
    const editable = document.createElement("div");
    editable.className = "rich-editor-area input";
    editable.contentEditable = "true";
    editable.spellcheck = true;
    editable.innerHTML = normalizeInput(value);
    if (ariaLabel) editable.setAttribute("aria-label", ariaLabel);
    if (ariaLabelledBy) editable.setAttribute("aria-labelledby", ariaLabelledBy);
    wrapper.appendChild(editable);
    editable.addEventListener("paste", (event) => {
      if (!event.clipboardData) return;
      const files = Array.from(event.clipboardData.files || []);
      const imageFile = files.find((file) => file && file.type && file.type.startsWith("image/")) || null;
      if (imageFile) {
        event.preventDefault();
        void insertImageFile(imageFile);
        return;
      }
      const mediaFile = files.find((file) => file && file.type && (file.type.startsWith("video/") || file.type.startsWith("audio/")));
      if (mediaFile) {
        event.preventDefault();
        void insertMediaFile(mediaFile);
        return;
      }
      const html = event.clipboardData.getData("text/html");
      let text = event.clipboardData.getData("text/plain");
      if (!text && html) {
        text = sanitizeToPlainText(html);
      }
      event.preventDefault();
      insertPlainText(text || "");
    });
    function triggerEditorChange() {
      editable.dispatchEvent(new Event("input", { bubbles: true }));
    }
    function setImageSize(image, width, height) {
      if (!(image instanceof HTMLImageElement)) return;
      const MIN_SIZE = 32;
      const MAX_SIZE = 4096;
      const widthValue = Number.isFinite(width) ? Math.max(MIN_SIZE, Math.min(MAX_SIZE, Math.round(width))) : null;
      const heightValue = Number.isFinite(height) ? Math.max(MIN_SIZE, Math.min(MAX_SIZE, Math.round(height))) : null;
      if (widthValue) {
        image.style.width = `${widthValue}px`;
        image.setAttribute("width", String(widthValue));
      } else {
        image.style.removeProperty("width");
        image.removeAttribute("width");
      }
      if (heightValue) {
        image.style.height = `${heightValue}px`;
        image.setAttribute("height", String(heightValue));
      } else {
        image.style.removeProperty("height");
        image.removeAttribute("height");
      }
    }
    function destroyActiveImageEditor() {
      if (activeImageEditor && typeof activeImageEditor.destroy === "function") {
        activeImageEditor.destroy();
      }
      activeImageEditor = null;
    }
    function beginImageEditing(image) {
      if (!(image instanceof HTMLImageElement)) return;
      if (!wrapper.contains(image)) return;
      if (activeImageEditor && activeImageEditor.image === image) {
        if (typeof activeImageEditor.update === "function") {
          requestAnimationFrame(() => activeImageEditor.update());
        }
        return;
      }
      destroyActiveImageEditor();
      activeImageEditor = createImageEditor(image);
      if (activeImageEditor && typeof activeImageEditor.update === "function") {
        requestAnimationFrame(() => activeImageEditor.update());
      }
    }
    function createImageEditor(image) {
      const overlay = document.createElement("div");
      overlay.className = "rich-editor-image-overlay";
      overlay.setAttribute("aria-hidden", "true");
      const toolbar2 = document.createElement("div");
      toolbar2.className = "rich-editor-image-toolbar";
      const cropBtn = document.createElement("button");
      cropBtn.type = "button";
      cropBtn.className = "rich-editor-image-tool";
      cropBtn.textContent = "Crop";
      const replaceBtn = document.createElement("button");
      replaceBtn.type = "button";
      replaceBtn.className = "rich-editor-image-tool";
      replaceBtn.textContent = "Replace";
      const doneBtn = document.createElement("button");
      doneBtn.type = "button";
      doneBtn.className = "rich-editor-image-tool rich-editor-image-tool--primary";
      doneBtn.textContent = "Done";
      toolbar2.append(cropBtn, replaceBtn, doneBtn);
      overlay.appendChild(toolbar2);
      const handleDefs = [
        { name: "se", axis: "both", label: "Resize from corner" },
        { name: "e", axis: "x", label: "Resize width" },
        { name: "s", axis: "y", label: "Resize height" }
      ];
      let resizeState = null;
      const onPointerMove = (event) => {
        if (!resizeState) return;
        event.preventDefault();
        const dx = event.clientX - resizeState.startX;
        const dy = event.clientY - resizeState.startY;
        let nextWidth = resizeState.startWidth;
        let nextHeight = resizeState.startHeight;
        if (resizeState.axis === "both" || resizeState.axis === "x") {
          nextWidth = resizeState.startWidth + dx;
        }
        if (resizeState.axis === "both" || resizeState.axis === "y") {
          nextHeight = resizeState.startHeight + dy;
        }
        if (resizeState.keepRatio && resizeState.ratio > 0) {
          if (resizeState.axis === "x") {
            nextHeight = nextWidth / resizeState.ratio;
          } else if (resizeState.axis === "y") {
            nextWidth = nextHeight * resizeState.ratio;
          } else {
            if (Math.abs(dx) >= Math.abs(dy)) {
              nextHeight = nextWidth / resizeState.ratio;
            } else {
              nextWidth = nextHeight * resizeState.ratio;
            }
          }
        }
        setImageSize(image, nextWidth, nextHeight);
        requestAnimationFrame(() => update());
      };
      const stopResize = () => {
        if (!resizeState) return;
        window.removeEventListener("pointermove", onPointerMove);
        window.removeEventListener("pointerup", stopResize);
        window.removeEventListener("pointercancel", stopResize);
        if (resizeState.handle && resizeState.pointerId != null) {
          try {
            resizeState.handle.releasePointerCapture(resizeState.pointerId);
          } catch (err) {
          }
        }
        overlay.classList.remove("is-resizing");
        resizeState = null;
        triggerEditorChange();
        requestAnimationFrame(() => update());
      };
      handleDefs.forEach((def) => {
        const handle = document.createElement("button");
        handle.type = "button";
        handle.className = `rich-editor-image-handle rich-editor-image-handle--${def.name}`;
        handle.setAttribute("aria-label", def.label);
        handle.addEventListener("pointerdown", (event) => {
          event.preventDefault();
          event.stopPropagation();
          const rect = image.getBoundingClientRect();
          resizeState = {
            axis: def.axis,
            startX: event.clientX,
            startY: event.clientY,
            startWidth: rect.width,
            startHeight: rect.height,
            ratio: rect.height > 0 ? rect.width / rect.height : 1,
            keepRatio: event.shiftKey,
            pointerId: event.pointerId,
            handle
          };
          overlay.classList.add("is-resizing");
          try {
            handle.setPointerCapture(event.pointerId);
          } catch (err) {
          }
          window.addEventListener("pointermove", onPointerMove);
          window.addEventListener("pointerup", stopResize);
          window.addEventListener("pointercancel", stopResize);
        });
        overlay.appendChild(handle);
      });
      wrapper.appendChild(overlay);
      image.classList.add("rich-editor-image-active");
      const update = () => {
        if (!document.body.contains(image)) {
          destroy();
          return;
        }
        const rect = image.getBoundingClientRect();
        const wrapperRect = wrapper.getBoundingClientRect();
        overlay.style.width = `${rect.width}px`;
        overlay.style.height = `${rect.height}px`;
        overlay.style.left = `${rect.left - wrapperRect.left}px`;
        overlay.style.top = `${rect.top - wrapperRect.top}px`;
      };
      const onScroll = () => update();
      const onKeyDown = (event) => {
        if (event.key === "Escape") {
          event.preventDefault();
          destroy();
        }
      };
      const handleOutside = (event) => {
        if (event.target === image) return;
        if (overlay.contains(event.target)) return;
        destroy();
      };
      const resizeObserver = typeof ResizeObserver === "function" ? new ResizeObserver(() => update()) : null;
      if (resizeObserver) {
        try {
          resizeObserver.observe(image);
        } catch (err) {
        }
      }
      const destroy = () => {
        if (resizeObserver) resizeObserver.disconnect();
        document.removeEventListener("scroll", onScroll, true);
        editable.removeEventListener("scroll", onScroll);
        window.removeEventListener("resize", update);
        document.removeEventListener("mousedown", handleOutside, true);
        document.removeEventListener("keydown", onKeyDown, true);
        stopResize();
        overlay.remove();
        image.classList.remove("rich-editor-image-active");
        if (pendingImageTarget === image) pendingImageTarget = null;
      };
      cropBtn.addEventListener("click", async () => {
        try {
          const currentWidth = Number(image.getAttribute("width")) || Math.round(image.getBoundingClientRect().width);
          const currentHeight = Number(image.getAttribute("height")) || Math.round(image.getBoundingClientRect().height);
          const alt = image.getAttribute("alt") || "";
          const result = await editImageSource(image.src, { altText: alt, width: currentWidth, height: currentHeight });
          if (!result) return;
          image.src = result.dataUrl;
          if (result.altText) {
            image.setAttribute("alt", result.altText);
          } else {
            image.removeAttribute("alt");
          }
          setImageSize(image, result.width, result.height);
          triggerEditorChange();
          requestAnimationFrame(() => update());
        } catch (err) {
          console.error("Failed to edit image", err);
        }
      });
      replaceBtn.addEventListener("click", () => {
        pendingImageTarget = image;
        imageFileInput.click();
      });
      doneBtn.addEventListener("click", () => {
        destroyActiveImageEditor();
      });
      document.addEventListener("scroll", onScroll, true);
      editable.addEventListener("scroll", onScroll);
      window.addEventListener("resize", update);
      document.addEventListener("mousedown", handleOutside, true);
      document.addEventListener("keydown", onKeyDown, true);
      return {
        image,
        update,
        destroy
      };
    }
    const commandButtons = [];
    let sizeSelect = null;
    let fontSelect = null;
    let fontNameLabel = null;
    let fontSizeLabel = null;
    let clozeButton = null;
    function focusEditor() {
      editable.focus({ preventScroll: false });
    }
    let savedRange = null;
    let suppressSelectionCapture = false;
    function rangeWithinEditor(range, { allowCollapsed = true } = {}) {
      if (!range) return false;
      if (!allowCollapsed && range.collapsed) return false;
      const { startContainer, endContainer } = range;
      if (!startContainer || !endContainer) return false;
      return editable.contains(startContainer) && editable.contains(endContainer);
    }
    function captureSelectionRange() {
      if (suppressSelectionCapture) return;
      const selection = window.getSelection();
      if (!selection?.rangeCount) return;
      const range = selection.getRangeAt(0);
      if (!rangeWithinEditor(range)) return;
      savedRange = range.cloneRange();
    }
    function getSavedRange({ requireSelection = false } = {}) {
      if (!savedRange) return null;
      return rangeWithinEditor(savedRange, { allowCollapsed: !requireSelection }) ? savedRange : null;
    }
    function restoreSavedRange({ requireSelection = false } = {}) {
      const range = getSavedRange({ requireSelection });
      if (!range) return false;
      const selection = window.getSelection();
      if (!selection) return false;
      selection.removeAllRanges();
      const clone6 = range.cloneRange();
      selection.addRange(clone6);
      savedRange = clone6.cloneRange();
      return true;
    }
    function runCommand(action, { requireSelection = false } = {}) {
      const existing = getSavedRange({ requireSelection });
      if (!existing) return false;
      const preservedRange = existing.cloneRange();
      let restored = false;
      suppressSelectionCapture = true;
      try {
        focusEditor();
        savedRange = preservedRange.cloneRange();
        restored = restoreSavedRange({ requireSelection });
      } finally {
        suppressSelectionCapture = false;
      }
      if (!restored) return false;
      let inputFired = false;
      const handleInput = () => {
        inputFired = true;
      };
      editable.addEventListener("input", handleInput, { once: true });
      const result = action();
      editable.removeEventListener("input", handleInput);
      captureSelectionRange();
      if (!inputFired) {
        editable.dispatchEvent(new Event("input", { bubbles: true }));
      }
      updateInlineState();
      return result;
    }
    function exec(command, arg = null, { requireSelection = false, styleWithCss = true } = {}) {
      return runCommand(() => {
        let previousStyleWithCss = null;
        try {
          previousStyleWithCss = document.queryCommandState("styleWithCSS");
        } catch (err) {
          previousStyleWithCss = null;
        }
        try {
          document.execCommand("styleWithCSS", false, styleWithCss);
          return document.execCommand(command, false, arg);
        } finally {
          if (previousStyleWithCss !== null) {
            document.execCommand("styleWithCSS", false, previousStyleWithCss);
          }
        }
      }, { requireSelection });
    }
    function insertPlainText(text) {
      if (text == null) return;
      const normalized2 = String(text).replace(/\r\n/g, "\n");
      runCommand(() => {
        const ok = document.execCommand("insertText", false, normalized2);
        if (ok === false) {
          const html = escapeHtml2(normalized2).replace(/\n/g, "<br>");
          document.execCommand("insertHTML", false, html);
        }
      });
    }
    function insertHtml(html) {
      if (!html) return;
      runCommand(() => document.execCommand("insertHTML", false, html));
    }
    function selectionWithinEditor({ allowCollapsed = true } = {}) {
      const selection = window.getSelection();
      if (!selection || selection.rangeCount === 0) return false;
      if (!allowCollapsed && selection.isCollapsed) return false;
      const anchor = selection.anchorNode;
      const focus = selection.focusNode;
      if (!anchor || !focus) return false;
      return editable.contains(anchor) && editable.contains(focus);
    }
    function hasActiveSelection() {
      return Boolean(getSavedRange({ requireSelection: true }));
    }
    function collapsedInlineState() {
      const selection = window.getSelection();
      if (!selection?.anchorNode) return null;
      let node = selection.anchorNode;
      const state2 = { bold: false, italic: false, underline: false, strike: false };
      const applyFromElement = (el) => {
        const tag = el.tagName?.toLowerCase();
        if (tag === "b" || tag === "strong") state2.bold = true;
        if (tag === "i" || tag === "em") state2.italic = true;
        if (tag === "u") state2.underline = true;
        if (tag === "s" || tag === "strike" || tag === "del") state2.strike = true;
        if (el instanceof Element) {
          const inlineStyle = el.style;
          if (inlineStyle) {
            if (!state2.bold) {
              const weightRaw = inlineStyle.fontWeight || "";
              const weightText = typeof weightRaw === "string" ? weightRaw.toLowerCase() : `${weightRaw}`.toLowerCase();
              const weightValue = Number.parseInt(weightText, 10);
              if (weightText === "bold" || weightText === "bolder" || Number.isFinite(weightValue) && weightValue >= 600) {
                state2.bold = true;
              }
            }
            if (!state2.italic && inlineStyle.fontStyle === "italic") state2.italic = true;
            const deco = `${inlineStyle.textDecorationLine || inlineStyle.textDecoration || ""}`.toLowerCase();
            if (!state2.underline && deco.includes("underline")) state2.underline = true;
            if (!state2.strike && (deco.includes("line-through") || deco.includes("strikethrough"))) state2.strike = true;
          }
        }
      };
      while (node && node !== editable) {
        if (node.nodeType === Node.TEXT_NODE) {
          node = node.parentNode;
          continue;
        }
        if (!(node instanceof Element)) {
          node = node.parentNode;
          continue;
        }
        applyFromElement(node);
        node = node.parentNode;
      }
      return state2;
    }
    function updateInlineState() {
      const inEditor = selectionWithinEditor();
      const selection = window.getSelection();
      const collapsed = Boolean(selection?.isCollapsed);
      const collapsedState = inEditor && collapsed ? collapsedInlineState() : null;
      commandButtons.forEach(({ btn, command, stateKey }) => {
        let active = false;
        if (inEditor) {
          if (collapsed && collapsedState && stateKey) {
            active = collapsedState[stateKey];
          } else {
            try {
              active = document.queryCommandState(command);
            } catch (err) {
              active = false;
            }
          }
        }
        const isActive = Boolean(active);
        btn.classList.toggle("is-active", isActive);
        btn.dataset.active = isActive ? "true" : "false";
        btn.setAttribute("aria-pressed", isActive ? "true" : "false");
      });
      const style = inEditor ? computeSelectionStyle() : null;
      updateTypographyState(style);
      if (clozeButton) {
        const saved = getSavedRange({ requireSelection: false });
        const startNode = saved?.startContainer || null;
        const endNode = saved?.endContainer || null;
        const startCloze = startNode ? findClozeAncestor(startNode) : null;
        const endCloze = endNode ? findClozeAncestor(endNode) : null;
        const active = Boolean(startCloze && startCloze === endCloze);
        clozeButton.classList.toggle("is-active", active);
        clozeButton.dataset.active = active ? "true" : "false";
        clozeButton.setAttribute("aria-pressed", active ? "true" : "false");
      }
    }
    function styleForNode(node) {
      let current = node;
      while (current && current !== editable) {
        if (current instanceof Element) {
          return window.getComputedStyle(current);
        }
        current = current.parentNode;
      }
      if (editable instanceof Element) {
        return window.getComputedStyle(editable);
      }
      return null;
    }
    function computeSelectionStyle() {
      const selection = window.getSelection();
      if (!selection || selection.rangeCount === 0) return null;
      if (selection.isCollapsed) {
        return styleForNode(selection.anchorNode);
      }
      const range = selection.getRangeAt(0);
      const startStyle = styleForNode(range.startContainer);
      if (startStyle) return startStyle;
      const endStyle = styleForNode(range.endContainer);
      if (endStyle) return endStyle;
      return styleForNode(range.commonAncestorContainer);
    }
    function findClozeAncestor(node) {
      let current = node;
      while (current && current !== editable) {
        if (current instanceof HTMLElement && current.getAttribute?.(CLOZE_ATTR) === CLOZE_VALUE) {
          return current;
        }
        current = current.parentNode;
      }
      return null;
    }
    function unwrapClozeElement(element) {
      const parent = element.parentNode;
      if (!parent) return;
      const selection = window.getSelection();
      const range = document.createRange();
      let firstChild = null;
      let lastChild = null;
      while (element.firstChild) {
        const child = element.firstChild;
        parent.insertBefore(child, element);
        if (!firstChild) firstChild = child;
        lastChild = child;
      }
      const nextSibling = element.nextSibling;
      parent.removeChild(element);
      if (firstChild && lastChild) {
        range.setStartBefore(firstChild);
        range.setEndAfter(lastChild);
      } else {
        const index = Array.prototype.indexOf.call(parent.childNodes, nextSibling);
        range.setStart(parent, index >= 0 ? index : parent.childNodes.length);
        range.collapse(true);
      }
      if (selection) {
        selection.removeAllRanges();
        selection.addRange(range);
      }
    }
    function toggleClozeFormatting() {
      const range = getSavedRange({ requireSelection: false });
      if (!range) return;
      const startCloze = findClozeAncestor(range.startContainer);
      const endCloze = findClozeAncestor(range.endContainer);
      if (startCloze && startCloze === endCloze) {
        runCommand(() => {
          unwrapClozeElement(startCloze);
        });
        return;
      }
      if (range.collapsed) return;
      runCommand(() => {
        const selection = window.getSelection();
        if (!selection?.rangeCount) return;
        const activeRange = selection.getRangeAt(0);
        const fragment = activeRange.extractContents();
        const span = document.createElement("span");
        span.setAttribute(CLOZE_ATTR, CLOZE_VALUE);
        span.appendChild(fragment);
        activeRange.insertNode(span);
        selection.removeAllRanges();
        const newRange = document.createRange();
        newRange.selectNode(span);
        selection.addRange(newRange);
      }, { requireSelection: true });
    }
    function formatFontFamily(value2 = "") {
      if (!value2) return "Default";
      const primary = value2.split(",")[0] || value2;
      return primary.replace(/^['"]+|['"]+$/g, "").trim() || "Default";
    }
    function updateTypographyState(style) {
      if (!fontNameLabel || !fontSizeLabel || !sizeSelect) return;
      const editingSize = document.activeElement === sizeSelect;
      const editingFont = document.activeElement === fontSelect;
      if (!style) {
        fontNameLabel.textContent = "Font: Default";
        fontSizeLabel.textContent = "Size: \u2014";
        if (!editingFont && fontSelect) {
          fontSelect.value = "";
        }
        if (!editingSize) {
          sizeSelect.value = "";
          if (sizeSelect) delete sizeSelect.dataset.customValue;
        }
        return;
      }
      const family = formatFontFamily(style.fontFamily || "");
      const sizeText = style.fontSize || "";
      fontNameLabel.textContent = `Font: ${family}`;
      fontSizeLabel.textContent = `Size: ${sizeText || "\u2014"}`;
      if (!editingFont && fontSelect) {
        const normalized2 = (style.fontFamily || "").trim().toLowerCase();
        const match = FONT_OPTIONS.find((option) => option.value.trim().toLowerCase() === normalized2);
        if (match) {
          fontSelect.value = match.value;
        } else if (normalized2) {
          fontSelect.value = "custom";
          fontSelect.dataset.customValue = style.fontFamily || "";
        } else {
          fontSelect.value = "";
        }
      }
      if (!editingSize) {
        const numeric = Number.parseFloat(sizeText);
        if (Number.isFinite(numeric)) {
          const rounded = Math.round(numeric);
          const optionMatch = FONT_SIZE_VALUES.find((val) => val === rounded);
          if (optionMatch) {
            sizeSelect.value = String(optionMatch);
          } else {
            sizeSelect.value = "custom";
            sizeSelect.dataset.customValue = String(rounded);
          }
        } else {
          sizeSelect.value = "";
          delete sizeSelect.dataset.customValue;
        }
      }
    }
    function collectElementsInRange(range) {
      const elements = [];
      if (!range) return elements;
      const walker = document.createTreeWalker(
        editable,
        NodeFilter.SHOW_ELEMENT,
        {
          acceptNode: (node) => {
            try {
              return range.intersectsNode(node) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
            } catch (err) {
              return NodeFilter.FILTER_SKIP;
            }
          }
        }
      );
      while (walker.nextNode()) {
        elements.push(walker.currentNode);
      }
      return elements;
    }
    function removeFontSizeFromRange(range) {
      const elements = collectElementsInRange(range);
      elements.forEach((node) => {
        if (!(node instanceof HTMLElement)) return;
        if (node.style && node.style.fontSize) {
          node.style.removeProperty("font-size");
          if (!node.style.length) node.removeAttribute("style");
        }
        if (node.tagName?.toLowerCase() === "font") {
          const parent = node.parentNode;
          if (!parent) return;
          while (node.firstChild) parent.insertBefore(node.firstChild, node);
          parent.removeChild(node);
        }
      });
    }
    function removeFontFamilyFromRange(range) {
      const elements = collectElementsInRange(range);
      elements.forEach((node) => {
        if (!(node instanceof HTMLElement)) return;
        if (node.style && node.style.fontFamily) {
          node.style.removeProperty("font-family");
          if (!node.style.length) node.removeAttribute("style");
        }
        if (node.tagName?.toLowerCase() === "font") {
          const parent = node.parentNode;
          if (!parent) return;
          while (node.firstChild) parent.insertBefore(node.firstChild, node);
          parent.removeChild(node);
        }
      });
    }
    function applyFontSizeValue(value2) {
      runCommand(() => {
        const selection = window.getSelection();
        if (!selection?.rangeCount) return;
        const range = selection.getRangeAt(0);
        removeFontSizeFromRange(range);
        const numeric = Number.parseFloat(value2);
        const hasSize = Number.isFinite(numeric) && numeric > 0;
        if (!hasSize) {
          return;
        }
        document.execCommand("styleWithCSS", false, true);
        document.execCommand("fontSize", false, 4);
        const fonts = editable.querySelectorAll("font");
        fonts.forEach((node) => {
          const parent = node.parentNode;
          if (!parent) return;
          const span = document.createElement("span");
          span.style.fontSize = `${numeric}px`;
          while (node.firstChild) span.appendChild(node.firstChild);
          parent.replaceChild(span, node);
        });
      }, { requireSelection: true });
    }
    function applyFontFamilyValue(value2) {
      runCommand(() => {
        const selection = window.getSelection();
        if (!selection?.rangeCount) return;
        const range = selection.getRangeAt(0);
        removeFontFamilyFromRange(range);
        const trimmed = typeof value2 === "string" ? value2.trim() : "";
        if (!trimmed) {
          return;
        }
        document.execCommand("styleWithCSS", false, true);
        document.execCommand("fontName", false, trimmed);
        const fonts = editable.querySelectorAll("font");
        fonts.forEach((node) => {
          const parent = node.parentNode;
          if (!parent) return;
          const span = document.createElement("span");
          span.style.fontFamily = trimmed;
          while (node.firstChild) span.appendChild(node.firstChild);
          parent.replaceChild(span, node);
        });
      }, { requireSelection: true });
    }
    function createGroup(extraClass) {
      const group = document.createElement("div");
      group.className = "rich-editor-group";
      if (extraClass) group.classList.add(extraClass);
      toolbar.appendChild(group);
      return group;
    }
    const inlineGroup = createGroup();
    [
      ["B", "Bold", "bold", "bold"],
      ["I", "Italic", "italic", "italic"],
      ["U", "Underline", "underline", "underline"],
      ["S", "Strikethrough", "strikeThrough", "strike"]
    ].forEach(([label, title, command, stateKey]) => {
      const btn = createToolbarButton(label, title, () => exec(command));
      btn.dataset.command = command;
      commandButtons.push({ btn, command, stateKey });
      inlineGroup.appendChild(btn);
    });
    const colorWrap = document.createElement("label");
    colorWrap.className = "rich-editor-color";
    colorWrap.title = "Text color";
    const colorInput = document.createElement("input");
    colorInput.type = "color";
    colorInput.value = "#ffffff";
    colorInput.dataset.lastColor = "#ffffff";
    colorInput.addEventListener("input", () => {
      if (!getSavedRange({ requireSelection: true })) {
        const previous = colorInput.dataset.lastColor || "#ffffff";
        colorInput.value = previous;
        return;
      }
      exec("foreColor", colorInput.value, { requireSelection: true });
      colorInput.dataset.lastColor = colorInput.value;
    });
    colorWrap.appendChild(colorInput);
    const colorGroup = createGroup("rich-editor-color-group");
    colorGroup.appendChild(colorWrap);
    const highlightRow = document.createElement("div");
    highlightRow.className = "rich-editor-highlight-row";
    colorGroup.appendChild(highlightRow);
    const highlightColors = [
      ["#facc15", "Yellow"],
      ["#f472b6", "Pink"],
      ["#f87171", "Red"],
      ["#4ade80", "Green"],
      ["#38bdf8", "Blue"]
    ];
    function applyHighlight(color) {
      if (!getSavedRange({ requireSelection: true })) return;
      exec("hiliteColor", color, { requireSelection: true });
    }
    const clearSwatch = document.createElement("button");
    clearSwatch.type = "button";
    clearSwatch.className = "rich-editor-swatch rich-editor-swatch--clear";
    clearSwatch.title = "Remove highlight";
    clearSwatch.setAttribute("aria-label", "Remove highlight");
    clearSwatch.textContent = "\xD7";
    clearSwatch.addEventListener("mousedown", (e) => e.preventDefault());
    clearSwatch.addEventListener("click", () => {
      exec("hiliteColor", "transparent", { requireSelection: true });
    });
    highlightRow.appendChild(clearSwatch);
    highlightColors.forEach(([color, label]) => {
      const swatch = document.createElement("button");
      swatch.type = "button";
      swatch.className = "rich-editor-swatch";
      swatch.style.setProperty("--swatch-color", color);
      swatch.title = `${label} highlight`;
      swatch.setAttribute("aria-label", `${label} highlight`);
      swatch.addEventListener("mousedown", (e) => e.preventDefault());
      swatch.addEventListener("click", () => applyHighlight(color));
      highlightRow.appendChild(swatch);
    });
    const listGroup = createGroup("rich-editor-list-group");
    function applyOrderedStyle(style) {
      const selection = window.getSelection();
      if (!selection?.rangeCount) return;
      let node = selection.getRangeAt(0).startContainer;
      if (node.nodeType === Node.TEXT_NODE) node = node.parentNode;
      while (node && node !== editable) {
        if (node.nodeType === Node.ELEMENT_NODE && node.tagName?.toLowerCase() === "ol") {
          if (style) node.style.listStyleType = style;
          else node.style.removeProperty("list-style-type");
          break;
        }
        node = node.parentNode;
      }
    }
    function insertOrdered(style) {
      runCommand(() => {
        document.execCommand("styleWithCSS", false, false);
        document.execCommand("insertOrderedList", false, null);
        if (style) applyOrderedStyle(style);
      });
    }
    const listButtons = [
      ["\u2022", "Bulleted list", () => exec("insertUnorderedList", null, { styleWithCss: false })],
      ["1.", "Numbered list", () => insertOrdered("")],
      ["a.", "Lettered list", () => insertOrdered("lower-alpha")],
      ["i.", "Roman numeral list", () => insertOrdered("lower-roman")]
    ];
    listButtons.forEach(([label, title, handler]) => {
      const btn = createToolbarButton(label, title, handler);
      listGroup.appendChild(btn);
    });
    const typographyGroup = createGroup("rich-editor-typography-group");
    const fontInfo = document.createElement("div");
    fontInfo.className = "rich-editor-font-info";
    fontNameLabel = document.createElement("span");
    fontNameLabel.className = "rich-editor-font-name";
    fontNameLabel.textContent = "Font: Default";
    fontInfo.appendChild(fontNameLabel);
    fontSizeLabel = document.createElement("span");
    fontSizeLabel.className = "rich-editor-font-size";
    fontSizeLabel.textContent = "Size: \u2014";
    fontInfo.appendChild(fontSizeLabel);
    typographyGroup.appendChild(fontInfo);
    fontSelect = document.createElement("select");
    fontSelect.className = "rich-editor-select rich-editor-font-select";
    fontSelect.setAttribute("aria-label", "Font family");
    FONT_OPTIONS.forEach((option) => {
      const opt = document.createElement("option");
      opt.value = option.value;
      opt.textContent = option.label;
      fontSelect.appendChild(opt);
    });
    const customFontOption = document.createElement("option");
    customFontOption.value = "custom";
    customFontOption.textContent = "Custom\u2026";
    fontSelect.appendChild(customFontOption);
    ["mousedown", "focus", "keydown"].forEach((evt) => {
      fontSelect.addEventListener(evt, () => captureSelectionRange());
    });
    fontSelect.addEventListener("change", () => {
      if (!hasActiveSelection()) {
        updateInlineState();
        return;
      }
      let selected = fontSelect.value;
      if (selected === "custom") {
        const current = fontSelect.dataset.customValue || "";
        const custom = prompt("Enter font family (CSS value)", current || "");
        if (!custom) {
          updateInlineState();
          return;
        }
        fontSelect.dataset.customValue = custom;
        selected = custom;
      } else if (!selected) {
        delete fontSelect.dataset.customValue;
      }
      applyFontFamilyValue(selected);
      focusEditor();
    });
    typographyGroup.appendChild(fontSelect);
    sizeSelect = document.createElement("select");
    sizeSelect.className = "rich-editor-select rich-editor-size";
    sizeSelect.setAttribute("aria-label", "Font size");
    const defaultSizeOption = document.createElement("option");
    defaultSizeOption.value = "";
    defaultSizeOption.textContent = "Size";
    sizeSelect.appendChild(defaultSizeOption);
    FONT_SIZE_VALUES.forEach((val) => {
      const opt = document.createElement("option");
      opt.value = String(val);
      opt.textContent = `${val}px`;
      sizeSelect.appendChild(opt);
    });
    const customSizeOption = document.createElement("option");
    customSizeOption.value = "custom";
    customSizeOption.textContent = "Custom\u2026";
    sizeSelect.appendChild(customSizeOption);
    ["mousedown", "focus", "keydown"].forEach((evt) => {
      sizeSelect.addEventListener(evt, () => captureSelectionRange());
    });
    sizeSelect.addEventListener("change", () => {
      if (!hasActiveSelection()) {
        updateInlineState();
        return;
      }
      let selected = sizeSelect.value;
      if (selected === "custom") {
        const current = sizeSelect.dataset.customValue || "";
        const custom = prompt("Enter font size in pixels", current || "16");
        const numeric = Number.parseFloat(custom || "");
        if (!custom || !Number.isFinite(numeric) || numeric <= 0) {
          updateInlineState();
          return;
        }
        const rounded = Math.round(numeric);
        sizeSelect.dataset.customValue = String(rounded);
        selected = String(rounded);
      } else if (!selected) {
        delete sizeSelect.dataset.customValue;
      }
      applyFontSizeValue(selected || null);
      focusEditor();
    });
    typographyGroup.appendChild(sizeSelect);
    const resetSizeBtn = createToolbarButton("\u21BA", "Reset font size", () => {
      if (!hasActiveSelection()) return;
      sizeSelect.value = "";
      delete sizeSelect.dataset.customValue;
      applyFontSizeValue(null);
      focusEditor();
    });
    typographyGroup.appendChild(resetSizeBtn);
    const mediaGroup = createGroup("rich-editor-media-group");
    const linkBtn = createToolbarButton("\u{1F517}", "Insert link", () => {
      if (!hasActiveSelection()) return;
      const url = prompt("Enter URL");
      if (!url) return;
      exec("createLink", url, { requireSelection: true });
    });
    mediaGroup.appendChild(linkBtn);
    const imageBtn = createToolbarButton("\u{1F5BC}", "Upload image (Shift+Click for URL)", (event) => {
      if (event.shiftKey) {
        const url = prompt("Enter image URL");
        if (!url) return;
        exec("insertImage", url, { styleWithCss: false });
        return;
      }
      imageFileInput.click();
    });
    mediaGroup.appendChild(imageBtn);
    const mediaBtn = createToolbarButton("\u{1F3AC}", "Upload media (Shift+Click for URL)", (event) => {
      if (event.shiftKey) {
        const url = prompt("Enter media URL");
        if (!url) return;
        const typePrompt = prompt("Media type (video/audio/embed)", "video");
        const kind = (typePrompt || "video").toLowerCase();
        const safeUrl = escapeHtml2(url);
        let html = "";
        if (kind.startsWith("a")) {
          html = `<audio controls src="${safeUrl}"></audio>`;
        } else if (kind.startsWith("e") || kind.startsWith("i")) {
          html = `<iframe src="${safeUrl}" title="Embedded media" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>`;
        } else {
          html = `<video controls src="${safeUrl}"></video>`;
        }
        insertHtml(html);
        return;
      }
      mediaFileInput.click();
    });
    mediaGroup.appendChild(mediaBtn);
    const clozeTool = createToolbarButton("\u29C9", "Toggle cloze (hide selected text until clicked)", () => {
      toggleClozeFormatting();
      focusEditor();
    });
    clozeButton = clozeTool;
    const clearBtn = createToolbarButton("\u232B", "Clear formatting", () => exec("removeFormat", null, { requireSelection: true, styleWithCss: false }));
    const utilityGroup = createGroup("rich-editor-utility-group");
    utilityGroup.appendChild(clozeTool);
    utilityGroup.appendChild(clearBtn);
    let settingValue = false;
    editable.addEventListener("input", () => {
      if (settingValue) return;
      if (typeof onChange === "function") onChange();
      updateInlineState();
    });
    editable.addEventListener("dblclick", (event) => {
      const path = typeof event.composedPath === "function" ? event.composedPath() : [];
      const target = path.find((node) => node instanceof HTMLImageElement) || event.target;
      if (target instanceof HTMLImageElement) {
        event.preventDefault();
        beginImageEditing(target);
      }
    });
    ["keyup", "mouseup", "focus"].forEach((event) => {
      editable.addEventListener(event, () => updateInlineState());
    });
    editable.addEventListener("blur", () => {
      setTimeout(() => updateInlineState(), 0);
    });
    const selectionHandler = () => {
      if (!document.body.contains(wrapper)) {
        document.removeEventListener("selectionchange", selectionHandler);
        destroyActiveImageEditor();
        return;
      }
      captureSelectionRange();
      updateInlineState();
    };
    document.addEventListener("selectionchange", selectionHandler);
    updateInlineState();
    return {
      element: wrapper,
      getValue() {
        const sanitized = sanitizeHtml(editable.innerHTML);
        return isEmptyHtml(sanitized) ? "" : sanitized;
      },
      setValue(val) {
        settingValue = true;
        destroyActiveImageEditor();
        editable.innerHTML = normalizeInput(val);
        settingValue = false;
        updateInlineState();
      },
      focus() {
        focusEditor();
      }
    };
  }
  var CLOZE_STATE_HIDDEN = "hidden";
  var CLOZE_STATE_REVEALED = "revealed";
  function setClozeState(node, state2) {
    if (!(node instanceof HTMLElement)) return;
    const next = state2 === CLOZE_STATE_REVEALED ? CLOZE_STATE_REVEALED : CLOZE_STATE_HIDDEN;
    node.setAttribute("data-cloze-state", next);
    if (next === CLOZE_STATE_REVEALED) {
      node.classList.add("is-cloze-revealed");
      node.classList.remove("is-cloze-hidden");
    } else {
      node.classList.add("is-cloze-hidden");
      node.classList.remove("is-cloze-revealed");
    }
    if (node.classList.contains("cloze-text-interactive")) {
      node.setAttribute("aria-pressed", next === CLOZE_STATE_REVEALED ? "true" : "false");
    } else if (node.hasAttribute("aria-pressed")) {
      node.removeAttribute("aria-pressed");
    }
  }
  function toggleCloze(node) {
    if (!(node instanceof HTMLElement)) return;
    const current = node.getAttribute("data-cloze-state");
    const next = current === CLOZE_STATE_REVEALED ? CLOZE_STATE_HIDDEN : CLOZE_STATE_REVEALED;
    setClozeState(node, next);
  }
  function handleClozeClick(event) {
    const target = event.target;
    if (!(target instanceof HTMLElement)) return;
    const cloze = target.closest(CLOZE_SELECTOR);
    if (!cloze) return;
    event.stopPropagation();
    toggleCloze(cloze);
  }
  function handleClozeKey(event) {
    if (event.key !== "Enter" && event.key !== " ") return;
    const target = event.target;
    if (!(target instanceof HTMLElement)) return;
    const cloze = target.closest(CLOZE_SELECTOR);
    if (!cloze) return;
    event.preventDefault();
    event.stopPropagation();
    toggleCloze(cloze);
  }
  function detachClozeHandlers(container) {
    const handlers = container.__clozeHandlers;
    if (!handlers) return;
    container.removeEventListener("click", handlers.click);
    container.removeEventListener("keydown", handlers.key);
    delete container.__clozeHandlers;
  }
  function enhanceClozeContent(target, { clozeMode = "static" } = {}) {
    const nodes = target.querySelectorAll(CLOZE_SELECTOR);
    if (!nodes.length) {
      target.classList.remove("rich-content-with-cloze");
      detachClozeHandlers(target);
      return;
    }
    target.classList.add("rich-content-with-cloze");
    const interactive = clozeMode === "interactive";
    nodes.forEach((node) => {
      node.classList.add("cloze-text");
      if (interactive) {
        node.classList.add("cloze-text-interactive");
        if (!node.hasAttribute("tabindex")) node.setAttribute("tabindex", "0");
        node.setAttribute("role", "button");
        const current = node.getAttribute("data-cloze-state");
        if (current !== CLOZE_STATE_REVEALED && current !== CLOZE_STATE_HIDDEN) {
          setClozeState(node, CLOZE_STATE_HIDDEN);
        } else {
          setClozeState(node, current);
        }
      } else {
        node.classList.remove("cloze-text-interactive");
        if (node.getAttribute("tabindex") === "0") node.removeAttribute("tabindex");
        if (node.getAttribute("role") === "button") node.removeAttribute("role");
        setClozeState(node, CLOZE_STATE_REVEALED);
      }
    });
    if (interactive) {
      if (!target.__clozeHandlers) {
        const handlers = {
          click: handleClozeClick,
          key: handleClozeKey
        };
        target.addEventListener("click", handlers.click);
        target.addEventListener("keydown", handlers.key);
        target.__clozeHandlers = handlers;
      }
    } else {
      detachClozeHandlers(target);
    }
  }
  function normalizedFromCache(value) {
    if (!value) return "";
    const key = typeof value === "string" ? value : null;
    if (key !== null && richTextCache.has(key)) {
      return richTextCache.get(key);
    }
    const normalized2 = normalizeInput(value);
    if (key !== null && key.length <= 2e4) {
      if (!richTextCache.has(key)) {
        richTextCacheKeys.push(key);
        if (richTextCacheKeys.length > RICH_TEXT_CACHE_LIMIT) {
          const oldest = richTextCacheKeys.shift();
          if (oldest != null) richTextCache.delete(oldest);
        }
      }
      richTextCache.set(key, normalized2);
    }
    return normalized2;
  }
  function renderRichText(target, value, options = {}) {
    const normalized2 = normalizedFromCache(value);
    if (!normalized2) {
      target.textContent = "";
      target.classList.remove("rich-content");
      detachClozeHandlers(target);
      return;
    }
    target.classList.add("rich-content");
    target.innerHTML = normalized2;
    enhanceClozeContent(target, options);
  }
  function hasRichTextContent(value) {
    return !isEmptyHtml(normalizeInput(value));
  }

  // js/ui/components/editor.js
  var fieldMap = {
    disease: [
      ["etiology", "Etiology"],
      ["pathophys", "Pathophysiology"],
      ["clinical", "Clinical Presentation"],
      ["diagnosis", "Diagnosis"],
      ["treatment", "Treatment"],
      ["complications", "Complications"],
      ["mnemonic", "Mnemonic"]
    ],
    drug: [
      ["class", "Class"],
      ["source", "Source"],
      ["moa", "MOA"],
      ["uses", "Uses"],
      ["sideEffects", "Side Effects"],
      ["contraindications", "Contraindications"],
      ["mnemonic", "Mnemonic"]
    ],
    concept: [
      ["type", "Type"],
      ["definition", "Definition"],
      ["mechanism", "Mechanism"],
      ["clinicalRelevance", "Clinical Relevance"],
      ["example", "Example"],
      ["mnemonic", "Mnemonic"]
    ]
  };
  var titleMap = { disease: "Disease", drug: "Drug", concept: "Concept" };
  function escapeHtml3(str = "") {
    return String(str).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#39;");
  }
  async function openEditor(kind, onSave, existing = null) {
    let isDirty = false;
    let status;
    let statusFadeTimer = null;
    let autoSaveTimer = null;
    const AUTOSAVE_DELAY = 2e3;
    const win = createFloatingWindow({
      title: `${existing ? "Edit" : "Add"} ${titleMap[kind] || kind}`,
      width: 660,
      onBeforeClose: async (reason) => {
        if (reason === "saved") return true;
        if (autoSaveTimer) {
          clearTimeout(autoSaveTimer);
          autoSaveTimer = null;
        }
        if (!isDirty) return true;
        if (reason !== "close") return true;
        const shouldSave = await confirmModal("Save changes before closing?");
        if (shouldSave) {
          try {
            await persist({ closeAfter: true });
          } catch (err) {
            console.error(err);
          }
          return false;
        }
        return true;
      }
    });
    const form = document.createElement("form");
    form.className = "editor-form";
    const nameLabel = document.createElement("label");
    nameLabel.className = "editor-field";
    const nameTitle = document.createElement("span");
    nameTitle.className = "editor-field-label";
    nameTitle.textContent = kind === "concept" ? "Concept" : "Name";
    nameLabel.appendChild(nameTitle);
    const nameInput = document.createElement("input");
    nameInput.className = "input";
    nameInput.value = existing ? existing.name || existing.concept || "" : "";
    nameInput.placeholder = kind === "concept" ? "Enter concept title" : "Enter name";
    nameLabel.appendChild(nameInput);
    form.appendChild(nameLabel);
    const cancelAutoSave = () => {
      if (autoSaveTimer) {
        clearTimeout(autoSaveTimer);
        autoSaveTimer = null;
      }
    };
    const queueAutoSave = () => {
      cancelAutoSave();
      if (!isDirty) return;
      if (!nameInput.value.trim()) return;
      autoSaveTimer = setTimeout(() => {
        autoSaveTimer = null;
        if (!isDirty) return;
        persist({ silent: true }).catch((err) => {
          console.error("Autosave failed", err);
        });
      }, AUTOSAVE_DELAY);
    };
    const markDirty = () => {
      isDirty = true;
      if (status) {
        if (statusFadeTimer) {
          clearTimeout(statusFadeTimer);
          statusFadeTimer = null;
        }
        status.textContent = "";
        status.classList.remove("editor-status-muted");
      }
      queueAutoSave();
    };
    nameInput.addEventListener("input", markDirty);
    const fieldInputs = {};
    fieldMap[kind].forEach(([field, label]) => {
      const fieldWrap = document.createElement("div");
      fieldWrap.className = "editor-field";
      const labelEl = document.createElement("label");
      labelEl.className = "editor-field-label";
      labelEl.textContent = label;
      const labelId = `field-${field}-${uid()}`;
      labelEl.id = labelId;
      fieldWrap.appendChild(labelEl);
      const editor = createRichTextEditor({
        value: existing ? existing[field] || "" : "",
        onChange: markDirty,
        ariaLabelledBy: labelId
      });
      const inp = editor.element;
      fieldInputs[field] = editor;
      fieldWrap.appendChild(inp);
      form.appendChild(fieldWrap);
    });
    const extrasWrap = document.createElement("section");
    extrasWrap.className = "editor-extras";
    const extrasHeader = document.createElement("div");
    extrasHeader.className = "editor-extras-header";
    const extrasTitle = document.createElement("h3");
    extrasTitle.textContent = "Custom Sections";
    extrasHeader.appendChild(extrasTitle);
    const addExtraBtn = document.createElement("button");
    addExtraBtn.type = "button";
    addExtraBtn.className = "btn subtle";
    addExtraBtn.textContent = "Add Section";
    extrasHeader.appendChild(addExtraBtn);
    extrasWrap.appendChild(extrasHeader);
    const extrasList = document.createElement("div");
    extrasList.className = "editor-extras-list";
    extrasWrap.appendChild(extrasList);
    form.appendChild(extrasWrap);
    const extraControls = /* @__PURE__ */ new Map();
    function addExtra(extra = null) {
      const data = extra || {};
      const id = data.id || uid();
      const row = document.createElement("div");
      row.className = "editor-extra";
      row.dataset.id = id;
      const titleRow = document.createElement("div");
      titleRow.className = "editor-extra-title-row";
      const titleInput = document.createElement("input");
      titleInput.className = "input editor-extra-title";
      titleInput.placeholder = "Section title";
      titleInput.value = data.title || "";
      titleRow.appendChild(titleInput);
      const removeBtn = document.createElement("button");
      removeBtn.type = "button";
      removeBtn.className = "icon-btn ghost";
      removeBtn.title = "Remove section";
      removeBtn.textContent = "\u2715";
      removeBtn.addEventListener("click", () => {
        extraControls.delete(id);
        row.remove();
        markDirty();
      });
      titleRow.appendChild(removeBtn);
      row.appendChild(titleRow);
      const editor = createRichTextEditor({ value: data.body || "", onChange: markDirty });
      row.appendChild(editor.element);
      extrasList.appendChild(row);
      extraControls.set(id, { id, titleInput, editor });
      titleInput.addEventListener("input", markDirty);
      row.addEventListener("input", markDirty);
      if (!extra) markDirty();
    }
    addExtraBtn.addEventListener("click", () => addExtra());
    const legacyExtras = (() => {
      if (existing?.extras && existing.extras.length) return existing.extras;
      if (existing?.facts && existing.facts.length) {
        return [{
          id: uid(),
          title: "Highlights",
          body: existing.facts.map((f) => `<p>${escapeHtml3(f)}</p>`).join("")
        }];
      }
      return [];
    })();
    legacyExtras.forEach((extra) => addExtra(extra));
    const colorLabel = document.createElement("label");
    colorLabel.className = "editor-field";
    colorLabel.textContent = "Color";
    const colorInput = document.createElement("input");
    colorInput.type = "color";
    colorInput.className = "input";
    colorInput.value = existing?.color || "#ffffff";
    colorLabel.appendChild(colorInput);
    form.appendChild(colorLabel);
    colorInput.addEventListener("input", markDirty);
    const catalog = await loadBlockCatalog({ force: true });
    const blocks = (catalog.blocks || []).map((block) => ({
      ...block,
      lectures: (catalog.lectureLists?.[block.blockId] || []).map((lecture) => ({ ...lecture }))
    }));
    const blockMap = new Map(blocks.map((b) => [b.blockId, b]));
    const blockSet = new Set(Array.isArray(existing?.blocks) ? existing.blocks : []);
    const manualWeeks = new Set(
      Array.isArray(existing?.weeks) ? existing.weeks.filter((value) => Number.isFinite(Number(value))).map((value) => Number(value)) : []
    );
    const lectSet = /* @__PURE__ */ new Set();
    const lectureBlockCounts = /* @__PURE__ */ new Map();
    function incrementBlockCount(blockId) {
      if (!blockId) return;
      const key = String(blockId);
      const next = (lectureBlockCounts.get(key) || 0) + 1;
      lectureBlockCounts.set(key, next);
    }
    function decrementBlockCount(blockId) {
      if (!blockId) return;
      const key = String(blockId);
      const prev = lectureBlockCounts.get(key) || 0;
      if (prev <= 1) {
        lectureBlockCounts.delete(key);
      } else {
        lectureBlockCounts.set(key, prev - 1);
      }
    }
    existing?.lectures?.forEach((l) => {
      if (l.blockId != null && l.id != null) {
        const key = `${l.blockId}|${l.id}`;
        lectSet.add(key);
        incrementBlockCount(l.blockId);
      }
    });
    const blockWrap = document.createElement("section");
    blockWrap.className = "editor-tags";
    const blockTitle = document.createElement("div");
    blockTitle.className = "editor-tags-title";
    blockTitle.textContent = "Curriculum tags";
    blockWrap.appendChild(blockTitle);
    const blockDescription = document.createElement("p");
    blockDescription.className = "editor-tags-description";
    blockDescription.textContent = "Pick the lectures that relate to this entry. Block and week tags update automatically as you choose lectures.";
    blockWrap.appendChild(blockDescription);
    const blockChipRow = document.createElement("div");
    blockChipRow.className = "editor-chip-row";
    blockWrap.appendChild(blockChipRow);
    const manualWeeksBox = document.createElement("div");
    manualWeeksBox.className = "editor-manual-weeks";
    const manualWeeksHeader = document.createElement("div");
    manualWeeksHeader.className = "editor-manual-weeks-header";
    const manualWeeksTitle = document.createElement("span");
    manualWeeksTitle.textContent = "Additional week tags";
    manualWeeksHeader.appendChild(manualWeeksTitle);
    manualWeeksBox.appendChild(manualWeeksHeader);
    const manualWeekList = document.createElement("div");
    manualWeekList.className = "editor-manual-weeks-list";
    manualWeeksBox.appendChild(manualWeekList);
    const blockBrowser = document.createElement("div");
    blockBrowser.className = "editor-curriculum-browser";
    blockWrap.appendChild(blockBrowser);
    const blockColumn = document.createElement("div");
    blockColumn.className = "editor-curriculum-column editor-block-column";
    const blockColumnHeading = document.createElement("h4");
    blockColumnHeading.className = "editor-column-heading";
    blockColumnHeading.textContent = "Blocks";
    blockColumn.appendChild(blockColumnHeading);
    const blockListEl = document.createElement("div");
    blockListEl.className = "editor-block-list";
    blockColumn.appendChild(blockListEl);
    blockBrowser.appendChild(blockColumn);
    const weekColumn = document.createElement("div");
    weekColumn.className = "editor-curriculum-column editor-week-column";
    const weekHeading = document.createElement("h4");
    weekHeading.className = "editor-column-heading";
    weekHeading.textContent = "Weeks";
    weekColumn.appendChild(weekHeading);
    const weekListEl = document.createElement("div");
    weekListEl.className = "editor-week-browser";
    weekColumn.appendChild(weekListEl);
    weekColumn.appendChild(manualWeeksBox);
    blockBrowser.appendChild(weekColumn);
    const lectureColumn = document.createElement("div");
    lectureColumn.className = "editor-curriculum-column editor-lecture-column";
    const lectureHeading = document.createElement("h4");
    lectureHeading.className = "editor-column-heading";
    lectureHeading.textContent = "Lectures";
    lectureColumn.appendChild(lectureHeading);
    const lectureListEl = document.createElement("div");
    lectureListEl.className = "editor-lecture-browser";
    lectureColumn.appendChild(lectureListEl);
    blockBrowser.appendChild(lectureColumn);
    const UNSCHEDULED_KEY = "__unscheduled";
    function createTagChip(label, variant, active = false) {
      const chip = document.createElement("button");
      chip.type = "button";
      chip.className = `tag-chip tag-chip-${variant}`;
      chip.textContent = label;
      setToggleState(chip, active);
      return chip;
    }
    function blockHasSelectedLectures(blockId) {
      if (!blockId) return false;
      return lectureBlockCounts.has(String(blockId));
    }
    function collectSelectedWeekKeys() {
      const selected = /* @__PURE__ */ new Set();
      lectSet.forEach((key) => {
        const [blockId, lectureId] = key.split("|");
        const lecId = Number(lectureId);
        if (!blockId || !Number.isFinite(lecId)) return;
        const block = blockMap.get(blockId);
        const lecture = block?.lectures?.find((le) => le.id === lecId);
        if (!lecture) return;
        const weekValue = lecture.week == null || lecture.week === "" ? UNSCHEDULED_KEY : lecture.week;
        selected.add(`${blockId}|${weekValue}`);
      });
      return selected;
    }
    function collectWeekNumbers() {
      const numbers = new Set(manualWeeks);
      lectSet.forEach((key) => {
        const [blockId, lectureId] = key.split("|");
        const lecId = Number(lectureId);
        if (!blockId || !Number.isFinite(lecId)) return;
        const block = blockMap.get(blockId);
        const lecture = block?.lectures?.find((le) => le.id === lecId);
        if (!lecture) return;
        const weekValue = Number(lecture.week);
        if (Number.isFinite(weekValue)) numbers.add(weekValue);
      });
      return numbers;
    }
    function renderManualWeekTags() {
      manualWeekList.innerHTML = "";
      if (!manualWeeks.size) {
        const empty = document.createElement("span");
        empty.className = "editor-manual-weeks-empty";
        empty.textContent = "No extra week tags yet.";
        manualWeekList.appendChild(empty);
        manualWeeksBox.classList.add("empty");
      } else {
        manualWeeksBox.classList.remove("empty");
        Array.from(manualWeeks).sort((a, b) => a - b).forEach((weekNum) => {
          const chip = document.createElement("div");
          chip.className = "editor-manual-week-chip";
          const label = document.createElement("span");
          label.textContent = `Week ${weekNum}`;
          chip.appendChild(label);
          const removeBtn = document.createElement("button");
          removeBtn.type = "button";
          removeBtn.className = "icon-btn ghost";
          removeBtn.title = "Remove week tag";
          removeBtn.setAttribute("aria-label", `Remove week ${weekNum}`);
          removeBtn.textContent = "\u2715";
          removeBtn.addEventListener("click", () => {
            manualWeeks.delete(weekNum);
            markDirty();
            renderManualWeekTags();
            renderWeekList();
          });
          chip.appendChild(removeBtn);
          manualWeekList.appendChild(chip);
        });
      }
    }
    let activeBlockId = null;
    let activeWeekKey = null;
    function weekGroupsForBlock(block) {
      if (!block) return [];
      const weekNumbers = /* @__PURE__ */ new Set();
      if (Number.isFinite(block.weeks)) {
        for (let i = 1; i <= block.weeks; i++) weekNumbers.add(i);
      }
      (block.lectures || []).forEach((l) => {
        if (typeof l.week === "number") weekNumbers.add(l.week);
      });
      const sortedWeeks = Array.from(weekNumbers).sort((a, b) => a - b);
      const groups = sortedWeeks.map((weekNumber) => ({
        key: `${block.blockId}|${weekNumber}`,
        label: `Week ${weekNumber}`,
        lectures: (block.lectures || []).filter((l) => l.week === weekNumber),
        weekNumber
      }));
      const unscheduledLectures = (block.lectures || []).filter((l) => l.week == null || l.week === "");
      if (unscheduledLectures.length) {
        groups.push({
          key: `${block.blockId}|${UNSCHEDULED_KEY}`,
          label: "Unscheduled",
          lectures: unscheduledLectures,
          unscheduled: true
        });
      }
      return groups;
    }
    function ensureActiveBlock2() {
      if (activeBlockId && blockMap.has(activeBlockId)) return;
      for (const key of lectSet) {
        const [blockId] = key.split("|");
        if (blockId && blockMap.has(blockId)) {
          activeBlockId = blockId;
          return;
        }
      }
      for (const id of blockSet) {
        if (blockMap.has(id)) {
          activeBlockId = id;
          return;
        }
      }
      activeBlockId = blocks[0]?.blockId || null;
    }
    function ensureActiveWeek() {
      if (!activeBlockId || !blockMap.has(activeBlockId)) {
        activeWeekKey = null;
        return;
      }
      const block = blockMap.get(activeBlockId);
      const groups = weekGroupsForBlock(block);
      if (activeWeekKey && groups.some((group) => group.key === activeWeekKey)) return;
      const selected = collectSelectedWeekKeys();
      for (const key of selected) {
        if (key.startsWith(`${activeBlockId}|`)) {
          activeWeekKey = key;
          return;
        }
      }
      activeWeekKey = groups.length ? groups[0].key : null;
    }
    function renderBlockChips() {
      blockChipRow.innerHTML = "";
      const taggedBlocks = Array.from(blockSet).filter((id) => blockMap.has(id));
      if (!taggedBlocks.length) {
        const hint = document.createElement("div");
        hint.className = "editor-tags-empty subtle";
        hint.textContent = "Block tags update automatically as you choose lectures.";
        blockChipRow.appendChild(hint);
        return;
      }
      taggedBlocks.sort((a, b) => {
        const aTitle = blockMap.get(a)?.title || String(a);
        const bTitle = blockMap.get(b)?.title || String(b);
        return aTitle.localeCompare(bTitle);
      });
      taggedBlocks.forEach((blockId) => {
        const title = blockMap.get(blockId)?.title || blockId;
        const chip = createTagChip(title, "block", true);
        chip.addEventListener("click", () => {
          blockSet.delete(blockId);
          markDirty();
          renderBlockChips();
          renderBlockList();
        });
        blockChipRow.appendChild(chip);
      });
    }
    function renderBlockList() {
      blockListEl.innerHTML = "";
      if (!blocks.length) {
        const empty = document.createElement("div");
        empty.className = "editor-tags-empty";
        empty.textContent = "No curriculum blocks have been created yet.";
        blockListEl.appendChild(empty);
        return;
      }
      ensureActiveBlock2();
      ensureActiveWeek();
      blocks.forEach((block) => {
        if (!block) return;
        const blockId = block.blockId;
        const row = document.createElement("div");
        row.className = "editor-block-row";
        if (blockHasSelectedLectures(blockId)) row.classList.add("has-lectures");
        const button = document.createElement("button");
        button.type = "button";
        button.className = "editor-block-button";
        setToggleState(button, blockId === activeBlockId);
        const label = document.createElement("span");
        label.className = "editor-block-label";
        label.textContent = block.title || blockId;
        button.appendChild(label);
        const count = lectureBlockCounts.get(String(blockId)) || 0;
        if (count) {
          const badge = document.createElement("span");
          badge.className = "editor-block-count";
          badge.textContent = `${count}`;
          badge.setAttribute("aria-label", `${count} selected lecture${count === 1 ? "" : "s"}`);
          button.appendChild(badge);
        }
        button.addEventListener("click", () => {
          activeBlockId = blockId;
          activeWeekKey = null;
          ensureActiveWeek();
          renderBlockList();
          renderWeekList();
          renderLectureList();
        });
        row.appendChild(button);
        blockListEl.appendChild(row);
      });
    }
    function renderWeekList() {
      weekListEl.innerHTML = "";
      if (!blocks.length) {
        const empty = document.createElement("div");
        empty.className = "editor-tags-empty subtle";
        empty.textContent = "Add blocks to browse weeks.";
        weekListEl.appendChild(empty);
        return;
      }
      ensureActiveBlock2();
      if (!activeBlockId || !blockMap.has(activeBlockId)) {
        const prompt2 = document.createElement("div");
        prompt2.className = "editor-tags-empty subtle";
        prompt2.textContent = "Select a block to view weeks.";
        weekListEl.appendChild(prompt2);
        return;
      }
      const block = blockMap.get(activeBlockId);
      const groups = weekGroupsForBlock(block);
      ensureActiveWeek();
      const selectedWeekKeys = collectSelectedWeekKeys();
      if (!groups.length) {
        const empty = document.createElement("div");
        empty.className = "editor-tags-empty subtle";
        empty.textContent = "Add weeks or lectures to this block to start tagging.";
        weekListEl.appendChild(empty);
        return;
      }
      groups.forEach((group) => {
        const btn = document.createElement("button");
        btn.type = "button";
        btn.className = "editor-week-button";
        setToggleState(btn, group.key === activeWeekKey);
        if (selectedWeekKeys.has(group.key)) btn.classList.add("has-selection");
        if (Number.isFinite(group.weekNumber) && manualWeeks.has(Number(group.weekNumber))) {
          btn.classList.add("manual");
        }
        const label = document.createElement("span");
        label.className = "editor-week-label";
        label.textContent = group.label;
        btn.appendChild(label);
        const meta = document.createElement("span");
        meta.className = "editor-week-meta";
        const total = group.lectures?.length || 0;
        if (total) {
          meta.textContent = `${total} lecture${total === 1 ? "" : "s"}`;
        } else if (group.unscheduled) {
          meta.textContent = "No unscheduled lectures";
        } else {
          meta.textContent = "No lectures yet";
        }
        btn.appendChild(meta);
        btn.addEventListener("click", () => {
          activeWeekKey = group.key;
          renderWeekList();
          renderLectureList();
        });
        weekListEl.appendChild(btn);
      });
    }
    function renderLectureList() {
      lectureListEl.innerHTML = "";
      if (!blocks.length) {
        const empty = document.createElement("div");
        empty.className = "editor-tags-empty subtle";
        empty.textContent = "Add blocks and lectures to start tagging.";
        lectureListEl.appendChild(empty);
        return;
      }
      ensureActiveBlock2();
      ensureActiveWeek();
      if (!activeBlockId || !blockMap.has(activeBlockId)) {
        const prompt2 = document.createElement("div");
        prompt2.className = "editor-tags-empty subtle";
        prompt2.textContent = "Select a block to choose lectures.";
        lectureListEl.appendChild(prompt2);
        return;
      }
      if (!activeWeekKey) {
        const prompt2 = document.createElement("div");
        prompt2.className = "editor-tags-empty subtle";
        prompt2.textContent = "Pick a week to see its lectures.";
        lectureListEl.appendChild(prompt2);
        return;
      }
      const [blockId] = activeWeekKey.split("|");
      const block = blockMap.get(blockId);
      const groups = weekGroupsForBlock(block);
      const current = groups.find((group) => group.key === activeWeekKey);
      if (!current) {
        const empty = document.createElement("div");
        empty.className = "editor-tags-empty subtle";
        empty.textContent = "No lectures available for this week yet.";
        lectureListEl.appendChild(empty);
        return;
      }
      if (!current.lectures.length) {
        const empty = document.createElement("div");
        empty.className = "editor-tags-empty subtle";
        empty.textContent = current.unscheduled ? "No unscheduled lectures yet." : "No lectures linked to this week yet.";
        lectureListEl.appendChild(empty);
        return;
      }
      current.lectures.forEach((lecture) => {
        const key = `${blockId}|${lecture.id}`;
        const btn = document.createElement("button");
        btn.type = "button";
        btn.className = "editor-lecture-button";
        btn.textContent = lecture.name || `Lecture ${lecture.id}`;
        setToggleState(btn, lectSet.has(key));
        btn.addEventListener("click", () => {
          if (lectSet.has(key)) {
            lectSet.delete(key);
            decrementBlockCount(blockId);
          } else {
            lectSet.add(key);
            incrementBlockCount(blockId);
          }
          markDirty();
          renderBlockChips();
          renderBlockList();
          renderWeekList();
          renderLectureList();
        });
        lectureListEl.appendChild(btn);
      });
    }
    renderManualWeekTags();
    renderBlockChips();
    renderBlockList();
    renderWeekList();
    renderLectureList();
    form.appendChild(blockWrap);
    const actionBar = document.createElement("div");
    actionBar.className = "editor-actions";
    status = document.createElement("span");
    status.className = "editor-status";
    let saveBtn;
    let headerSaveBtn;
    async function persist(options = {}) {
      const opts = typeof options === "boolean" ? { closeAfter: options } : options;
      const { closeAfter = false, silent = false } = opts;
      cancelAutoSave();
      const titleKey = kind === "concept" ? "concept" : "name";
      const trimmed = nameInput.value.trim();
      if (!trimmed) {
        if (!silent) {
          status.textContent = "Name is required.";
        }
        return false;
      }
      if (!silent && status) {
        status.classList.remove("editor-status-muted");
        status.textContent = "Saving\u2026";
      }
      const wasNew = !existing;
      const item = existing || { id: uid(), kind };
      item[titleKey] = trimmed;
      fieldMap[kind].forEach(([field]) => {
        const control = fieldInputs[field];
        const v = control?.getValue ? control.getValue() : "";
        item[field] = v;
      });
      item.extras = Array.from(extraControls.values()).map(({ id, titleInput, editor }) => ({
        id,
        title: titleInput.value.trim(),
        body: editor.getValue()
      })).filter((ex) => ex.title || ex.body);
      item.facts = [];
      const blockTags = new Set(blockSet);
      lectSet.forEach((key) => {
        const [blockId] = key.split("|");
        if (blockId) blockTags.add(blockId);
      });
      item.blocks = Array.from(blockTags);
      const weekNums = collectWeekNumbers();
      item.weeks = Array.from(weekNums).sort((a, b) => a - b);
      const lectures = [];
      for (const key of lectSet) {
        const [blockId, lecIdStr] = key.split("|");
        const lecId = Number(lecIdStr);
        const blk = blockMap.get(blockId);
        const l = blk?.lectures.find((le) => le.id === lecId);
        if (l) lectures.push({ blockId, id: l.id, name: l.name, week: l.week });
      }
      item.lectures = lectures;
      item.color = colorInput.value;
      try {
        await upsertItem(item);
      } catch (err) {
        console.error(err);
        if (status) {
          if (statusFadeTimer) {
            clearTimeout(statusFadeTimer);
            statusFadeTimer = null;
          }
          status.classList.remove("editor-status-muted");
          status.textContent = silent ? "Autosave failed" : "Failed to save.";
        }
        throw err;
      }
      existing = item;
      updateTitle();
      isDirty = false;
      const shouldNotify = onSave && (!silent || wasNew);
      if (shouldNotify) onSave();
      if (closeAfter) {
        win.close("saved");
      } else {
        if (statusFadeTimer) {
          clearTimeout(statusFadeTimer);
          statusFadeTimer = null;
        }
        if (status) {
          if (silent) {
            status.textContent = "Autosaved";
            status.classList.add("editor-status-muted");
            statusFadeTimer = setTimeout(() => {
              status.classList.remove("editor-status-muted");
              statusFadeTimer = null;
            }, 1800);
          } else {
            status.textContent = "Saved";
            status.classList.remove("editor-status-muted");
          }
        }
      }
      return true;
    }
    function handleSaveRequest() {
      if (headerSaveBtn) headerSaveBtn.disabled = true;
      if (saveBtn) saveBtn.disabled = true;
      persist({ closeAfter: true }).catch(() => {
      }).finally(() => {
        if (headerSaveBtn) headerSaveBtn.disabled = false;
        if (saveBtn) saveBtn.disabled = false;
      });
    }
    headerSaveBtn = win.addAction({
      text: "\u2713",
      ariaLabel: "Save entry",
      title: "Save and close",
      className: "floating-action--confirm",
      onClick: handleSaveRequest
    });
    saveBtn = document.createElement("button");
    saveBtn.type = "button";
    saveBtn.className = "btn";
    saveBtn.textContent = "Save & Close";
    saveBtn.addEventListener("click", handleSaveRequest);
    actionBar.appendChild(saveBtn);
    actionBar.appendChild(status);
    form.appendChild(actionBar);
    form.addEventListener("submit", (e) => {
      e.preventDefault();
      handleSaveRequest();
    });
    win.setContent(form);
    const updateTitle = () => {
      const base = `${existing ? "Edit" : "Add"} ${titleMap[kind] || kind}`;
      const name = nameInput.value.trim();
      if (name) {
        win.setTitle(`${base}: ${name}`);
      } else {
        win.setTitle(base);
      }
    };
    nameInput.addEventListener("input", updateTitle);
    updateTitle();
    win.focus();
    nameInput.focus();
  }

  // js/ui/components/linker.js
  async function openLinker(item, onSave) {
    const overlay = document.createElement("div");
    overlay.className = "modal";
    const card = document.createElement("div");
    card.className = "card";
    const title = document.createElement("h2");
    title.textContent = `Links for ${item.name || item.concept || ""}`;
    card.appendChild(title);
    const all = [
      ...await listItemsByKind("disease"),
      ...await listItemsByKind("drug"),
      ...await listItemsByKind("concept")
    ];
    const idMap = new Map(all.map((i) => [i.id, i]));
    const links = new Set((item.links || []).map((l) => l.id));
    const list = document.createElement("div");
    list.className = "link-list";
    card.appendChild(list);
    function renderList() {
      list.innerHTML = "";
      links.forEach((id) => {
        const row = document.createElement("div");
        row.className = "row";
        const label = document.createElement("span");
        const it = idMap.get(id);
        label.textContent = it ? it.name || it.concept || id : id;
        row.appendChild(label);
        const btn = document.createElement("button");
        btn.className = "btn";
        btn.textContent = "Remove";
        btn.addEventListener("click", () => {
          links.delete(id);
          renderList();
        });
        row.appendChild(btn);
        list.appendChild(row);
      });
    }
    renderList();
    const input = document.createElement("input");
    input.className = "input";
    input.placeholder = "Search items...";
    card.appendChild(input);
    const sug = document.createElement("ul");
    sug.className = "quiz-suggestions";
    card.appendChild(sug);
    input.addEventListener("input", () => {
      const v = input.value.toLowerCase();
      sug.innerHTML = "";
      if (!v) return;
      all.filter((it) => it.id !== item.id && (it.name || it.concept || "").toLowerCase().includes(v)).slice(0, 5).forEach((it) => {
        const li = document.createElement("li");
        li.textContent = it.name || it.concept || "";
        li.addEventListener("mousedown", () => {
          links.add(it.id);
          input.value = "";
          sug.innerHTML = "";
          renderList();
        });
        sug.appendChild(li);
      });
    });
    const actions = document.createElement("div");
    actions.className = "modal-actions";
    const cancel = document.createElement("button");
    cancel.type = "button";
    cancel.className = "btn";
    cancel.textContent = "Close";
    cancel.addEventListener("click", () => document.body.removeChild(overlay));
    const save = document.createElement("button");
    save.type = "button";
    save.className = "btn";
    save.textContent = "Save";
    save.addEventListener("click", async () => {
      const newLinks = new Set(links);
      const oldLinks = new Set((item.links || []).map((l) => l.id));
      item.links = Array.from(newLinks).map((id) => ({ id, type: "assoc" }));
      await upsertItem(item);
      const affected = /* @__PURE__ */ new Set([...oldLinks, ...newLinks]);
      for (const id of affected) {
        const other = idMap.get(id);
        if (!other) continue;
        other.links = other.links || [];
        const has = other.links.some((l) => l.id === item.id);
        const should = newLinks.has(id);
        if (should && !has) other.links.push({ id: item.id, type: "assoc" });
        if (!should && has) other.links = other.links.filter((l) => l.id !== item.id);
        await upsertItem(other);
      }
      document.body.removeChild(overlay);
      onSave && onSave();
    });
    actions.appendChild(cancel);
    actions.appendChild(save);
    card.appendChild(actions);
    overlay.appendChild(card);
    overlay.addEventListener("click", (e) => {
      if (e.target === overlay) document.body.removeChild(overlay);
    });
    document.body.appendChild(overlay);
    input.focus();
  }

  // js/ui/components/cardlist.js
  var kindColors = { disease: "var(--purple)", drug: "var(--green)", concept: "var(--blue)" };
  var fieldDefs = {
    disease: [
      ["etiology", "Etiology", "\u{1F9EC}"],
      ["pathophys", "Pathophys", "\u2699\uFE0F"],
      ["clinical", "Clinical", "\u{1FA7A}"],
      ["diagnosis", "Diagnosis", "\u{1F50E}"],
      ["treatment", "Treatment", "\u{1F48A}"],
      ["complications", "Complications", "\u26A0\uFE0F"],
      ["mnemonic", "Mnemonic", "\u{1F9E0}"]
    ],
    drug: [
      ["class", "Class", "\u{1F3F7}\uFE0F"],
      ["source", "Source", "\u{1F331}"],
      ["moa", "MOA", "\u2699\uFE0F"],
      ["uses", "Uses", "\u{1F48A}"],
      ["sideEffects", "Side Effects", "\u26A0\uFE0F"],
      ["contraindications", "Contraindications", "\u{1F6AB}"],
      ["mnemonic", "Mnemonic", "\u{1F9E0}"]
    ],
    concept: [
      ["type", "Type", "\u{1F3F7}\uFE0F"],
      ["definition", "Definition", "\u{1F4D6}"],
      ["mechanism", "Mechanism", "\u2699\uFE0F"],
      ["clinicalRelevance", "Clinical Relevance", "\u{1FA7A}"],
      ["example", "Example", "\u{1F4DD}"],
      ["mnemonic", "Mnemonic", "\u{1F9E0}"]
    ]
  };
  function escapeHtml4(str = "") {
    return String(str).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#39;");
  }
  function ensureExtras(item) {
    if (Array.isArray(item.extras) && item.extras.length) {
      return item.extras;
    }
    if (item.facts && item.facts.length) {
      return [{
        id: "legacy-facts",
        title: "Highlights",
        body: `<ul>${item.facts.map((f) => `<li>${escapeHtml4(f)}</li>`).join("")}</ul>`
      }];
    }
    return [];
  }
  var expanded = /* @__PURE__ */ new Set();
  var collapsedBlocks = /* @__PURE__ */ new Set();
  var collapsedWeeks = /* @__PURE__ */ new Set();
  var activeBlockKey = null;
  function createItemCard(item, onChange) {
    const card = document.createElement("div");
    card.className = `item-card card--${item.kind}`;
    const color = item.color || kindColors[item.kind] || "var(--gray)";
    card.style.borderTop = `3px solid ${color}`;
    const header = document.createElement("div");
    header.className = "card-header";
    const mainBtn = document.createElement("button");
    mainBtn.className = "card-title-btn";
    mainBtn.textContent = item.name || item.concept || "Untitled";
    mainBtn.setAttribute("aria-expanded", expanded.has(item.id));
    mainBtn.addEventListener("click", () => {
      if (expanded.has(item.id)) expanded.delete(item.id);
      else expanded.add(item.id);
      card.classList.toggle("expanded");
      mainBtn.setAttribute("aria-expanded", expanded.has(item.id));
    });
    header.appendChild(mainBtn);
    const settings = document.createElement("div");
    settings.className = "card-settings";
    const menu = document.createElement("div");
    menu.className = "card-menu hidden";
    menu.setAttribute("role", "menu");
    menu.setAttribute("aria-hidden", "true");
    const gear = document.createElement("button");
    gear.type = "button";
    gear.className = "icon-btn card-settings-toggle";
    gear.title = "Entry options";
    gear.setAttribute("aria-haspopup", "true");
    gear.setAttribute("aria-expanded", "false");
    gear.innerHTML = '<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M9.594 3.94c.09-.542.56-.94 1.11-.94h2.593c.55 0 1.02.398 1.11.94l.213 1.281c.063.374.313.686.645.87.074.04.147.083.22.127.325.196.72.257 1.075.124l1.217-.456a1.125 1.125 0 0 1 1.37.49l1.296 2.247a1.125 1.125 0 0 1-.26 1.431l-1.003.827c-.293.241-.438.613-.43.992a7.723 7.723 0 0 1 0 .255c-.008.378.137.75.43.991l1.004.827c.424.35.534.955.26 1.43l-1.298 2.247a1.125 1.125 0 0 1-1.369.491l-1.217-.456c-.355-.133-.75-.072-1.076.124a6.47 6.47 0 0 1-.22.128c-.331.183-.581.495-.644.869l-.213 1.281c-.09.543-.56.94-1.11.94h-2.594c-.55 0-1.019-.398-1.11-.94l-.213-1.281c-.062-.374-.312-.686-.644-.87a6.52 6.52 0 0 1-.22-.127c-.325-.196-.72-.257-1.076-.124l-1.217.456a1.125 1.125 0 0 1-1.369-.49l-1.297-2.247a1.125 1.125 0 0 1 .26-1.431l1.004-.827c.292-.24.437-.613.43-.991a6.932 6.932 0 0 1 0-.255c.007-.38-.138-.751-.43-.992l-1.004-.827a1.125 1.125 0 0 1-.26-1.43l1.297-2.247a1.125 1.125 0 0 1 1.37-.491l1.216.456c.356.133.751.072 1.076-.124.072-.044.146-.086.22-.128.332-.183.582-.495.644-.869z" stroke="currentColor" stroke-width="1.6" stroke-linecap="round" stroke-linejoin="round"/><circle cx="12" cy="12" r="2.8" stroke="currentColor" stroke-width="1.6"/></svg>';
    settings.append(gear, menu);
    header.appendChild(settings);
    function closeMenu() {
      menu.classList.add("hidden");
      menu.setAttribute("aria-hidden", "true");
      settings.classList.remove("open");
      gear.setAttribute("aria-expanded", "false");
      document.removeEventListener("mousedown", handleOutside);
    }
    function openMenu() {
      menu.classList.remove("hidden");
      menu.setAttribute("aria-hidden", "false");
      settings.classList.add("open");
      gear.setAttribute("aria-expanded", "true");
      document.addEventListener("mousedown", handleOutside);
    }
    function handleOutside(e) {
      if (!settings.contains(e.target)) {
        closeMenu();
      }
    }
    gear.addEventListener("click", (e) => {
      e.stopPropagation();
      if (menu.classList.contains("hidden")) openMenu();
      else closeMenu();
    });
    menu.addEventListener("click", (e) => e.stopPropagation());
    const fav = document.createElement("button");
    fav.className = "icon-btn";
    fav.textContent = item.favorite ? "\u2605" : "\u2606";
    fav.title = "Toggle Favorite";
    fav.setAttribute("aria-label", "Toggle Favorite");
    fav.addEventListener("click", async (e) => {
      e.stopPropagation();
      closeMenu();
      item.favorite = !item.favorite;
      await upsertItem(item);
      fav.textContent = item.favorite ? "\u2605" : "\u2606";
      onChange && onChange();
    });
    menu.appendChild(fav);
    const link = document.createElement("button");
    link.className = "icon-btn";
    link.textContent = "\u{1FAA2}";
    link.title = "Links";
    link.setAttribute("aria-label", "Manage links");
    link.addEventListener("click", (e) => {
      e.stopPropagation();
      closeMenu();
      openLinker(item, onChange);
    });
    menu.appendChild(link);
    const edit = document.createElement("button");
    edit.className = "icon-btn";
    edit.textContent = "\u270F\uFE0F";
    edit.title = "Edit";
    edit.setAttribute("aria-label", "Edit");
    edit.addEventListener("click", (e) => {
      e.stopPropagation();
      closeMenu();
      openEditor(item.kind, onChange, item);
    });
    menu.appendChild(edit);
    const copy = document.createElement("button");
    copy.className = "icon-btn";
    copy.textContent = "\u{1F4CB}";
    copy.title = "Copy Title";
    copy.setAttribute("aria-label", "Copy Title");
    copy.addEventListener("click", (e) => {
      e.stopPropagation();
      closeMenu();
      navigator.clipboard && navigator.clipboard.writeText(item.name || item.concept || "");
    });
    menu.appendChild(copy);
    const del = document.createElement("button");
    del.className = "icon-btn danger";
    del.textContent = "\u{1F5D1}\uFE0F";
    del.title = "Delete";
    del.setAttribute("aria-label", "Delete");
    del.addEventListener("click", async (e) => {
      e.stopPropagation();
      closeMenu();
      if (await confirmModal("Delete this item?")) {
        await deleteItem(item.id);
        onChange && onChange();
      }
    });
    menu.appendChild(del);
    card.appendChild(header);
    const body = document.createElement("div");
    body.className = "card-body";
    card.appendChild(body);
    function renderBody() {
      body.innerHTML = "";
      const identifiers = document.createElement("div");
      identifiers.className = "identifiers";
      (item.blocks || []).forEach((b) => {
        const chip = document.createElement("span");
        chip.className = "chip";
        chip.textContent = b;
        identifiers.appendChild(chip);
      });
      (item.weeks || []).forEach((w) => {
        const chip = document.createElement("span");
        chip.className = "chip";
        chip.textContent = "W" + w;
        identifiers.appendChild(chip);
      });
      if (item.lectures) {
        item.lectures.forEach((l) => {
          const chip = document.createElement("span");
          chip.className = "chip";
          chip.textContent = "\u{1F4DA} " + (l.name || l.id);
          identifiers.appendChild(chip);
        });
      }
      body.appendChild(identifiers);
      const defs = fieldDefs[item.kind] || [];
      defs.forEach(([f, label, icon]) => {
        if (!item[f]) return;
        const sec = document.createElement("div");
        sec.className = "section";
        sec.style.borderLeftColor = color;
        const tl = document.createElement("div");
        tl.className = "section-title";
        tl.textContent = label;
        if (icon) tl.prepend(icon + " ");
        sec.appendChild(tl);
        const txt = document.createElement("div");
        txt.className = "section-content";
        renderRichText(txt, item[f]);
        sec.appendChild(txt);
        body.appendChild(sec);
      });
      const extras = ensureExtras(item);
      extras.forEach((extra) => {
        if (!extra || !extra.body) return;
        const sec = document.createElement("div");
        sec.className = "section section--extra";
        const tl = document.createElement("div");
        tl.className = "section-title";
        tl.textContent = extra.title || "Additional Section";
        sec.appendChild(tl);
        const txt = document.createElement("div");
        txt.className = "section-content";
        renderRichText(txt, extra.body);
        sec.appendChild(txt);
        body.appendChild(sec);
      });
      if (item.links && item.links.length) {
        const lc = document.createElement("span");
        lc.className = "chip link-chip";
        lc.textContent = `\u{1FAA2} ${item.links.length}`;
        body.appendChild(lc);
      }
    }
    renderBody();
    if (expanded.has(item.id)) card.classList.add("expanded");
    function fit() {
      const headerH = header.offsetHeight;
      const maxH = card.clientHeight - headerH - 4;
      let size = parseFloat(getComputedStyle(body).fontSize);
      while (body.scrollHeight > maxH && size > 12) {
        size -= 1;
        body.style.fontSize = size + "px";
      }
    }
    requestAnimationFrame(fit);
    return card;
  }
  async function renderCardList(container, itemSource, kind, onChange) {
    container.innerHTML = "";
    const { blocks } = await loadBlockCatalog();
    const blockTitle = (id) => blocks.find((b) => b.blockId === id)?.title || id;
    const orderMap = new Map(blocks.map((b, i) => [b.blockId, i]));
    const blockWeekMap = /* @__PURE__ */ new Map();
    const allWeeks = /* @__PURE__ */ new Set();
    blocks.forEach((block) => {
      if (!block) return;
      const weeks = /* @__PURE__ */ new Set();
      if (Number.isFinite(block.weeks)) {
        for (let i = 1; i <= block.weeks; i++) weeks.add(i);
      }
      (block.lectures || []).forEach((lecture) => {
        if (typeof lecture.week === "number") weeks.add(lecture.week);
      });
      const sortedWeeks = Array.from(weeks).sort((a, b) => a - b);
      blockWeekMap.set(block.blockId, sortedWeeks);
      sortedWeeks.forEach((weekNumber) => allWeeks.add(weekNumber));
    });
    const sortedAllWeeks = Array.from(allWeeks).sort((a, b) => a - b);
    const groups = /* @__PURE__ */ new Map();
    function addItem(it) {
      if (!it) return;
      let block = "_";
      let week = "_";
      if (Array.isArray(it.lectures) && it.lectures.length) {
        let bestOrd = Infinity;
        let bestWeek = -Infinity;
        let bestLec = -Infinity;
        it.lectures.forEach((l) => {
          if (!l) return;
          const ord = orderMap.has(l.blockId) ? orderMap.get(l.blockId) : Infinity;
          if (ord < bestOrd || ord === bestOrd && (l.week > bestWeek || l.week === bestWeek && l.id > bestLec)) {
            block = l.blockId;
            week = l.week;
            bestOrd = ord;
            bestWeek = l.week;
            bestLec = l.id;
          }
        });
      } else {
        let bestOrd = Infinity;
        (Array.isArray(it.blocks) ? it.blocks : []).forEach((id) => {
          const ord = orderMap.has(id) ? orderMap.get(id) : Infinity;
          if (ord < bestOrd) {
            block = id;
            bestOrd = ord;
          }
        });
        if (Array.isArray(it.weeks) && it.weeks.length) {
          week = Math.max(...it.weeks);
        }
      }
      if (!groups.has(block)) {
        groups.set(block, /* @__PURE__ */ new Map());
      }
      const wkMap = groups.get(block);
      const current = wkMap.get(week) || [];
      current.push(it);
      wkMap.set(week, current);
    }
    if (itemSource) {
      if (typeof itemSource?.[Symbol.asyncIterator] === "function") {
        for await (const batch of itemSource) {
          if (Array.isArray(batch)) {
            batch.forEach(addItem);
          } else if (batch) {
            addItem(batch);
          }
        }
      } else if (typeof itemSource?.toArray === "function") {
        const collected = await itemSource.toArray();
        collected.forEach(addItem);
      } else if (Array.isArray(itemSource)) {
        itemSource.forEach(addItem);
      }
    }
    const sortedBlocks = Array.from(groups.keys()).sort((a, b) => {
      const ao = orderMap.has(a) ? orderMap.get(a) : Infinity;
      const bo = orderMap.has(b) ? orderMap.get(b) : Infinity;
      return ao - bo;
    });
    const layoutState = state.entryLayout;
    const toolbar = document.createElement("div");
    toolbar.className = "entry-layout-toolbar";
    const rawSort = state.filters?.sort;
    const sortOptions = ["updated", "created", "lecture", "name"];
    let currentSortField = "updated";
    let currentSortDirection = "desc";
    if (typeof rawSort === "string" && rawSort) {
      const parts = rawSort.split("-");
      if (parts.length === 1) {
        currentSortField = sortOptions.includes(parts[0]) ? parts[0] : "updated";
      } else {
        const [fieldPart, dirPart] = parts;
        currentSortField = sortOptions.includes(fieldPart) ? fieldPart : "updated";
        currentSortDirection = dirPart === "asc" ? "asc" : "desc";
      }
    } else if (rawSort && typeof rawSort === "object") {
      const mode = rawSort.mode;
      const dir = rawSort.direction;
      if (typeof mode === "string" && sortOptions.includes(mode)) {
        currentSortField = mode;
      }
      if (dir === "asc" || dir === "desc") {
        currentSortDirection = dir;
      }
    }
    const filterControls = document.createElement("div");
    filterControls.className = "entry-filter-controls";
    const currentBlockFilter = typeof state.filters?.block === "string" ? state.filters.block : "";
    const currentWeekFilter = state.filters?.week ?? "";
    const blockFilterLabel = document.createElement("label");
    blockFilterLabel.className = "entry-filter-select";
    blockFilterLabel.textContent = "Block";
    const blockFilterSelect = document.createElement("select");
    blockFilterSelect.className = "entry-filter-block";
    blockFilterSelect.setAttribute("aria-label", "Filter entries by block");
    const blockOptions = [
      { value: "", label: "All blocks" },
      { value: "__unlabeled", label: "Unlabeled" }
    ];
    blocks.forEach((block) => {
      if (!block) return;
      blockOptions.push({ value: block.blockId, label: blockTitle(block.blockId) });
    });
    blockOptions.forEach((opt) => {
      const option = document.createElement("option");
      option.value = opt.value;
      option.textContent = opt.label;
      blockFilterSelect.appendChild(option);
    });
    if (blockOptions.some((opt) => opt.value === currentBlockFilter)) {
      blockFilterSelect.value = currentBlockFilter;
    } else {
      blockFilterSelect.value = "";
    }
    blockFilterLabel.appendChild(blockFilterSelect);
    filterControls.appendChild(blockFilterLabel);
    const weekFilterLabel = document.createElement("label");
    weekFilterLabel.className = "entry-filter-select";
    weekFilterLabel.textContent = "Week";
    const weekFilterSelect = document.createElement("select");
    weekFilterSelect.className = "entry-filter-week";
    weekFilterSelect.setAttribute("aria-label", "Filter entries by week");
    weekFilterLabel.appendChild(weekFilterSelect);
    filterControls.appendChild(weekFilterLabel);
    function populateWeekFilter() {
      const selectedBlock = blockFilterSelect.value;
      weekFilterSelect.innerHTML = "";
      const defaultOption = document.createElement("option");
      defaultOption.value = "";
      defaultOption.textContent = "All weeks";
      weekFilterSelect.appendChild(defaultOption);
      if (selectedBlock === "__unlabeled") {
        weekFilterSelect.disabled = true;
        return;
      }
      weekFilterSelect.disabled = false;
      const weeks = selectedBlock && blockWeekMap.has(selectedBlock) ? blockWeekMap.get(selectedBlock) : sortedAllWeeks;
      if (!weeks.length) {
        const none = document.createElement("option");
        none.value = "";
        none.textContent = selectedBlock ? "No weeks available" : "No weeks defined";
        none.disabled = true;
        weekFilterSelect.appendChild(none);
        return;
      }
      weeks.forEach((weekNumber) => {
        const option = document.createElement("option");
        option.value = String(weekNumber);
        option.textContent = `Week ${weekNumber}`;
        weekFilterSelect.appendChild(option);
      });
    }
    toolbar.appendChild(filterControls);
    populateWeekFilter();
    const normalizedWeekFilter = currentWeekFilter === "" || currentWeekFilter == null ? "" : String(currentWeekFilter);
    if (normalizedWeekFilter && weekFilterSelect.querySelector(`option[value="${normalizedWeekFilter}"]`)) {
      weekFilterSelect.value = normalizedWeekFilter;
    } else {
      weekFilterSelect.value = "";
    }
    blockFilterSelect.addEventListener("change", () => {
      populateWeekFilter();
      weekFilterSelect.value = "";
      const nextBlock = blockFilterSelect.value || "";
      const patch = { block: nextBlock, week: "" };
      const currentBlockValue = state.filters.block || "";
      const currentWeekValue = state.filters.week || "";
      if (currentBlockValue !== patch.block || currentWeekValue !== patch.week) {
        setFilters(patch);
        onChange && onChange();
      }
    });
    weekFilterSelect.addEventListener("change", () => {
      if (weekFilterSelect.disabled) return;
      const raw = weekFilterSelect.value;
      const normalized2 = raw ? Number(raw) : "";
      if (normalized2 !== "" && !Number.isFinite(normalized2)) return;
      const currentValue = state.filters.week ?? "";
      const normalizedCurrent = currentValue === "" ? "" : Number(currentValue);
      if (normalized2 === "" && currentValue === "") return;
      if (normalized2 !== "" && String(normalizedCurrent) === String(normalized2)) return;
      setFilters({ week: normalized2 });
      onChange && onChange();
    });
    const sortControls = document.createElement("div");
    sortControls.className = "sort-controls";
    const sortLabel = document.createElement("label");
    sortLabel.className = "sort-select";
    sortLabel.textContent = "Sort by";
    const sortSelect = document.createElement("select");
    sortSelect.className = "sort-field";
    sortSelect.setAttribute("aria-label", "Sort entries");
    [
      { value: "updated", label: "Date Modified" },
      { value: "created", label: "Date Added" },
      { value: "lecture", label: "Lecture Added" },
      { value: "name", label: "Alphabetical" }
    ].forEach((opt) => {
      const option = document.createElement("option");
      option.value = opt.value;
      option.textContent = opt.label;
      sortSelect.appendChild(option);
    });
    sortSelect.value = currentSortField;
    sortLabel.appendChild(sortSelect);
    sortControls.appendChild(sortLabel);
    const directionBtn = document.createElement("button");
    directionBtn.type = "button";
    directionBtn.className = "sort-direction-btn";
    directionBtn.setAttribute("aria-label", "Toggle sort direction");
    directionBtn.setAttribute("title", "Toggle sort direction");
    function updateDirectionButton() {
      directionBtn.dataset.direction = currentSortDirection;
      directionBtn.textContent = currentSortDirection === "asc" ? "\u2191 Asc" : "\u2193 Desc";
    }
    function applySortChange() {
      const nextValue = `${currentSortField}-${currentSortDirection}`;
      if (state.filters.sort === nextValue) return;
      setFilters({ sort: nextValue });
      onChange && onChange();
    }
    updateDirectionButton();
    sortSelect.addEventListener("change", () => {
      const selected = sortSelect.value;
      currentSortField = sortOptions.includes(selected) ? selected : "updated";
      applySortChange();
    });
    directionBtn.addEventListener("click", () => {
      currentSortDirection = currentSortDirection === "asc" ? "desc" : "asc";
      updateDirectionButton();
      applySortChange();
    });
    sortControls.appendChild(directionBtn);
    toolbar.appendChild(sortControls);
    const viewToggle = document.createElement("div");
    viewToggle.className = "layout-toggle";
    const listBtn = document.createElement("button");
    listBtn.type = "button";
    listBtn.className = "layout-btn";
    setToggleState(listBtn, layoutState.mode === "list");
    listBtn.textContent = "List";
    listBtn.addEventListener("click", () => {
      if (layoutState.mode === "list") return;
      setEntryLayout({ mode: "list" });
      updateToolbar();
      applyLayout();
    });
    const gridBtn = document.createElement("button");
    gridBtn.type = "button";
    gridBtn.className = "layout-btn";
    setToggleState(gridBtn, layoutState.mode === "grid");
    gridBtn.textContent = "Grid";
    gridBtn.addEventListener("click", () => {
      if (layoutState.mode === "grid") return;
      setEntryLayout({ mode: "grid" });
      updateToolbar();
      applyLayout();
    });
    viewToggle.appendChild(listBtn);
    viewToggle.appendChild(gridBtn);
    toolbar.appendChild(viewToggle);
    const controlsToggle = document.createElement("button");
    controlsToggle.type = "button";
    controlsToggle.className = "layout-advanced-toggle";
    setToggleState(controlsToggle, layoutState.controlsVisible);
    controlsToggle.addEventListener("click", () => {
      setEntryLayout({ controlsVisible: !state.entryLayout.controlsVisible });
      updateToolbar();
    });
    toolbar.appendChild(controlsToggle);
    const controlsWrap = document.createElement("div");
    controlsWrap.className = "layout-controls";
    const controlsId = `layout-controls-${Math.random().toString(36).slice(2, 8)}`;
    controlsWrap.id = controlsId;
    controlsToggle.setAttribute("aria-controls", controlsId);
    toolbar.appendChild(controlsWrap);
    const columnWrap = document.createElement("label");
    columnWrap.className = "layout-control";
    columnWrap.textContent = "Columns";
    const columnInput = document.createElement("input");
    columnInput.type = "range";
    columnInput.min = "1";
    columnInput.max = "6";
    columnInput.step = "1";
    columnInput.value = String(layoutState.columns);
    const columnValue = document.createElement("span");
    columnValue.className = "layout-value";
    columnValue.textContent = String(layoutState.columns);
    columnInput.addEventListener("input", () => {
      setEntryLayout({ columns: Number(columnInput.value) });
      columnValue.textContent = String(state.entryLayout.columns);
      applyLayout();
    });
    columnWrap.appendChild(columnInput);
    columnWrap.appendChild(columnValue);
    controlsWrap.appendChild(columnWrap);
    const scaleWrap = document.createElement("label");
    scaleWrap.className = "layout-control";
    scaleWrap.textContent = "Scale";
    const scaleInput = document.createElement("input");
    scaleInput.type = "range";
    scaleInput.min = "0.6";
    scaleInput.max = "1.4";
    scaleInput.step = "0.05";
    scaleInput.value = String(layoutState.scale);
    const scaleValue = document.createElement("span");
    scaleValue.className = "layout-value";
    scaleValue.textContent = `${layoutState.scale.toFixed(2)}x`;
    scaleInput.addEventListener("input", () => {
      setEntryLayout({ scale: Number(scaleInput.value) });
      scaleValue.textContent = `${state.entryLayout.scale.toFixed(2)}x`;
      applyLayout();
    });
    scaleWrap.appendChild(scaleInput);
    scaleWrap.appendChild(scaleValue);
    controlsWrap.appendChild(scaleWrap);
    container.appendChild(toolbar);
    function updateToolbar() {
      const { mode, controlsVisible } = state.entryLayout;
      setToggleState(listBtn, mode === "list");
      setToggleState(gridBtn, mode === "grid");
      columnWrap.style.display = mode === "grid" ? "" : "none";
      controlsWrap.style.display = controlsVisible ? "" : "none";
      controlsWrap.setAttribute("aria-hidden", controlsVisible ? "false" : "true");
      controlsToggle.textContent = controlsVisible ? "Hide layout tools" : "Show layout tools";
      controlsToggle.setAttribute("aria-expanded", controlsVisible ? "true" : "false");
      setToggleState(controlsToggle, controlsVisible);
    }
    function applyLayout() {
      const lists = container.querySelectorAll(".card-list");
      lists.forEach((list) => {
        list.classList.toggle("grid-layout", state.entryLayout.mode === "grid");
        list.style.setProperty("--entry-scale", state.entryLayout.scale);
        list.style.setProperty("--entry-columns", state.entryLayout.columns);
      });
    }
    updateToolbar();
    const blockKeys = sortedBlocks.map((b) => String(b));
    function applyBlockActivation(nextKey) {
      const candidate = nextKey && blockKeys.includes(nextKey) ? nextKey : null;
      activeBlockKey = candidate;
      collapsedBlocks.clear();
      if (!activeBlockKey) {
        blockKeys.forEach((key) => collapsedBlocks.add(key));
      } else {
        blockKeys.forEach((key) => {
          if (key !== activeBlockKey) {
            collapsedBlocks.add(key);
          }
        });
      }
    }
    if (blockKeys.length) {
      const initial = activeBlockKey && blockKeys.includes(activeBlockKey) ? activeBlockKey : blockKeys[0];
      applyBlockActivation(initial);
    } else {
      applyBlockActivation(null);
    }
    const blockUpdaters = /* @__PURE__ */ new Map();
    const refreshBlocks = () => {
      blockUpdaters.forEach((fn) => fn());
    };
    sortedBlocks.forEach((b) => {
      const blockSec = document.createElement("section");
      blockSec.className = "block-section";
      const blockHeader = document.createElement("button");
      blockHeader.type = "button";
      blockHeader.className = "block-header";
      const blockLabel = b === "_" ? "Unassigned" : blockTitle(b);
      const blockKey = String(b);
      const bdef = blocks.find((bl) => bl.blockId === b);
      if (bdef?.color) blockHeader.style.background = bdef.color;
      function updateBlockState() {
        const isCollapsed = collapsedBlocks.has(blockKey);
        blockSec.classList.toggle("collapsed", isCollapsed);
        blockHeader.textContent = `${isCollapsed ? "\u25B8" : "\u25BE"} ${blockLabel}`;
        blockHeader.setAttribute("aria-expanded", String(!isCollapsed));
      }
      blockUpdaters.set(blockKey, updateBlockState);
      updateBlockState();
      blockHeader.addEventListener("click", () => {
        const isCollapsed = collapsedBlocks.has(blockKey);
        if (isCollapsed) {
          applyBlockActivation(blockKey);
        } else if (activeBlockKey === blockKey) {
          applyBlockActivation(null);
        } else {
          collapsedBlocks.add(blockKey);
        }
        refreshBlocks();
      });
      blockSec.appendChild(blockHeader);
      const wkMap = groups.get(b);
      if (!wkMap) {
        return;
      }
      const sortedWeeks = Array.from(wkMap.keys()).sort((a, b2) => {
        if (a === "_" && b2 !== "_") return 1;
        if (b2 === "_" && a !== "_") return -1;
        return Number(b2) - Number(a);
      });
      sortedWeeks.forEach((w) => {
        const weekSec = document.createElement("div");
        weekSec.className = "week-section";
        const weekHeader = document.createElement("button");
        weekHeader.type = "button";
        weekHeader.className = "week-header";
        const weekLabel = w === "_" ? "Unassigned" : `Week ${w}`;
        const weekKey = `${blockKey}__${w}`;
        function updateWeekState() {
          const isCollapsed = collapsedWeeks.has(weekKey);
          weekSec.classList.toggle("collapsed", isCollapsed);
          weekHeader.textContent = `${isCollapsed ? "\u25B8" : "\u25BE"} ${weekLabel}`;
          weekHeader.setAttribute("aria-expanded", String(!isCollapsed));
        }
        updateWeekState();
        weekHeader.addEventListener("click", () => {
          if (collapsedWeeks.has(weekKey)) collapsedWeeks.delete(weekKey);
          else collapsedWeeks.add(weekKey);
          updateWeekState();
        });
        weekSec.appendChild(weekHeader);
        const list = document.createElement("div");
        list.className = "card-list";
        list.style.setProperty("--entry-scale", state.entryLayout.scale);
        list.style.setProperty("--entry-columns", state.entryLayout.columns);
        list.classList.toggle("grid-layout", state.entryLayout.mode === "grid");
        const rows = wkMap.get(w) || [];
        function renderChunk(start = 0) {
          if (!rows.length) return;
          const slice = rows.slice(start, start + 200);
          if (!slice.length) return;
          const fragment = document.createDocumentFragment();
          slice.forEach((it) => {
            fragment.appendChild(createItemCard(it, onChange));
          });
          list.appendChild(fragment);
          if (start + 200 < rows.length) requestAnimationFrame(() => renderChunk(start + 200));
        }
        renderChunk();
        weekSec.appendChild(list);
        blockSec.appendChild(weekSec);
      });
      container.appendChild(blockSec);
    });
    applyLayout();
  }

  // js/ui/components/cards.js
  var UNASSIGNED_BLOCK_KEY = "__unassigned__";
  var MISC_LECTURE_KEY = "__misc__";
  var KIND_COLORS = {
    disease: "var(--pink)",
    drug: "var(--blue)",
    concept: "var(--green)"
  };
  var KIND_FIELDS = {
    disease: [
      ["etiology", "Etiology", "\u{1F9EC}"],
      ["pathophys", "Pathophys", "\u2699\uFE0F"],
      ["clinical", "Clinical", "\u{1FA7A}"],
      ["diagnosis", "Diagnosis", "\u{1F50E}"],
      ["treatment", "Treatment", "\u{1F48A}"],
      ["complications", "Complications", "\u26A0\uFE0F"],
      ["mnemonic", "Mnemonic", "\u{1F9E0}"]
    ],
    drug: [
      ["class", "Class", "\u{1F3F7}\uFE0F"],
      ["source", "Source", "\u{1F331}"],
      ["moa", "MOA", "\u2699\uFE0F"],
      ["uses", "Uses", "\u{1F48A}"],
      ["sideEffects", "Side Effects", "\u26A0\uFE0F"],
      ["contraindications", "Contraindications", "\u{1F6AB}"],
      ["mnemonic", "Mnemonic", "\u{1F9E0}"]
    ],
    concept: [
      ["type", "Type", "\u{1F3F7}\uFE0F"],
      ["definition", "Definition", "\u{1F4D6}"],
      ["mechanism", "Mechanism", "\u2699\uFE0F"],
      ["clinicalRelevance", "Clinical Relevance", "\u{1FA7A}"],
      ["example", "Example", "\u{1F4DD}"],
      ["mnemonic", "Mnemonic", "\u{1F9E0}"]
    ]
  };
  function formatWeekLabel(value) {
    if (typeof value === "number" && Number.isFinite(value)) {
      return `Week ${value}`;
    }
    return "Unscheduled";
  }
  var TITLE_CACHE = /* @__PURE__ */ new WeakMap();
  function titleFromItem(item) {
    if (item && typeof item === "object") {
      if (TITLE_CACHE.has(item)) {
        return TITLE_CACHE.get(item);
      }
      const title = item?.name || item?.concept || "Untitled Card";
      TITLE_CACHE.set(item, title);
      return title;
    }
    return item?.name || item?.concept || "Untitled Card";
  }
  function compareByCreation(a, b) {
    const av = typeof a?.createdAt === "number" ? a.createdAt : 0;
    const bv = typeof b?.createdAt === "number" ? b.createdAt : 0;
    if (av !== bv) return av - bv;
    const at = titleFromItem(a);
    const bt = titleFromItem(b);
    return at.localeCompare(bt);
  }
  function escapeHtml5(str = "") {
    return String(str).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#39;");
  }
  function ensureExtras2(item) {
    if (Array.isArray(item?.extras) && item.extras.length) {
      return item.extras;
    }
    if (item?.facts && item.facts.length) {
      return [{
        id: "legacy-facts",
        title: "Highlights",
        body: `<ul>${item.facts.map((f) => `<li>${escapeHtml5(f)}</li>`).join("")}</ul>`
      }];
    }
    return [];
  }
  function getItemAccent(item) {
    if (item?.color) return item.color;
    if (item?.kind && KIND_COLORS[item.kind]) return KIND_COLORS[item.kind];
    return "var(--accent)";
  }
  function collectLectureColors(cards, limit = 5) {
    if (!Array.isArray(cards) || !cards.length) {
      return ["var(--accent)"];
    }
    const seen = /* @__PURE__ */ new Set();
    const colors = [];
    for (const card of cards) {
      const accent = getItemAccent(card);
      if (!seen.has(accent)) {
        seen.add(accent);
        colors.push(accent);
        if (colors.length >= limit) break;
      }
    }
    if (!colors.length) colors.push("var(--accent)");
    return colors.slice(0, Math.max(1, limit));
  }
  function buildGradient(colors) {
    const palette2 = colors && colors.length ? colors : ["var(--accent)"];
    if (palette2.length === 1) {
      const single = palette2[0];
      return `linear-gradient(135deg, ${single} 0%, color-mix(in srgb, ${single} 38%, transparent) 100%)`;
    }
    const stops = palette2.map((color, idx) => {
      const pct = palette2.length === 1 ? 0 : Math.round(idx / (palette2.length - 1) * 100);
      return `${color} ${pct}%`;
    });
    return `linear-gradient(135deg, ${stops.join(", ")})`;
  }
  function getLecturePalette(cards) {
    const colors = collectLectureColors(cards);
    return {
      accent: colors[0] || "var(--accent)",
      colors,
      gradient: buildGradient(colors)
    };
  }
  function getLectureAccent(cards) {
    return getLecturePalette(cards).accent;
  }
  async function renderCards(container, items, onChange) {
    container.innerHTML = "";
    container.classList.add("cards-tab");
    const sortedItems = Array.isArray(items) ? items.slice().sort(compareByCreation) : [];
    const { blocks: blockDefs } = await loadBlockCatalog();
    const blockLookup = new Map(blockDefs.map((def) => [def.blockId, def]));
    const blockOrder = new Map(blockDefs.map((def, idx) => [def.blockId, idx]));
    const itemLookup = new Map(sortedItems.map((item) => [item.id, item]));
    const deckContextLookup = /* @__PURE__ */ new Map();
    const cardsState = state.cards || {};
    const stateInitialized = cardsState?.initialized === true;
    const hasCollapsedBlockState = stateInitialized && Array.isArray(cardsState.collapsedBlocks);
    const hasCollapsedWeekState = stateInitialized && Array.isArray(cardsState.collapsedWeeks);
    const collapsedBlockSet = new Set(hasCollapsedBlockState ? cardsState.collapsedBlocks : []);
    const collapsedWeekSet = new Set(hasCollapsedWeekState ? cardsState.collapsedWeeks : []);
    const scheduleFrame = typeof requestAnimationFrame === "function" ? ((cb) => requestAnimationFrame(cb)) : ((cb) => setTimeout(cb, 16));
    let persistHandle = 0;
    function schedulePersist() {
      if (persistHandle) return;
      persistHandle = scheduleFrame(() => {
        persistHandle = 0;
        setCardsState({
          collapsedBlocks: Array.from(collapsedBlockSet),
          collapsedWeeks: Array.from(collapsedWeekSet)
        });
      });
    }
    function setBlockCollapsedState(key, collapsed) {
      if (!key) return;
      if (collapsed) {
        if (!collapsedBlockSet.has(key)) {
          collapsedBlockSet.add(key);
          schedulePersist();
        }
      } else if (collapsedBlockSet.delete(key)) {
        schedulePersist();
      }
    }
    function setWeekCollapsedState(key, collapsed) {
      if (!key) return;
      if (collapsed) {
        if (!collapsedWeekSet.has(key)) {
          collapsedWeekSet.add(key);
          schedulePersist();
        }
      } else if (collapsedWeekSet.delete(key)) {
        schedulePersist();
      }
    }
    const blockBuckets = /* @__PURE__ */ new Map();
    function ensureBlock(blockId) {
      const key = blockId || UNASSIGNED_BLOCK_KEY;
      if (!blockBuckets.has(key)) {
        const def = blockLookup.get(blockId);
        const order = typeof blockId === "string" ? blockOrder.get(blockId) ?? 999 : 1200;
        blockBuckets.set(key, {
          key,
          blockId: blockId || null,
          title: def?.title || (blockId ? blockId : "Unassigned"),
          accent: def?.color || null,
          order,
          weeks: /* @__PURE__ */ new Map()
        });
      }
      return blockBuckets.get(key);
    }
    function ensureWeek(blockBucket, weekValue) {
      const weekKey = weekValue == null ? "none" : String(weekValue);
      if (!blockBucket.weeks.has(weekKey)) {
        blockBucket.weeks.set(weekKey, {
          key: weekKey,
          value: typeof weekValue === "number" && Number.isFinite(weekValue) ? weekValue : null,
          label: formatWeekLabel(weekValue),
          order: typeof weekValue === "number" && Number.isFinite(weekValue) ? weekValue : 999,
          lectures: /* @__PURE__ */ new Map()
        });
      }
      return blockBucket.weeks.get(weekKey);
    }
    function ensureLecture(weekBucket, lectureKey2, lectureName) {
      if (!weekBucket.lectures.has(lectureKey2)) {
        weekBucket.lectures.set(lectureKey2, {
          key: lectureKey2,
          title: lectureName || "Lecture",
          cards: []
        });
      }
      return weekBucket.lectures.get(lectureKey2);
    }
    sortedItems.forEach((item) => {
      const lectureRefs = Array.isArray(item.lectures) ? item.lectures : [];
      if (lectureRefs.length) {
        lectureRefs.forEach((ref) => {
          const blockBucket = ensureBlock(ref.blockId);
          const weekBucket = ensureWeek(blockBucket, ref.week);
          const lectureKeyParts = [ref.blockId || blockBucket.key];
          if (ref.id != null) lectureKeyParts.push(`lec-${ref.id}`);
          if (ref.name) lectureKeyParts.push(ref.name);
          const lectureKey2 = lectureKeyParts.join("::") || `${blockBucket.key}-${titleFromItem(item)}`;
          const lecture = ensureLecture(weekBucket, lectureKey2, ref.name || (ref.id != null ? `Lecture ${ref.id}` : "Lecture"));
          if (!lecture.cards.includes(item)) {
            lecture.cards.push(item);
          }
        });
      } else if (Array.isArray(item.blocks) && item.blocks.length) {
        item.blocks.forEach((blockId) => {
          const blockBucket = ensureBlock(blockId);
          const weeks = Array.isArray(item.weeks) && item.weeks.length ? item.weeks : [null];
          weeks.forEach((weekVal) => {
            const weekBucket = ensureWeek(blockBucket, weekVal);
            const lecture = ensureLecture(weekBucket, `${blockBucket.key}::${MISC_LECTURE_KEY}`, "Ungrouped Items");
            lecture.cards.push(item);
          });
        });
      } else {
        const blockBucket = ensureBlock(null);
        const weekBucket = ensureWeek(blockBucket, null);
        const lecture = ensureLecture(weekBucket, `${blockBucket.key}::${MISC_LECTURE_KEY}`, "Unassigned Items");
        lecture.cards.push(item);
      }
    });
    const blockSections = Array.from(blockBuckets.values()).map((block) => {
      const weeks = Array.from(block.weeks.values()).map((week) => {
        const lectures = Array.from(week.lectures.values()).map((lec) => {
          const cards = lec.cards.slice().sort(compareByCreation);
          return {
            ...lec,
            cards,
            palette: getLecturePalette(cards)
          };
        }).filter((lec) => lec.cards.length > 0).sort((a, b) => a.title.localeCompare(b.title));
        const totalCards2 = lectures.reduce((sum, lec) => sum + lec.cards.length, 0);
        return {
          ...week,
          lectures,
          totalCards: totalCards2,
          lectureCount: lectures.length
        };
      }).filter((week) => week.totalCards > 0).sort((a, b) => {
        const aValue = Number.isFinite(a.value) ? a.value : -Infinity;
        const bValue = Number.isFinite(b.value) ? b.value : -Infinity;
        if (aValue !== bValue) return bValue - aValue;
        return a.label.localeCompare(b.label);
      });
      const totalCards = weeks.reduce((sum, week) => sum + week.totalCards, 0);
      const lectureCount = weeks.reduce((sum, week) => sum + week.lectureCount, 0);
      return {
        ...block,
        weeks,
        totalCards,
        lectureCount
      };
    }).filter((block) => block.totalCards > 0).sort((a, b) => a.order - b.order || a.title.localeCompare(b.title));
    blockSections.forEach((block) => {
      block.weeks.forEach((week) => {
        week.lectures.forEach((lecture) => {
          lecture.cards.forEach((card) => {
            if (!deckContextLookup.has(card.id)) {
              deckContextLookup.set(card.id, []);
            }
            deckContextLookup.get(card.id).push({ block, week, lecture });
          });
        });
      });
    });
    if (!hasCollapsedBlockState) {
      blockSections.forEach((block) => {
        if (block?.key) collapsedBlockSet.add(block.key);
      });
      schedulePersist();
    }
    if (!hasCollapsedWeekState) {
      blockSections.forEach((block) => {
        block.weeks.forEach((week) => {
          const key = `${block.key}::${week.key}`;
          collapsedWeekSet.add(key);
        });
      });
      schedulePersist();
    }
    const gridPayload = /* @__PURE__ */ new WeakMap();
    const activeGrids = /* @__PURE__ */ new Set();
    let gridPumpHandle = 0;
    const getTime = typeof performance === "object" && typeof performance.now === "function" ? () => performance.now() : () => Date.now();
    const eagerGridQueue = [];
    const eagerGridSet = /* @__PURE__ */ new Set();
    let eagerGridFlushHandle = 0;
    function requestEagerGrid(grid) {
      if (!grid || eagerGridSet.has(grid)) return;
      if (eagerGridQueue.length >= 6) return;
      eagerGridQueue.push(grid);
      eagerGridSet.add(grid);
      if (eagerGridFlushHandle) return;
      eagerGridFlushHandle = scheduleFrame(() => {
        eagerGridFlushHandle = 0;
        while (eagerGridQueue.length) {
          const nextGrid = eagerGridQueue.shift();
          eagerGridSet.delete(nextGrid);
          if (!nextGrid || nextGrid.dataset.rendered === "true") continue;
          if (!nextGrid.isConnected) continue;
          ensureGridRendered(nextGrid);
        }
      });
    }
    const deckTileObserver = typeof IntersectionObserver === "function" ? new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          deckTileObserver.unobserve(entry.target);
          startGridRender(entry.target);
        }
      });
    }, { rootMargin: "200px 0px" }) : null;
    function scheduleGridPump() {
      if (gridPumpHandle) return;
      gridPumpHandle = requestAnimationFrame(() => {
        gridPumpHandle = 0;
        pumpGridRenders();
      });
    }
    function startGridRender(grid) {
      if (!grid || grid.dataset.rendered === "true") return;
      activeGrids.add(grid);
      scheduleGridPump();
    }
    function renderGridChunk(grid) {
      const payload = gridPayload.get(grid);
      if (!payload) {
        grid.dataset.rendered = "true";
        grid.classList.remove("is-loading");
        return;
      }
      const { entries } = payload;
      let { index = 0 } = payload;
      const frag = document.createDocumentFragment();
      const chunkStart = getTime();
      let elapsed = 0;
      while (index < entries.length && elapsed < 6) {
        const { block, week, lecture } = entries[index++];
        frag.appendChild(createDeckTile(block, week, lecture));
        elapsed = getTime() - chunkStart;
      }
      payload.index = index;
      grid.appendChild(frag);
      if (index > 0) {
        grid.classList.remove("is-loading");
      }
      if (index >= entries.length) {
        grid.dataset.rendered = "true";
        grid.classList.remove("is-loading");
        gridPayload.delete(grid);
      }
    }
    function pumpGridRenders() {
      if (!activeGrids.size) return;
      const iterator = Array.from(activeGrids);
      const frameStart = getTime();
      for (const grid of iterator) {
        renderGridChunk(grid);
        if (grid.dataset.rendered === "true") {
          activeGrids.delete(grid);
        }
        if (getTime() - frameStart > 14) break;
      }
      if (activeGrids.size) {
        scheduleGridPump();
      }
    }
    function registerGrid(grid, entries, options = {}) {
      grid.dataset.rendered = "false";
      grid.classList.add("is-loading");
      gridPayload.set(grid, { entries, index: 0 });
      const deferInitialRender = Boolean(options?.deferInitialRender);
      if (!deferInitialRender) {
        requestEagerGrid(grid);
      }
      if (deckTileObserver) {
        requestAnimationFrame(() => {
          if (grid.dataset.rendered === "true") return;
          deckTileObserver.observe(grid);
        });
      } else if (!deferInitialRender) {
        startGridRender(grid);
      }
    }
    function ensureGridRendered(grid) {
      if (!grid || grid.dataset.rendered === "true") return;
      if (deckTileObserver) {
        deckTileObserver.unobserve(grid);
      }
      startGridRender(grid);
    }
    const catalog = document.createElement("div");
    catalog.className = "card-catalog";
    container.appendChild(catalog);
    const overlay = document.createElement("div");
    overlay.className = "deck-overlay";
    overlay.dataset.active = "false";
    overlay.setAttribute("role", "dialog");
    overlay.setAttribute("aria-modal", "true");
    const viewer = document.createElement("div");
    viewer.className = "deck-viewer";
    overlay.appendChild(viewer);
    container.appendChild(overlay);
    let activeKeyHandler = null;
    let persistRelatedVisibility = false;
    let deckDirty = false;
    function closeDeck() {
      overlay.dataset.active = "false";
      viewer.innerHTML = "";
      viewer.className = "deck-viewer";
      if (activeKeyHandler) {
        document.removeEventListener("keydown", activeKeyHandler);
        activeKeyHandler = null;
      }
      persistRelatedVisibility = false;
      if (deckDirty && typeof onChange === "function") {
        const result = onChange();
        if (result && typeof result.catch === "function") {
          result.catch(() => {
          });
        }
      }
      deckDirty = false;
    }
    overlay.addEventListener("click", (evt) => {
      if (evt.target === overlay) closeDeck();
    });
    function openDeck(context, targetCardId = null) {
      const { block, week, lecture } = context;
      overlay.dataset.active = "true";
      viewer.innerHTML = "";
      if (activeKeyHandler) {
        document.removeEventListener("keydown", activeKeyHandler);
        activeKeyHandler = null;
      }
      const baseContext = { block, week, lecture };
      const slideCache = /* @__PURE__ */ new WeakMap();
      const handleCardEdited = (item) => {
        deckDirty = true;
        slideCache.delete(item);
        if (lecture.cards[idx] === item) {
          renderCard();
        }
      };
      function prepareSlideActions(slide, item) {
        if (!slide) return;
        const editBtn = slide.querySelector('[data-role="deck-edit"]');
        if (editBtn) {
          editBtn.addEventListener("click", () => {
            openEditor(item.kind, () => handleCardEdited(item), item);
          });
        }
      }
      function acquireSlide(item) {
        if (!slideCache.has(item)) {
          slideCache.set(item, () => createDeckSlide(item, baseContext, { allowEdit: true }));
        }
        const factory = slideCache.get(item);
        const slide = factory();
        slide.classList.add("deck-slide-full");
        prepareSlideActions(slide, item);
        return slide;
      }
      viewer.className = "deck-viewer deck-viewer-card";
      const closeBtn = document.createElement("button");
      closeBtn.type = "button";
      closeBtn.className = "deck-close";
      closeBtn.innerHTML = '<span aria-hidden="true">\xD7</span><span class="sr-only">Close deck</span>';
      closeBtn.addEventListener("click", closeDeck);
      viewer.appendChild(closeBtn);
      const summary = document.createElement("div");
      summary.className = "deck-card-summary";
      const crumb = document.createElement("span");
      crumb.className = "deck-card-summary-crumb";
      const crumbPieces = [];
      if (block.title) crumbPieces.push(block.title);
      if (week?.label) crumbPieces.push(week.label);
      crumb.textContent = crumbPieces.join(" \u2022 ");
      summary.appendChild(crumb);
      const title = document.createElement("h2");
      title.className = "deck-card-summary-title";
      title.textContent = lecture.title;
      summary.appendChild(title);
      const counter = document.createElement("span");
      counter.className = "deck-card-summary-counter";
      counter.textContent = `Card 1 of ${lecture.cards.length}`;
      summary.appendChild(counter);
      viewer.appendChild(summary);
      const stage = document.createElement("div");
      stage.className = "deck-card-stage-full";
      const prev = document.createElement("button");
      prev.type = "button";
      prev.className = "deck-card-nav deck-card-nav-prev";
      prev.innerHTML = '<span class="sr-only">Previous card</span><svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M14 18L8 12L14 6" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"/></svg>';
      const slideHolder = document.createElement("div");
      slideHolder.className = "deck-card-holder";
      const next = document.createElement("button");
      next.type = "button";
      next.className = "deck-card-nav deck-card-nav-next";
      next.innerHTML = '<span class="sr-only">Next card</span><svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M10 6L16 12L10 18" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"/></svg>';
      stage.appendChild(prev);
      stage.appendChild(slideHolder);
      stage.appendChild(next);
      viewer.appendChild(stage);
      const relatedPanel = document.createElement("div");
      relatedPanel.className = "deck-related-panel";
      const toggle = document.createElement("button");
      toggle.type = "button";
      toggle.className = "deck-related-toggle";
      toggle.dataset.active = "false";
      toggle.textContent = "Show related cards";
      toggle.setAttribute("aria-expanded", "false");
      relatedPanel.appendChild(toggle);
      const relatedWrapId = `deck-related-${Math.random().toString(36).slice(2)}`;
      const relatedWrap = document.createElement("div");
      relatedWrap.className = "deck-related";
      relatedWrap.dataset.visible = "false";
      relatedWrap.id = relatedWrapId;
      relatedWrap.setAttribute("aria-hidden", "true");
      toggle.setAttribute("aria-controls", relatedWrapId);
      relatedPanel.appendChild(relatedWrap);
      viewer.appendChild(relatedPanel);
      let idx = 0;
      if (targetCardId != null) {
        const initialIdx = lecture.cards.findIndex((card) => card.id === targetCardId);
        if (initialIdx >= 0) idx = initialIdx;
      }
      let showRelated = persistRelatedVisibility;
      function updateToggle(current) {
        const linkCount = Array.isArray(current?.links) ? current.links.length : 0;
        const hasLinks = linkCount > 0;
        toggle.disabled = !hasLinks;
        toggle.dataset.active = showRelated && hasLinks ? "true" : "false";
        toggle.setAttribute("aria-expanded", showRelated && hasLinks ? "true" : "false");
        toggle.textContent = hasLinks ? `${showRelated ? "Hide" : "Show"} related (${linkCount})` : "No related cards";
      }
      function renderRelated(current) {
        relatedWrap.innerHTML = "";
        if (!showRelated) {
          relatedWrap.dataset.visible = "false";
          relatedWrap.setAttribute("aria-hidden", "true");
          toggle.dataset.active = "false";
          toggle.setAttribute("aria-expanded", "false");
          return;
        }
        const links = Array.isArray(current?.links) ? current.links : [];
        links.forEach((link) => {
          const related = itemLookup.get(link.id);
          if (related) {
            relatedWrap.appendChild(createRelatedCard(related, baseContext));
          }
        });
        const visible = relatedWrap.children.length > 0;
        relatedWrap.dataset.visible = visible ? "true" : "false";
        relatedWrap.setAttribute("aria-hidden", visible ? "false" : "true");
        if (!visible) {
          toggle.dataset.active = "false";
          toggle.setAttribute("aria-expanded", "false");
        }
      }
      function renderCard() {
        const current = lecture.cards[idx];
        slideHolder.innerHTML = "";
        const slide = acquireSlide(current);
        slideHolder.appendChild(slide);
        const accent = getItemAccent(current);
        viewer.style.setProperty("--deck-current-accent", accent);
        counter.textContent = `Card ${idx + 1} of ${lecture.cards.length}`;
        const multiple = lecture.cards.length > 1;
        prev.disabled = !multiple;
        next.disabled = !multiple;
        updateToggle(current);
        renderRelated(current);
      }
      prev.addEventListener("click", () => {
        idx = (idx - 1 + lecture.cards.length) % lecture.cards.length;
        renderCard();
      });
      next.addEventListener("click", () => {
        idx = (idx + 1) % lecture.cards.length;
        renderCard();
      });
      toggle.addEventListener("click", () => {
        if (toggle.disabled) return;
        showRelated = !showRelated;
        persistRelatedVisibility = showRelated;
        updateToggle(lecture.cards[idx]);
        renderRelated(lecture.cards[idx]);
      });
      const keyHandler2 = (event) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault();
          prev.click();
        } else if (event.key === "ArrowRight") {
          event.preventDefault();
          next.click();
        } else if (event.key === "Escape") {
          event.preventDefault();
          closeDeck();
        }
      };
      document.addEventListener("keydown", keyHandler2);
      activeKeyHandler = keyHandler2;
      renderCard();
      requestAnimationFrame(() => closeBtn.focus());
    }
    function createCollapseIcon() {
      const icon = document.createElement("span");
      icon.className = "card-collapse-icon";
      icon.innerHTML = '<svg viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M6 8L10 12L14 8" stroke="currentColor" stroke-width="1.6" stroke-linecap="round" stroke-linejoin="round"/></svg>';
      return icon;
    }
    function createDeckTile(block, week, lecture) {
      const tile = document.createElement("button");
      tile.type = "button";
      tile.className = "deck-tile";
      tile.setAttribute("aria-label", `${lecture.title} (${lecture.cards.length} cards)`);
      const palette2 = lecture.palette || getLecturePalette(lecture.cards);
      lecture.palette = palette2;
      const accent = palette2.accent;
      const stack = document.createElement("div");
      stack.className = "deck-stack";
      stack.style.setProperty("--deck-accent", accent);
      stack.style.setProperty("--deck-gradient", palette2.gradient);
      const preview = lecture.cards.slice(0, 4);
      stack.style.setProperty("--spread", preview.length > 0 ? (preview.length - 1) / 2 : 0);
      if (!preview.length) {
        const placeholder = document.createElement("div");
        placeholder.className = "stack-card stack-card-empty";
        placeholder.style.setProperty("--index", "0");
        placeholder.textContent = "No cards yet";
        stack.appendChild(placeholder);
      } else {
        preview.forEach((card, idx) => {
          const mini = document.createElement("div");
          mini.className = "stack-card";
          mini.style.setProperty("--index", String(idx));
          mini.textContent = titleFromItem(card);
          stack.appendChild(mini);
        });
      }
      tile.style.setProperty("--deck-accent", accent);
      tile.style.setProperty("--deck-gradient", palette2.gradient);
      tile.appendChild(stack);
      const info = document.createElement("div");
      info.className = "deck-info";
      const count = document.createElement("span");
      count.className = "deck-count-pill";
      count.textContent = `${lecture.cards.length} card${lecture.cards.length === 1 ? "" : "s"}`;
      info.appendChild(count);
      const label = document.createElement("h3");
      label.className = "deck-title";
      label.textContent = lecture.title;
      info.appendChild(label);
      const meta = document.createElement("div");
      meta.className = "deck-meta";
      const pieces = [];
      if (block.title) pieces.push(block.title);
      if (week?.label) pieces.push(week.label);
      meta.textContent = pieces.join(" \u2022 ");
      info.appendChild(meta);
      tile.appendChild(info);
      const open = () => openDeck({ block, week, lecture });
      tile.addEventListener("click", open);
      tile.addEventListener("keydown", (evt) => {
        if (evt.key === "Enter" || evt.key === " ") {
          evt.preventDefault();
          open();
        }
      });
      return tile;
    }
    function createMetaChip(text, icon) {
      const chip = document.createElement("span");
      chip.className = "deck-chip";
      if (icon) {
        const iconEl = document.createElement("span");
        iconEl.className = "deck-chip-icon";
        iconEl.textContent = icon;
        chip.appendChild(iconEl);
      }
      const label = document.createElement("span");
      label.className = "deck-chip-label";
      label.textContent = text;
      chip.appendChild(label);
      return chip;
    }
    function createDeckSlide(item, context, options = {}) {
      const slide = document.createElement("article");
      slide.className = "deck-slide";
      const accent = getItemAccent(item);
      slide.style.setProperty("--slide-accent", accent);
      const heading = document.createElement("header");
      heading.className = "deck-slide-header";
      const crumb = document.createElement("div");
      crumb.className = "deck-slide-crumb";
      const crumbPieces = [];
      if (context.block?.title) crumbPieces.push(context.block.title);
      if (context.week?.label) crumbPieces.push(context.week.label);
      crumb.textContent = crumbPieces.join(" \u2022 ");
      heading.appendChild(crumb);
      if (options.allowEdit) {
        const editBtn = document.createElement("button");
        editBtn.type = "button";
        editBtn.className = "deck-slide-edit";
        editBtn.dataset.role = "deck-edit";
        editBtn.innerHTML = '<span class="deck-slide-edit-icon">\u270F\uFE0F</span><span>Edit card</span>';
        heading.appendChild(editBtn);
      }
      const title = document.createElement("h3");
      title.className = "deck-slide-title";
      title.textContent = titleFromItem(item);
      heading.appendChild(title);
      const kind = document.createElement("span");
      kind.className = "deck-slide-kind";
      kind.textContent = item.kind ? item.kind.toUpperCase() : "CARD";
      heading.appendChild(kind);
      slide.appendChild(heading);
      const meta = document.createElement("div");
      meta.className = "deck-slide-meta";
      const seen = /* @__PURE__ */ new Set();
      const addMeta = (text, icon) => {
        if (!text || seen.has(text)) return;
        seen.add(text);
        meta.appendChild(createMetaChip(text, icon));
      };
      if (context.block?.title) addMeta(context.block.title, "\u{1F9ED}");
      if (context.week?.label) addMeta(context.week.label, "\u{1F4C6}");
      (item.blocks || []).forEach((blockId) => {
        const label = blockLookup.get(blockId)?.title || blockId;
        addMeta(label, "\u{1F9F1}");
      });
      (item.weeks || []).forEach((weekValue) => addMeta(`Week ${weekValue}`, "\u{1F4C5}"));
      (item.lectures || []).forEach((lec) => addMeta(lec.name || (lec.id != null ? `Lecture ${lec.id}` : ""), "\u{1F4DA}"));
      if (meta.children.length) slide.appendChild(meta);
      const sections = document.createElement("div");
      sections.className = "deck-slide-sections";
      const buildContentSection = ({ labelText, iconText = "", bodyHtml = "", extra = false }) => {
        const section = document.createElement("section");
        section.className = "deck-section";
        if (extra) section.classList.add("deck-section-extra");
        section.style.setProperty("--section-accent", accent);
        section.classList.add("is-collapsed");
        const headerBtn = document.createElement("button");
        headerBtn.type = "button";
        headerBtn.className = "deck-section-header";
        headerBtn.setAttribute("aria-expanded", "false");
        const titleWrap = document.createElement("div");
        titleWrap.className = "deck-section-title";
        if (iconText) {
          const iconEl = document.createElement("span");
          iconEl.className = "deck-section-icon";
          iconEl.textContent = iconText;
          titleWrap.appendChild(iconEl);
        }
        const labelNode = document.createElement("span");
        labelNode.textContent = labelText;
        titleWrap.appendChild(labelNode);
        headerBtn.appendChild(titleWrap);
        headerBtn.appendChild(createCollapseIcon());
        const bodyWrap = document.createElement("div");
        bodyWrap.className = "deck-section-body";
        const content = document.createElement("div");
        content.className = "deck-section-content";
        renderRichText(content, bodyHtml, { clozeMode: "interactive" });
        bodyWrap.appendChild(content);
        section.appendChild(headerBtn);
        section.appendChild(bodyWrap);
        headerBtn.addEventListener("click", () => {
          const collapsed = section.classList.toggle("is-collapsed");
          headerBtn.setAttribute("aria-expanded", collapsed ? "false" : "true");
        });
        return section;
      };
      const defs = KIND_FIELDS[item.kind] || [];
      defs.forEach(([field, label, icon]) => {
        const value = item[field];
        if (!value) return;
        sections.appendChild(buildContentSection({ labelText: label, iconText: icon, bodyHtml: value }));
      });
      ensureExtras2(item).forEach((extra) => {
        if (!extra?.body) return;
        sections.appendChild(
          buildContentSection({
            labelText: extra.title || "Additional Notes",
            bodyHtml: extra.body,
            extra: true
          })
        );
      });
      if (!sections.children.length) {
        const empty = document.createElement("p");
        empty.className = "deck-section-empty";
        empty.textContent = "No detailed content yet for this card.";
        sections.appendChild(empty);
      }
      slide.appendChild(sections);
      return slide;
    }
    function resolveDeckContext(item, origin) {
      const contexts = deckContextLookup.get(item.id);
      if (!contexts || !contexts.length) return null;
      if (origin?.lecture?.key) {
        const lectureMatch = contexts.find((ctx) => ctx.lecture.key === origin.lecture.key);
        if (lectureMatch) return lectureMatch;
      }
      if (origin?.block?.key) {
        const blockMatch = contexts.find((ctx) => ctx.block.key === origin.block.key);
        if (blockMatch) return blockMatch;
      }
      return contexts[0];
    }
    function createRelatedCard(item, originContext) {
      const entry = document.createElement("button");
      entry.type = "button";
      entry.className = "related-card-chip";
      const accent = getItemAccent(item);
      entry.style.setProperty("--related-accent", accent);
      entry.title = titleFromItem(item);
      const heading = document.createElement("strong");
      heading.className = "related-card-title";
      heading.textContent = titleFromItem(item);
      entry.appendChild(heading);
      const kind = document.createElement("span");
      kind.className = "related-card-kind";
      kind.textContent = item.kind ? item.kind.toUpperCase() : "";
      entry.appendChild(kind);
      const target = resolveDeckContext(item, originContext);
      if (!target) {
        entry.disabled = true;
        entry.classList.add("is-disabled");
      } else {
        entry.addEventListener("click", () => {
          openDeck(target, item.id);
        });
      }
      return entry;
    }
    function buildBlockSection(block) {
      const section = document.createElement("section");
      section.className = "card-block-section";
      const blockKey = block.key;
      const firstLecture = block.weeks.find((week) => week.lectures.length)?.lectures.find((lec) => lec.cards.length);
      const blockAccent = block.accent || getLectureAccent(firstLecture?.cards || []);
      if (blockAccent) section.style.setProperty("--block-accent", blockAccent);
      const header = document.createElement("button");
      header.type = "button";
      header.className = "card-block-header";
      const blockInitiallyCollapsed = collapsedBlockSet.has(blockKey);
      header.setAttribute("aria-expanded", blockInitiallyCollapsed ? "false" : "true");
      const heading = document.createElement("div");
      heading.className = "card-block-heading";
      const swatch = document.createElement("span");
      swatch.className = "card-block-mark";
      heading.appendChild(swatch);
      const title = document.createElement("span");
      title.className = "card-block-title";
      title.textContent = block.title;
      heading.appendChild(title);
      header.appendChild(heading);
      const stats = document.createElement("span");
      stats.className = "card-block-stats";
      stats.textContent = `${block.lectureCount} lecture${block.lectureCount === 1 ? "" : "s"} \u2022 ${block.totalCards} card${block.totalCards === 1 ? "" : "s"}`;
      header.appendChild(stats);
      const icon = createCollapseIcon();
      header.appendChild(icon);
      section.appendChild(header);
      const body = document.createElement("div");
      body.className = "card-block-body";
      section.appendChild(body);
      if (blockInitiallyCollapsed) {
        section.classList.add("is-collapsed");
      }
      let blockWeekGrids = [];
      function populateBody() {
        if (body.dataset.populated === "true") return;
        body.dataset.populated = "true";
        const frag = document.createDocumentFragment();
        const grids = [];
        block.weeks.forEach((week) => {
          const weekSection = document.createElement("div");
          weekSection.className = "card-week-section";
          const weekAccent = getLectureAccent(week.lectures.find((lec) => lec.cards.length)?.cards || []);
          if (weekAccent) weekSection.style.setProperty("--week-accent", weekAccent);
          const weekHeader = document.createElement("button");
          weekHeader.type = "button";
          weekHeader.className = "card-week-header";
          const weekStateKey = `${blockKey}::${week.key}`;
          const weekInitiallyCollapsed = collapsedWeekSet.has(weekStateKey) && hasCollapsedWeekState;
          weekHeader.setAttribute("aria-expanded", weekInitiallyCollapsed ? "false" : "true");
          const weekTitle = document.createElement("span");
          weekTitle.className = "card-week-title";
          weekTitle.textContent = week.label;
          weekHeader.appendChild(weekTitle);
          const weekStats = document.createElement("span");
          weekStats.className = "card-week-stats";
          weekStats.textContent = `${week.lectureCount} lecture${week.lectureCount === 1 ? "" : "s"} \u2022 ${week.totalCards} card${week.totalCards === 1 ? "" : "s"}`;
          weekHeader.appendChild(weekStats);
          weekHeader.appendChild(createCollapseIcon());
          const deckGrid = document.createElement("div");
          deckGrid.className = "deck-grid";
          registerGrid(deckGrid, week.lectures.map((lecture) => ({ block, week, lecture })), {
            deferInitialRender: weekInitiallyCollapsed
          });
          if (weekInitiallyCollapsed) {
            weekSection.classList.add("is-collapsed");
          }
          grids.push({ grid: deckGrid, section: weekSection });
          weekSection.appendChild(weekHeader);
          weekSection.appendChild(deckGrid);
          frag.appendChild(weekSection);
          weekHeader.addEventListener("click", () => {
            const collapsed = weekSection.classList.toggle("is-collapsed");
            weekHeader.setAttribute("aria-expanded", collapsed ? "false" : "true");
            setWeekCollapsedState(weekStateKey, collapsed);
            if (!collapsed) {
              ensureGridRendered(deckGrid);
            }
          });
        });
        blockWeekGrids = grids;
        body.appendChild(frag);
      }
      function ensureVisibleWeekGrids() {
        blockWeekGrids.forEach(({ grid, section: weekSection }) => {
          if (!weekSection.classList.contains("is-collapsed")) {
            ensureGridRendered(grid);
          }
        });
      }
      if (!blockInitiallyCollapsed) {
        populateBody();
        requestAnimationFrame(ensureVisibleWeekGrids);
      }
      header.addEventListener("click", () => {
        const collapsed = section.classList.toggle("is-collapsed");
        header.setAttribute("aria-expanded", collapsed ? "false" : "true");
        setBlockCollapsedState(blockKey, collapsed);
        if (!collapsed) {
          populateBody();
          ensureVisibleWeekGrids();
        }
      });
      return section;
    }
    if (!blockSections.length) {
      const empty = document.createElement("div");
      empty.className = "cards-empty";
      const heading = document.createElement("h3");
      heading.textContent = "No cards match your filters yet";
      empty.appendChild(heading);
      const body = document.createElement("p");
      body.textContent = "Assign lectures, blocks, or create new entries to populate this view.";
      empty.appendChild(body);
      catalog.appendChild(empty);
      return;
    }
    const renderQueue = blockSections.slice();
    function pump() {
      const start = getTime();
      const frag = document.createDocumentFragment();
      let appended = 0;
      let elapsed = 0;
      while (renderQueue.length && elapsed < 12) {
        frag.appendChild(buildBlockSection(renderQueue.shift()));
        appended += 1;
        elapsed = getTime() - start;
      }
      if (appended) {
        catalog.appendChild(frag);
      }
      if (renderQueue.length) {
        requestAnimationFrame(pump);
      }
    }
    pump();
  }

  // js/study/study-sessions.js
  var pendingLoad = null;
  function clone4(value) {
    if (value === void 0) return null;
    return deepClone(value);
  }
  function safeClone(value, fallback = null) {
    try {
      const result = clone4(value);
      if (result === null && fallback !== void 0) {
        return clone4(fallback ?? null);
      }
      return result;
    } catch (err) {
      console.warn("Failed to clone study session value", err);
      if (fallback === void 0) return null;
      try {
        return clone4(fallback ?? null);
      } catch (_) {
        if (Array.isArray(fallback)) return [];
        if (fallback && typeof fallback === "object") return {};
        return fallback ?? null;
      }
    }
  }
  function sanitizeRatings(map) {
    if (!map || typeof map !== "object" || Array.isArray(map)) return {};
    const next = {};
    Object.entries(map).forEach(([key, value]) => {
      if (typeof key !== "string") return;
      if (typeof value === "string") {
        next[key] = value;
      }
    });
    return next;
  }
  function sanitizeAnswers(map) {
    if (!map || typeof map !== "object" || Array.isArray(map)) return {};
    const next = {};
    Object.entries(map).forEach(([key, value]) => {
      if (typeof key !== "string" || !value || typeof value !== "object") return;
      const entry = {
        value: typeof value.value === "string" ? value.value : "",
        isCorrect: Boolean(value.isCorrect),
        checked: Boolean(value.checked),
        revealed: Boolean(value.revealed)
      };
      next[key] = entry;
    });
    return next;
  }
  function sanitizePoolEntry(entry) {
    if (entry === null || entry === void 0) return null;
    if (typeof entry !== "object") return entry;
    return safeClone(entry, {});
  }
  function sanitizeSession(mode, session) {
    const source = safeClone(session, {});
    const next = source && typeof source === "object" ? source : {};
    delete next.dict;
    if (Array.isArray(next.pool)) {
      next.pool = next.pool.map((item) => sanitizePoolEntry(item)).filter((item) => item !== null && item !== void 0);
    } else {
      next.pool = [];
    }
    if (typeof next.idx !== "number" || Number.isNaN(next.idx)) {
      next.idx = 0;
    }
    next.idx = next.pool.length ? Math.max(0, Math.min(Math.floor(next.idx), next.pool.length - 1)) : 0;
    if (next.answers && typeof next.answers === "object" && !Array.isArray(next.answers)) {
      next.answers = sanitizeAnswers(next.answers);
    } else if (next.answers !== void 0) {
      next.answers = {};
    }
    if (next.ratings && typeof next.ratings === "object" && !Array.isArray(next.ratings)) {
      next.ratings = sanitizeRatings(next.ratings);
    } else {
      next.ratings = {};
    }
    if (mode === "review") {
      next.mode = "review";
    } else if (typeof next.mode !== "string" || next.mode !== "review") {
      next.mode = "study";
    }
    return next;
  }
  function sanitizeCohort(list) {
    const cloned = safeClone(list, []);
    if (!Array.isArray(cloned)) return [];
    return cloned.map((item) => sanitizePoolEntry(item)).filter((item) => item !== null && item !== void 0);
  }
  function sanitizeMetadata(meta) {
    const cloned = safeClone(meta, {});
    return cloned && typeof cloned === "object" && !Array.isArray(cloned) ? cloned : {};
  }
  async function hydrateStudySessions(force = false) {
    if (!force && state.studySessionsLoaded) {
      return state.studySessions || {};
    }
    if (!pendingLoad) {
      pendingLoad = listStudySessions().then((entries) => {
        const map = {};
        entries.forEach((entry) => {
          if (entry && entry.mode) {
            map[entry.mode] = {
              mode: entry.mode,
              updatedAt: entry.updatedAt || Date.now(),
              session: sanitizeSession(entry.mode, entry.session),
              cohort: sanitizeCohort(entry.cohort),
              metadata: sanitizeMetadata(entry.metadata)
            };
          }
        });
        setStudySessions(map);
        return state.studySessions;
      }).catch((err) => {
        console.error("Failed to load study sessions", err);
        clearStudySessionsState();
        setStudySessions({});
        return state.studySessions;
      }).finally(() => {
        pendingLoad = null;
      });
    }
    return pendingLoad;
  }
  function getStudySessionEntry(mode) {
    return state.studySessions && state.studySessions[mode] || null;
  }
  async function persistStudySession(mode, payload) {
    if (!mode) throw new Error("Mode is required to save study session");
    const entry = {
      mode,
      updatedAt: Date.now(),
      session: sanitizeSession(mode, payload?.session ?? {}),
      cohort: sanitizeCohort(payload?.cohort ?? []),
      metadata: sanitizeMetadata(payload?.metadata ?? {})
    };
    await saveStudySessionRecord(entry);
    setStudySessionEntry(mode, entry);
    return entry;
  }
  async function removeStudySession(mode) {
    if (!mode) return;
    await deleteStudySessionRecord(mode);
    setStudySessionEntry(mode, null);
  }
  async function removeAllStudySessions() {
    await clearAllStudySessionRecords();
    setStudySessions({});
  }

  // js/ui/components/sections.js
  var SECTION_DEFS = {
    disease: [
      { key: "etiology", label: "Etiology" },
      { key: "pathophys", label: "Pathophys" },
      { key: "clinical", label: "Clinical Presentation" },
      { key: "diagnosis", label: "Diagnosis" },
      { key: "treatment", label: "Treatment" },
      { key: "complications", label: "Complications" },
      { key: "mnemonic", label: "Mnemonic" }
    ],
    drug: [
      { key: "moa", label: "Mechanism" },
      { key: "uses", label: "Uses" },
      { key: "sideEffects", label: "Side Effects" },
      { key: "contraindications", label: "Contraindications" },
      { key: "mnemonic", label: "Mnemonic" }
    ],
    concept: [
      { key: "definition", label: "Definition" },
      { key: "mechanism", label: "Mechanism" },
      { key: "clinicalRelevance", label: "Clinical Relevance" },
      { key: "example", label: "Example" },
      { key: "mnemonic", label: "Mnemonic" }
    ]
  };
  function sectionDefsForKind(kind) {
    return SECTION_DEFS[kind] || [];
  }

  // js/ui/components/section-utils.js
  var EXTRA_SECTION_PREFIX = "extra:";
  function escapeHtml6(str = "") {
    return String(str).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#39;");
  }
  function rawExtras(item) {
    if (Array.isArray(item?.extras) && item.extras.length) {
      return item.extras;
    }
    if (Array.isArray(item?.facts) && item.facts.length) {
      return [{
        id: "legacy-facts",
        title: "Highlights",
        body: `<ul>${item.facts.map((f) => `<li>${escapeHtml6(f)}</li>`).join("")}</ul>`
      }];
    }
    return [];
  }
  function normalizeExtras(item) {
    const extras = rawExtras(item);
    const seenKeys = /* @__PURE__ */ new Set();
    return extras.map((extra, index) => {
      const source = extra && typeof extra === "object" ? extra : {};
      const title = typeof source.title === "string" ? source.title.trim() : "";
      const body = typeof source.body === "string" ? source.body : "";
      let keyId = source.id != null && `${source.id}`.trim() ? `${source.id}`.trim() : `idx-${index}`;
      let key = `${EXTRA_SECTION_PREFIX}${keyId}`;
      let attempt = 0;
      while (seenKeys.has(key)) {
        attempt += 1;
        key = `${EXTRA_SECTION_PREFIX}${keyId}-${attempt}`;
      }
      seenKeys.add(key);
      return {
        key,
        id: source.id ?? null,
        title,
        body,
        index,
        source
      };
    });
  }
  function findExtraByKey(item, key) {
    if (!key || !key.startsWith(EXTRA_SECTION_PREFIX)) return null;
    return normalizeExtras(item).find((entry) => entry.key === key) || null;
  }
  function hasRichContent(value) {
    if (typeof document === "undefined") {
      if (value == null) return false;
      const text = String(value).replace(/<[^>]*>/g, " ").replace(/&nbsp;/g, " ").trim();
      return text.length > 0;
    }
    return hasRichTextContent(value);
  }
  function hasSectionContent(item, key) {
    if (!item || !key) return false;
    if (key.startsWith(EXTRA_SECTION_PREFIX)) {
      const extra = findExtraByKey(item, key);
      return extra ? hasRichContent(extra.body) : false;
    }
    const defs = sectionDefsForKind(item.kind);
    if (!defs.some((def) => def.key === key)) return false;
    const raw = item[key];
    if (raw === null || raw === void 0) return false;
    return hasRichContent(raw);
  }
  function sectionsForItem(item, allowedKeys = null) {
    const defs = sectionDefsForKind(item.kind);
    const allowSet = allowedKeys ? new Set(allowedKeys) : null;
    const sections = defs.filter((def) => (!allowSet || allowSet.has(def.key)) && hasSectionContent(item, def.key)).map((def) => ({ key: def.key, label: def.label, content: item?.[def.key] || "" }));
    normalizeExtras(item).forEach((extra) => {
      if (!hasRichContent(extra.body)) return;
      sections.push({
        key: extra.key,
        label: extra.title || "Additional Notes",
        content: extra.body,
        extra: true,
        extraId: extra.id
      });
    });
    return sections;
  }
  function getSectionLabel(item, key) {
    if (key && key.startsWith(EXTRA_SECTION_PREFIX)) {
      const extra = findExtraByKey(item, key);
      return extra ? extra.title || "Additional Notes" : key;
    }
    const defs = sectionDefsForKind(item.kind);
    const def = defs.find((entry) => entry.key === key);
    return def ? def.label : key;
  }
  function getSectionContent(item, key) {
    if (key && key.startsWith(EXTRA_SECTION_PREFIX)) {
      const extra = findExtraByKey(item, key);
      return extra ? extra.body || "" : "";
    }
    return item?.[key] || "";
  }

  // js/review/scheduler.js
  var UNASSIGNED_LECTURE_TOKEN = "__unassigned|__none";
  function digestContent(value) {
    if (value == null) return null;
    const str = typeof value === "string" ? value : JSON.stringify(value);
    if (!str) return null;
    let hash = 0;
    for (let i = 0; i < str.length; i += 1) {
      hash = hash * 31 + str.charCodeAt(i) >>> 0;
    }
    return hash.toString(16);
  }
  function normalizeLectureScope(scope) {
    if (!Array.isArray(scope) || !scope.length) return [];
    const normalized2 = scope.map((entry) => typeof entry === "string" ? entry.trim() : "").filter(Boolean);
    return Array.from(new Set(normalized2)).sort();
  }
  function computeLectureScope(item) {
    if (!item || !Array.isArray(item.lectures) || !item.lectures.length) {
      return [UNASSIGNED_LECTURE_TOKEN];
    }
    const tokens = item.lectures.map((lecture) => {
      if (!lecture || typeof lecture !== "object") return "";
      const blockId = lecture.blockId == null ? "" : String(lecture.blockId);
      const id = lecture.id == null ? "" : String(lecture.id);
      return `${blockId}|${id}`.trim();
    });
    return normalizeLectureScope(tokens);
  }
  function computeSectionDigest(item, key) {
    if (!item || !key) return null;
    const raw = getSectionContent(item, key);
    return digestContent(raw);
  }
  var cachedDurations = null;
  async function getReviewDurations() {
    if (cachedDurations) return cachedDurations;
    try {
      const settings = await getSettings();
      cachedDurations = normalizeReviewSteps(settings?.reviewSteps);
    } catch (err) {
      console.warn("Failed to load review settings, using defaults", err);
      cachedDurations = { ...DEFAULT_REVIEW_STEPS };
    }
    return cachedDurations;
  }
  function ensureItemSr(item) {
    if (!item || typeof item !== "object") return { version: SR_VERSION, sections: {} };
    const sr = item.sr && typeof item.sr === "object" ? item.sr : { version: SR_VERSION, sections: {} };
    if (sr.version !== SR_VERSION || typeof sr.sections !== "object" || !sr.sections) {
      item.sr = normalizeSrRecord(sr);
      return item.sr;
    }
    item.sr.sections = item.sr.sections || {};
    return item.sr;
  }
  function ensureSectionState(item, key) {
    const sr = ensureItemSr(item);
    if (!sr.sections[key] || typeof sr.sections[key] !== "object") {
      sr.sections[key] = defaultSectionState();
    } else {
      sr.sections[key] = normalizeSectionRecord(sr.sections[key]);
    }
    return sr.sections[key];
  }
  function getSectionStateSnapshot(item, key) {
    const sr = item?.sr;
    if (!sr || typeof sr !== "object") return null;
    const entry = sr.sections && typeof sr.sections === "object" ? sr.sections[key] : null;
    if (!entry || typeof entry !== "object") return null;
    const normalized2 = normalizeSectionRecord(entry);
    const digest = computeSectionDigest(item, key);
    const scope = computeLectureScope(item);
    const storedDigest = normalized2.contentDigest;
    const storedScope = normalizeLectureScope(normalized2.lectureScope);
    const removedLectures = storedScope.length ? storedScope.some((token) => !scope.includes(token)) : false;
    const contentChanged = storedDigest != null && digest != null && storedDigest !== digest;
    if (contentChanged || removedLectures) {
      const nowTs = Date.now();
      normalized2.streak = 0;
      normalized2.lastRating = null;
      normalized2.last = nowTs;
      normalized2.due = nowTs;
      normalized2.retired = false;
    }
    normalized2.contentDigest = digest;
    normalized2.lectureScope = scope;
    sr.sections[key] = normalized2;
    return normalized2;
  }
  function rateSection(item, key, rating, durations, now = Date.now()) {
    if (!item || !key) return null;
    const steps = normalizeReviewSteps(durations);
    if (rating === RETIRE_RATING) {
      const section2 = ensureSectionState(item, key);
      section2.streak = 0;
      section2.lastRating = RETIRE_RATING;
      section2.last = now;
      section2.due = Number.MAX_SAFE_INTEGER;
      section2.retired = true;
      section2.contentDigest = computeSectionDigest(item, key);
      section2.lectureScope = computeLectureScope(item);
      return section2;
    }
    const normalizedRating = REVIEW_RATINGS.includes(rating) ? rating : "good";
    const section = ensureSectionState(item, key);
    section.contentDigest = computeSectionDigest(item, key);
    section.lectureScope = computeLectureScope(item);
    let streak = Number.isFinite(section.streak) ? section.streak : 0;
    switch (normalizedRating) {
      case "again":
        streak = 0;
        break;
      case "hard":
        streak = Math.max(1, streak || 0);
        break;
      case "good":
        streak = (streak || 0) + 1;
        break;
      case "easy":
        streak = (streak || 0) + 2;
        break;
      default:
        streak = (streak || 0) + 1;
        break;
    }
    const baseMinutes = steps[normalizedRating] ?? DEFAULT_REVIEW_STEPS[normalizedRating];
    const multiplier = normalizedRating === "again" ? 1 : Math.max(1, streak || 1);
    const intervalMinutes = baseMinutes * multiplier;
    section.streak = streak;
    section.lastRating = normalizedRating;
    section.last = now;
    section.retired = false;
    section.due = now + Math.round(intervalMinutes * 60 * 1e3);
    return section;
  }
  function collectReviewEntries(items, { now = Date.now(), predicate } = {}) {
    const results = [];
    if (!Array.isArray(items) || !items.length) return results;
    for (const item of items) {
      const sections = sectionsForItem(item);
      for (const section of sections) {
        const snapshot = getSectionStateSnapshot(item, section.key);
        if (!snapshot || snapshot.retired) continue;
        if (typeof predicate === "function" && !predicate(snapshot, now, item, section)) continue;
        results.push({
          item,
          itemId: item.id,
          sectionKey: section.key,
          sectionLabel: section.label,
          due: snapshot.due
        });
      }
    }
    results.sort((a, b) => a.due - b.due);
    return results;
  }
  function collectDueSections(items, { now = Date.now() } = {}) {
    return collectReviewEntries(items, {
      now,
      predicate: (snapshot, currentNow) => Boolean(snapshot.last) && snapshot.due <= currentNow
    });
  }
  function collectUpcomingSections(items, { now = Date.now(), limit = 50 } = {}) {
    const entries = collectReviewEntries(items, {
      now,
      predicate: (snapshot, currentNow) => {
        if (!snapshot.last) return false;
        const due = snapshot.due;
        if (!Number.isFinite(due)) return false;
        if (due === Number.MAX_SAFE_INTEGER) return false;
        return due > currentNow;
      }
    });
    if (Number.isFinite(limit) && limit > 0) {
      return entries.slice(0, limit);
    }
    return entries;
  }

  // js/review/pool.js
  var DEFAULT_KINDS2 = ["disease", "drug", "concept"];
  async function loadReviewSourceItems() {
    const existingCohort = Array.isArray(state.cohort) && state.cohort.length ? state.cohort : null;
    if (existingCohort) {
      return existingCohort;
    }
    const kinds = Array.isArray(state.builder?.types) && state.builder.types.length ? state.builder.types : DEFAULT_KINDS2;
    const seenIds = /* @__PURE__ */ new Set();
    const items = [];
    for (const kind of kinds) {
      try {
        const entries = await listItemsByKind(kind);
        if (!Array.isArray(entries)) continue;
        for (const item of entries) {
          if (!item) continue;
          const id = item.id || `${kind}::${items.length}`;
          if (seenIds.has(id)) continue;
          seenIds.add(id);
          items.push(item);
        }
      } catch (err) {
        console.warn("Failed to load review items for kind", kind, err);
      }
    }
    return items;
  }

  // js/ui/components/builder.js
  var MODE_KEY = {
    Flashcards: "flashcards",
    Quiz: "quiz",
    Blocks: "blocks"
  };
  var lectureSource = {};
  var builderBlockOrder = [];
  var builderWeekMap = /* @__PURE__ */ new Map();
  var pendingCohortUpdate = null;
  var lastAppliedSelectionSignature = null;
  function snapshotSelection() {
    const types = Array.isArray(state.builder.types) ? [...state.builder.types] : [];
    const blocks = Array.isArray(state.builder.blocks) ? [...state.builder.blocks] : [];
    const lectures = Array.isArray(state.builder.lectures) ? [...state.builder.lectures] : [];
    return {
      types,
      blocks,
      lectures,
      onlyFav: Boolean(state.builder.onlyFav)
    };
  }
  function selectionSignature(selection) {
    if (!selection || typeof selection !== "object") return "";
    const types = Array.isArray(selection.types) ? [...selection.types].sort() : [];
    const blocks = Array.isArray(selection.blocks) ? [...selection.blocks].sort() : [];
    const lectures = Array.isArray(selection.lectures) ? [...selection.lectures].sort() : [];
    const onlyFav = selection.onlyFav ? 1 : 0;
    return JSON.stringify({ types, blocks, lectures, onlyFav });
  }
  function ensureCohortSync({ force = false } = {}) {
    const selection = snapshotSelection();
    const signature = selectionSignature(selection);
    if (!force && signature === lastAppliedSelectionSignature && Array.isArray(state.cohort)) {
      return Promise.resolve(state.cohort);
    }
    if (pendingCohortUpdate && pendingCohortUpdate.signature === signature) {
      return pendingCohortUpdate.promise;
    }
    const promise = gatherItems(selection).then((items) => {
      const currentSignature = selectionSignature(snapshotSelection());
      if (currentSignature !== signature) {
        return ensureCohortSync({ force: true });
      }
      setCohort(items);
      resetBlockMode();
      lastAppliedSelectionSignature = signature;
      return items;
    }).catch((err) => {
      console.warn("Failed to assemble study cohort", err);
      throw err;
    }).finally(() => {
      if (pendingCohortUpdate && pendingCohortUpdate.signature === signature) {
        pendingCohortUpdate = null;
      }
    });
    pendingCohortUpdate = { promise, signature };
    return promise;
  }
  function setLectureSource(map) {
    lectureSource = {};
    for (const [blockId, list] of Object.entries(map || {})) {
      lectureSource[blockId] = Array.isArray(list) ? list.map((lecture) => ({ ...lecture })) : [];
    }
  }
  function lectureListFor(blockId, options = {}) {
    const list = lectureSource[blockId];
    if (!Array.isArray(list)) return [];
    if (options.clone === false) return list;
    return list.map((lecture) => ({ ...lecture }));
  }
  function collectReviewCount(items) {
    try {
      return collectDueSections(items, { now: Date.now() }).length;
    } catch (err) {
      console.warn("Failed to calculate review queue size", err);
      return 0;
    }
  }
  function notifyBuilderChanged({ selectionChanged = false } = {}) {
    removeAllStudySessions().catch((err) => console.warn("Failed to clear saved sessions", err));
    if (selectionChanged) {
      Promise.resolve().then(() => ensureCohortSync({ force: true })).catch((err) => console.warn("Failed to refresh study selection", err));
    }
  }
  async function renderBuilder(root, redraw) {
    const [blocks] = await Promise.all([
      loadBlocks(),
      hydrateStudySessions().catch((err) => {
        console.error("Unable to load study sessions", err);
        return null;
      })
    ]);
    root.innerHTML = "";
    const wrap = document.createElement("div");
    wrap.className = "builder";
    root.appendChild(wrap);
    drawBuilder(wrap, blocks, redraw);
  }
  async function loadBlocks() {
    const catalog = await loadBlockCatalog();
    const lectureLists = { ...catalog.lectureLists };
    catalog.blocks.forEach((block) => {
      if (!Array.isArray(lectureLists[block.blockId])) {
        lectureLists[block.blockId] = [];
      }
    });
    lectureLists.__unlabeled = [];
    setLectureSource(lectureLists);
    const blocks = catalog.blocks.map((block) => ({ ...block }));
    blocks.push({ blockId: "__unlabeled", title: "Unlabeled", weeks: 0 });
    return blocks;
  }
  function drawBuilder(container, blocks, redraw) {
    container.innerHTML = "";
    if (state.builder.weeks.length) {
      setBuilder({ weeks: [] });
    }
    const rerender = () => drawBuilder(container, blocks, redraw);
    const contexts = blocks.map((block) => {
      const blockId = block.blockId;
      const lectures = lectureListFor(blockId);
      lectures.sort((a, b) => {
        const weekDiff = (a.week ?? 0) - (b.week ?? 0);
        if (weekDiff !== 0) return weekDiff;
        return (a.name || "").localeCompare(b.name || "");
      });
      const weeks = groupByWeek(lectures);
      return { block, lectures, weeks };
    });
    builderBlockOrder = contexts.map((ctx) => ctx.block.blockId);
    builderWeekMap = /* @__PURE__ */ new Map();
    contexts.forEach((ctx) => {
      const blockId = ctx.block.blockId;
      const entries = ctx.weeks.map(({ week }) => ({
        key: weekKeyFor(blockId, week),
        week
      }));
      builderWeekMap.set(blockId, entries);
    });
    const activeBlockId = ensureActiveBlock(contexts);
    ensureWeekForBlock(activeBlockId);
    const layout = document.createElement("div");
    layout.className = "builder-layout";
    container.appendChild(layout);
    const blockColumn = document.createElement("div");
    blockColumn.className = "builder-blocks";
    layout.appendChild(blockColumn);
    contexts.forEach((context) => {
      blockColumn.appendChild(renderBlockPanel(context, rerender));
    });
    const controls = renderControls(rerender, redraw);
    layout.appendChild(controls);
  }
  function ensureActiveBlock(contexts) {
    if (!Array.isArray(contexts) || !contexts.length) {
      if (state.builder.activeBlockId || state.builder.collapsedBlocks && state.builder.collapsedBlocks.length || state.builder.activeWeekKey || state.builder.collapsedWeeks && state.builder.collapsedWeeks.length) {
        setBuilder({ activeBlockId: "", collapsedBlocks: [], activeWeekKey: "", collapsedWeeks: [] });
      }
      return "";
    }
    const blockIds = builderBlockOrder;
    let activeBlockId = state.builder.activeBlockId;
    if (!activeBlockId || !blockIds.includes(activeBlockId)) {
      activeBlockId = chooseDefaultBlock(contexts);
    }
    if (!activeBlockId && blockIds.length) {
      activeBlockId = blockIds[0];
    }
    setActiveBlock(activeBlockId);
    return activeBlockId;
  }
  function chooseDefaultBlock(contexts) {
    const lectureSelections = Array.isArray(state.builder.lectures) ? state.builder.lectures : [];
    if (lectureSelections.length) {
      const last = lectureSelections[lectureSelections.length - 1];
      const [blockId] = last.split("|");
      if (blockId && builderBlockOrder.includes(blockId)) return blockId;
    }
    const selectedBlocks = Array.isArray(state.builder.blocks) ? state.builder.blocks : [];
    const blockMatch = selectedBlocks.find((id) => builderBlockOrder.includes(id));
    if (blockMatch) return blockMatch;
    const withLectures = contexts.find((ctx) => ctx.block.blockId !== "__unlabeled" && ctx.lectures.length);
    if (withLectures) return withLectures.block.blockId;
    return contexts[0]?.block.blockId || "";
  }
  function ensureWeekForBlock(blockId) {
    if (!blockId) {
      return;
    }
    const entries = builderWeekMap.get(blockId) || [];
    if (!entries.length) {
      clearActiveWeek(blockId);
      return;
    }
    const currentKey = state.builder.activeWeekKey;
    if (currentKey && currentKey.startsWith(`${blockId}|`)) {
      const hasCurrent = entries.some((entry) => entry.key === currentKey);
      if (hasCurrent) {
        applyWeekSelection(blockId, currentKey, entries);
        return;
      }
    }
    applyWeekSelection(blockId, entries[0].key, entries);
  }
  function setActiveBlock(blockId) {
    if (!blockId || !builderBlockOrder.includes(blockId)) return;
    const collapsed = builderBlockOrder.filter((id) => id !== blockId);
    const patch = {};
    if (!arraysEqual(collapsed, state.builder.collapsedBlocks || [])) {
      patch.collapsedBlocks = collapsed;
    }
    if (state.builder.activeBlockId !== blockId) {
      patch.activeBlockId = blockId;
    }
    if (patch.activeBlockId && state.builder.activeWeekKey && !state.builder.activeWeekKey.startsWith(`${blockId}|`)) {
      patch.activeWeekKey = "";
    }
    if (Object.keys(patch).length) {
      setBuilder(patch);
    }
  }
  function setActiveWeek(blockId, week) {
    if (!blockId) return;
    const entries = builderWeekMap.get(blockId) || [];
    if (!entries.length) {
      clearActiveWeek(blockId);
      return;
    }
    const normalizedWeek = week != null ? week : -1;
    const target = entries.find((entry) => entry.week === normalizedWeek) || entries[0];
    applyWeekSelection(blockId, target.key, entries);
  }
  function applyWeekSelection(blockId, key, entries) {
    if (!key || !Array.isArray(entries)) return;
    const collapsed = new Set(state.builder.collapsedWeeks || []);
    const validKeys = entries.map((entry) => entry.key);
    for (const value of Array.from(collapsed)) {
      if (value.startsWith(`${blockId}|`) && !validKeys.includes(value) && value !== key) {
        collapsed.delete(value);
      }
    }
    entries.forEach((entry) => {
      if (entry.key === key) {
        collapsed.delete(entry.key);
      } else {
        collapsed.add(entry.key);
      }
    });
    const patch = {};
    const collapsedArr = Array.from(collapsed);
    if (!arraysEqual(collapsedArr, state.builder.collapsedWeeks || [])) {
      patch.collapsedWeeks = collapsedArr;
    }
    if (state.builder.activeWeekKey !== key) {
      patch.activeWeekKey = key;
    }
    if (Object.keys(patch).length) {
      setBuilder(patch);
    }
  }
  function clearActiveWeek(blockId) {
    if (!blockId) return;
    const prefix = `${blockId}|`;
    const nextCollapsed = (state.builder.collapsedWeeks || []).filter((key) => !key.startsWith(prefix));
    const patch = {};
    if (!arraysEqual(nextCollapsed, state.builder.collapsedWeeks || [])) {
      patch.collapsedWeeks = nextCollapsed;
    }
    if (state.builder.activeWeekKey && state.builder.activeWeekKey.startsWith(prefix)) {
      patch.activeWeekKey = "";
    }
    if (Object.keys(patch).length) {
      setBuilder(patch);
    }
  }
  function findNextBlock(currentId) {
    if (!builderBlockOrder.length) return null;
    const index = builderBlockOrder.indexOf(currentId);
    if (index === -1) return builderBlockOrder[0] || null;
    for (let offset = 1; offset < builderBlockOrder.length; offset += 1) {
      const candidate = builderBlockOrder[(index + offset) % builderBlockOrder.length];
      if (candidate) return candidate;
    }
    return currentId || null;
  }
  function arraysEqual(a = [], b = []) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i += 1) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }
  function renderBlockPanel(context, rerender) {
    const { block, lectures, weeks } = context;
    const blockId = block.blockId;
    const hasLectureSelection = hasAnyLectureSelected(blockId, lectures);
    const blockFullySelected = isBlockFullySelected(block, lectures);
    const blockCollapsed = isBlockCollapsed(blockId);
    const card = document.createElement("div");
    card.className = "card builder-block-card";
    if (blockFullySelected) card.classList.add("active");
    if (blockCollapsed) card.classList.add("is-collapsed");
    const header = document.createElement("div");
    header.className = "builder-block-header";
    const blockCollapseBtn = createCollapseToggle({
      collapsed: blockCollapsed,
      label: blockCollapsed ? "Show weeks" : "Hide weeks",
      onToggle: () => {
        toggleBlockCollapsed(blockId);
        rerender();
      },
      variant: "block"
    });
    header.appendChild(blockCollapseBtn);
    const title = document.createElement("h3");
    title.textContent = block.title || blockId;
    header.appendChild(title);
    const meta = document.createElement("span");
    meta.className = "builder-block-meta";
    const weekCount = weeks.length;
    const lectureCount = lectures.length;
    const metaParts = [];
    if (weekCount) metaParts.push(`${weekCount} week${weekCount === 1 ? "" : "s"}`);
    if (lectureCount) metaParts.push(`${lectureCount} lecture${lectureCount === 1 ? "" : "s"}`);
    meta.textContent = metaParts.join(" \u2022 ") || "No lectures linked yet";
    header.appendChild(meta);
    const actions = document.createElement("div");
    actions.className = "builder-block-actions";
    if (lectures.length || blockId === "__unlabeled") {
      const label = blockId === "__unlabeled" ? "Include unlabeled cards" : "Select all lectures";
      const allBtn = createAction(label, () => {
        selectEntireBlock(block);
        rerender();
      });
      if (lectures.length && areAllLecturesSelected(blockId, lectures)) {
        allBtn.disabled = true;
      }
      actions.appendChild(allBtn);
    }
    if (hasLectureSelection || blockFullySelected) {
      const clearBtn = createAction("Clear block", () => {
        clearBlock(blockId);
        rerender();
      }, "danger");
      actions.appendChild(clearBtn);
    }
    header.appendChild(actions);
    card.appendChild(header);
    if (blockId === "__unlabeled") {
      const note = document.createElement("div");
      note.className = "builder-unlabeled-note";
      note.textContent = "Include to study cards without block or lecture tags.";
      card.appendChild(note);
      return card;
    }
    const weekList = document.createElement("div");
    weekList.className = "builder-week-list";
    weekList.hidden = blockCollapsed;
    if (!weeks.length) {
      const empty = document.createElement("div");
      empty.className = "builder-empty";
      empty.textContent = "No lectures added yet.";
      weekList.appendChild(empty);
    } else {
      weeks.forEach(({ week, items }) => {
        weekList.appendChild(renderWeek(block, week, items, rerender));
      });
    }
    card.appendChild(weekList);
    return card;
  }
  function renderWeek(block, week, lectures, rerender) {
    const blockId = block.blockId;
    const weekCollapsed = isWeekCollapsed(blockId, week);
    const row = document.createElement("div");
    row.className = "builder-week-card";
    if (hasAnyLectureSelected(blockId, lectures)) row.classList.add("is-active");
    if (weekCollapsed) row.classList.add("is-collapsed");
    const header = document.createElement("div");
    header.className = "builder-week-header";
    const weekCollapseBtn = createCollapseToggle({
      collapsed: weekCollapsed,
      label: weekCollapsed ? "Show lectures" : "Hide lectures",
      onToggle: () => {
        toggleWeekCollapsed(blockId, week);
        rerender();
      }
    });
    header.appendChild(weekCollapseBtn);
    const label = document.createElement("span");
    label.className = "builder-week-title";
    label.textContent = formatWeekLabel2(week);
    header.appendChild(label);
    const meta = document.createElement("span");
    meta.className = "builder-week-meta";
    meta.textContent = `${lectures.length} lecture${lectures.length === 1 ? "" : "s"}`;
    header.appendChild(meta);
    const actions = document.createElement("div");
    actions.className = "builder-week-actions";
    const allBtn = createAction("Select all", () => {
      selectWeek(block, week);
      rerender();
    });
    const clearBtn = createAction("Clear", () => {
      clearWeek(block, week);
      rerender();
    }, "danger");
    if (areAllLecturesSelected(blockId, lectures)) {
      allBtn.disabled = true;
    }
    if (!hasAnyLectureSelected(blockId, lectures)) {
      clearBtn.disabled = true;
    }
    actions.appendChild(allBtn);
    actions.appendChild(clearBtn);
    header.appendChild(actions);
    row.appendChild(header);
    const lectureList = document.createElement("div");
    lectureList.className = "builder-lecture-list";
    lectureList.hidden = weekCollapsed;
    lectures.forEach((lecture) => {
      lectureList.appendChild(renderLecture(block, lecture, rerender));
    });
    row.appendChild(lectureList);
    return row;
  }
  function renderLecture(block, lecture, rerender) {
    const blockId = block.blockId;
    const lectureKey2 = lectureKeyFor(blockId, lecture.id);
    const active = state.builder.lectures.includes(lectureKey2);
    const pill = createPill(active, lecture.name || `Lecture ${lecture.id}`, () => {
      toggleLecture(block, lecture);
      rerender();
    }, "lecture");
    return pill;
  }
  function renderControls(rerender, redraw) {
    const aside = document.createElement("aside");
    aside.className = "builder-controls";
    aside.appendChild(renderFilterCard(rerender));
    aside.appendChild(renderModeCard(rerender, redraw));
    aside.appendChild(renderReviewCard(redraw));
    return aside;
  }
  function renderFilterCard(rerender) {
    const card = document.createElement("div");
    card.className = "card builder-filter-card";
    const title = document.createElement("h3");
    title.textContent = "Filters";
    card.appendChild(title);
    const typeLabel = document.createElement("div");
    typeLabel.className = "builder-section-title";
    typeLabel.textContent = "Card types";
    card.appendChild(typeLabel);
    const pillRow = document.createElement("div");
    pillRow.className = "builder-pill-row";
    const typeMap = { disease: "Disease", drug: "Drug", concept: "Concept" };
    Object.entries(typeMap).forEach(([value, label]) => {
      const active = state.builder.types.includes(value);
      const pill = createPill(active, label, () => {
        toggleType(value);
        rerender();
      }, "small");
      pillRow.appendChild(pill);
    });
    card.appendChild(pillRow);
    const favToggle = createPill(state.builder.onlyFav, "Only favorites", () => {
      setBuilder({ onlyFav: !state.builder.onlyFav });
      notifyBuilderChanged({ selectionChanged: true });
      rerender();
    }, "small outline");
    card.appendChild(favToggle);
    const selectionMeta = document.createElement("div");
    selectionMeta.className = "builder-selection-meta";
    const blockCount = countSelectedBlocks();
    const lectureCount = state.builder.lectures.length;
    selectionMeta.innerHTML = `
    <span>Blocks: ${blockCount}</span>
    <span>Lectures: ${lectureCount}</span>
  `;
    card.appendChild(selectionMeta);
    const actions = document.createElement("div");
    actions.className = "builder-filter-actions";
    const clearBtn = document.createElement("button");
    clearBtn.type = "button";
    clearBtn.className = "btn secondary builder-clear-btn";
    clearBtn.textContent = "Clear selection";
    clearBtn.disabled = !hasAnySelection();
    clearBtn.addEventListener("click", () => {
      setBuilder({ blocks: [], weeks: [], lectures: [] });
      notifyBuilderChanged({ selectionChanged: true });
      rerender();
    });
    actions.appendChild(clearBtn);
    card.appendChild(actions);
    return card;
  }
  function renderModeCard(rerender, redraw) {
    const card = document.createElement("div");
    card.className = "card builder-mode-card";
    const title = document.createElement("h3");
    title.textContent = "Modes";
    card.appendChild(title);
    const layout = document.createElement("div");
    layout.className = "builder-mode-layout";
    card.appendChild(layout);
    const modeColumn = document.createElement("div");
    modeColumn.className = "builder-mode-option-column";
    layout.appendChild(modeColumn);
    const controls = document.createElement("div");
    controls.className = "builder-mode-controls";
    layout.appendChild(controls);
    const modeLabel = document.createElement("div");
    modeLabel.className = "builder-mode-options-title";
    modeLabel.textContent = "Choose a mode";
    modeColumn.appendChild(modeLabel);
    const modeRow = document.createElement("div");
    modeRow.className = "builder-mode-options";
    modeColumn.appendChild(modeRow);
    const status = document.createElement("div");
    status.className = "builder-mode-status";
    controls.appendChild(status);
    const countInfo = document.createElement("div");
    countInfo.className = "builder-mode-count";
    controls.appendChild(countInfo);
    const actions = document.createElement("div");
    actions.className = "builder-mode-actions";
    controls.appendChild(actions);
    const startBtn = document.createElement("button");
    startBtn.type = "button";
    startBtn.className = "btn builder-start-btn";
    startBtn.textContent = "Start";
    actions.appendChild(startBtn);
    const resumeBtn = document.createElement("button");
    resumeBtn.type = "button";
    resumeBtn.className = "btn builder-resume-btn";
    resumeBtn.textContent = "Resume";
    actions.appendChild(resumeBtn);
    const modes = ["Flashcards", "Quiz", "Blocks"];
    const selected = state.study?.selectedMode || "Flashcards";
    modes.forEach((mode) => {
      const btn = document.createElement("button");
      btn.type = "button";
      btn.className = "builder-mode-toggle";
      btn.dataset.mode = mode.toLowerCase();
      const isActive = mode === selected;
      if (isActive) btn.classList.add("is-active");
      btn.dataset.active = isActive ? "true" : "false";
      btn.setAttribute("aria-pressed", isActive ? "true" : "false");
      btn.textContent = mode;
      btn.addEventListener("click", () => {
        setStudySelectedMode(mode);
        rerender();
      });
      modeRow.appendChild(btn);
    });
    const storageKey = MODE_KEY[selected] || null;
    const savedEntry = storageKey ? getStudySessionEntry(storageKey) : null;
    const hasSaved = !!(savedEntry && savedEntry.session);
    const savedCount = hasSaved && Array.isArray(savedEntry.cohort) ? savedEntry.cohort.length : 0;
    resumeBtn.disabled = !hasSaved;
    resumeBtn.classList.toggle("is-ready", hasSaved);
    const labelTitle = selected.toLowerCase();
    const handleError = (err) => console.warn("Failed to update study session state", err);
    let latestCount = Array.isArray(state.cohort) ? state.cohort.length : 0;
    const updateStatus = (count = latestCount, { error = false } = {}) => {
      status.classList.remove("is-error", "is-warning");
      if (error) {
        status.classList.add("is-error");
        status.textContent = "Unable to load selected cards.";
        return;
      }
      if (hasSaved) {
        status.textContent = `Saved ${labelTitle} session${savedCount ? ` \u2022 ${savedCount} cards` : ""}`;
        return;
      }
      if (!count) {
        status.textContent = selected === "Blocks" ? "Select study cards to open Blocks mode." : "Choose lectures or filters to add study cards.";
        return;
      }
      status.textContent = `Ready to start ${labelTitle}.`;
    };
    const updateCountDisplay = (count, { pending: pending2 = false, error = false } = {}) => {
      latestCount = count;
      countInfo.classList.remove("is-error", "is-loading");
      if (error) {
        countInfo.classList.add("is-error");
        countInfo.textContent = "Unable to load selected cards";
        startBtn.disabled = true;
        startBtn.classList.remove("is-ready");
        updateStatus(count, { error: true });
        return;
      }
      if (pending2) {
        countInfo.classList.add("is-loading");
        countInfo.textContent = "Updating selection\u2026";
        startBtn.disabled = true;
        startBtn.classList.remove("is-ready");
        if (!hasSaved) {
          status.textContent = "Updating selection\u2026";
          status.classList.remove("is-error", "is-warning");
        }
        return;
      }
      const ready = count > 0;
      countInfo.textContent = ready ? `${count} card${count === 1 ? "" : "s"} selected` : "No cards selected";
      startBtn.disabled = !ready;
      startBtn.classList.toggle("is-ready", ready);
      updateStatus(count);
    };
    const selection = snapshotSelection();
    const signature = selectionSignature(selection);
    const needsSync = signature !== lastAppliedSelectionSignature;
    if (!latestCount && needsSync) {
      updateCountDisplay(latestCount, { pending: true });
    } else {
      updateCountDisplay(latestCount);
    }
    ensureCohortSync({ force: needsSync }).then((items) => {
      const currentSignature = selectionSignature(snapshotSelection());
      if (currentSignature === signature) {
        const count = Array.isArray(items) ? items.length : 0;
        updateCountDisplay(count);
      } else {
        const currentCount = Array.isArray(state.cohort) ? state.cohort.length : 0;
        updateCountDisplay(currentCount);
      }
    }).catch(() => {
      const fallbackCount = Array.isArray(state.cohort) ? state.cohort.length : 0;
      updateCountDisplay(fallbackCount, { error: true });
    });
    startBtn.addEventListener("click", async () => {
      if (startBtn.disabled) return;
      const original = startBtn.textContent;
      startBtn.disabled = true;
      startBtn.textContent = "Preparing\u2026";
      status.classList.remove("is-error", "is-warning");
      status.textContent = `Preparing ${labelTitle}\u2026`;
      try {
        const pool = await ensureCohortSync({ force: true });
        const cohortItems = Array.isArray(pool) ? pool : Array.isArray(state.cohort) ? state.cohort : [];
        if (!cohortItems.length) {
          updateCountDisplay(0);
          status.classList.add("is-warning");
          status.textContent = "No cards selected. Adjust the filters above to add cards.";
          return;
        }
        setStudySelectedMode(selected);
        const key = MODE_KEY[selected];
        if (selected === "Blocks") {
          if (key) {
            await removeStudySession(key).catch(handleError);
          }
          resetBlockMode();
          setSubtab("Study", "Blocks");
          setTab("Block Board");
          redraw();
          return;
        }
        if (!key) return;
        await removeStudySession(key).catch(handleError);
        if (selected === "Flashcards") {
          setFlashSession({ idx: 0, pool: cohortItems, ratings: {}, mode: "study" });
        } else if (selected === "Quiz") {
          setQuizSession({ idx: 0, score: 0, pool: cohortItems });
        }
        setSubtab("Study", "Builder");
        setTab("Study");
        redraw();
      } catch (err) {
        handleError(err);
        status.classList.add("is-error");
        status.textContent = "Unable to start. Please try again.";
      } finally {
        startBtn.textContent = original;
        const hasCards = Array.isArray(state.cohort) && state.cohort.length > 0;
        startBtn.disabled = !hasCards;
        startBtn.classList.toggle("is-ready", hasCards);
      }
    });
    resumeBtn.addEventListener("click", async () => {
      if (!hasSaved || !storageKey || !savedEntry) return;
      setStudySelectedMode(selected);
      await removeStudySession(storageKey).catch(handleError);
      const restoredCohort = Array.isArray(savedEntry.cohort) ? savedEntry.cohort : [];
      setCohort(restoredCohort);
      if (selected === "Blocks") {
        resetBlockMode();
        if (savedEntry.session && typeof savedEntry.session === "object") {
          setBlockMode(savedEntry.session);
        }
        setSubtab("Study", "Blocks");
        setTab("Block Board");
        redraw();
        return;
      }
      if (selected === "Flashcards") {
        setFlashSession(savedEntry.session);
      } else if (selected === "Quiz") {
        setQuizSession(savedEntry.session);
      }
      setSubtab("Study", "Builder");
      setTab("Study");
      redraw();
    });
    return card;
  }
  function renderReviewCard(redraw) {
    const card = document.createElement("div");
    card.className = "card builder-review-card";
    const title = document.createElement("h3");
    title.textContent = "Review";
    card.appendChild(title);
    const status = document.createElement("div");
    status.className = "builder-review-status";
    status.textContent = "Loading review queue\u2026";
    card.appendChild(status);
    const actions = document.createElement("div");
    actions.className = "builder-review-actions";
    const openBtn = document.createElement("button");
    openBtn.type = "button";
    openBtn.className = "btn secondary";
    openBtn.textContent = "Open review";
    openBtn.disabled = false;
    openBtn.addEventListener("click", () => {
      setSubtab("Study", "Review");
      redraw();
    });
    actions.appendChild(openBtn);
    const saved = getStudySessionEntry("review");
    if (saved?.session) {
      const resumeBtn = document.createElement("button");
      resumeBtn.type = "button";
      resumeBtn.className = "btn builder-review-resume";
      resumeBtn.textContent = "Resume review";
      resumeBtn.addEventListener("click", async () => {
        await removeStudySession("review").catch((err) => console.warn("Failed to clear review session stub", err));
        const restored = Array.isArray(saved.cohort) ? saved.cohort : null;
        if (restored) {
          setCohort(restored);
        }
        setFlashSession(saved.session);
        setSubtab("Study", "Review");
        redraw();
      });
      actions.appendChild(resumeBtn);
    }
    card.appendChild(actions);
    updateReviewSummary(saved);
    return card;
    async function updateReviewSummary(savedEntry = null) {
      try {
        const items = await loadReviewSourceItems();
        const dueCount = collectReviewCount(items);
        if (items.length) {
          const base = dueCount ? `${dueCount} card${dueCount === 1 ? "" : "s"} due` : "All caught up!";
          if (savedEntry?.session) {
            const savedLabel = savedEntry.metadata?.label ? savedEntry.metadata.label : "Saved review session ready";
            status.textContent = `${base} \u2022 ${savedLabel}`;
          } else {
            status.textContent = base;
          }
        } else {
          status.textContent = "Review queue ready \u2014 no cards due yet.";
        }
      } catch (err) {
        console.warn("Failed to summarize review queue", err);
        status.textContent = "Unable to load review queue.";
      }
    }
  }
  async function gatherItems(selection = snapshotSelection()) {
    const types = Array.isArray(selection.types) && selection.types.length ? selection.types : [];
    if (!types.length) return [];
    const results = await Promise.all(types.map(async (kind) => {
      try {
        const list = await listItemsByKind(kind);
        return Array.isArray(list) ? list : [];
      } catch (err) {
        console.warn("Failed to load cards for kind", kind, err);
        return [];
      }
    }));
    const combined = results.flat();
    const blockSet = new Set(Array.isArray(selection.blocks) ? selection.blocks : []);
    const lectureSet = new Set(Array.isArray(selection.lectures) ? selection.lectures : []);
    const wantUnlabeled = blockSet.has("__unlabeled");
    return combined.filter((item) => {
      if (selection.onlyFav && !item.favorite) return false;
      if (blockSet.size) {
        const blocks = Array.isArray(item.blocks) ? item.blocks : [];
        const hasBlockMatch = blocks.some((b) => blockSet.has(b));
        if (!hasBlockMatch) {
          const isUnlabeled = !blocks.length;
          if (!(wantUnlabeled && isUnlabeled)) return false;
        }
      }
      if (lectureSet.size) {
        const lectures = Array.isArray(item.lectures) ? item.lectures : [];
        const ok = lectures.some((lecture) => {
          const blockId = lecture?.blockId;
          const lectureId = lecture?.id ?? lecture?.lectureId;
          if (blockId == null || lectureId == null) return false;
          const key = lectureKeyFor(blockId, lectureId);
          return lectureSet.has(key);
        });
        if (!ok) return false;
      }
      return true;
    });
  }
  function selectEntireBlock(block) {
    const blockId = block.blockId;
    const blockSet = new Set(state.builder.blocks);
    const lectureSet = new Set(state.builder.lectures);
    const lectures = lectureListFor(blockId, { clone: false });
    if (lectures.length) {
      lectures.forEach((lecture) => {
        lectureSet.add(lectureKeyFor(blockId, lecture.id));
      });
      syncBlockWithLectureSelection(blockSet, lectureSet, block);
    } else {
      blockSet.add(blockId);
    }
    setActiveBlock(blockId);
    ensureWeekForBlock(blockId);
    setBuilder({
      blocks: Array.from(blockSet),
      lectures: Array.from(lectureSet),
      weeks: []
    });
    notifyBuilderChanged({ selectionChanged: true });
  }
  function clearBlock(blockId) {
    const lectureSet = new Set(state.builder.lectures);
    const blockSet = new Set(state.builder.blocks);
    for (const key of Array.from(lectureSet)) {
      if (key.startsWith(`${blockId}|`)) lectureSet.delete(key);
    }
    blockSet.delete(blockId);
    setActiveBlock(blockId);
    ensureWeekForBlock(blockId);
    setBuilder({
      blocks: Array.from(blockSet),
      lectures: Array.from(lectureSet),
      weeks: []
    });
    notifyBuilderChanged({ selectionChanged: true });
  }
  function selectWeek(block, week) {
    const blockId = block.blockId;
    const lectureSet = new Set(state.builder.lectures);
    const blockSet = new Set(state.builder.blocks);
    const lectures = lectureListFor(blockId, { clone: false });
    lectures.forEach((lecture) => {
      if (lecture.week === week) {
        lectureSet.add(lectureKeyFor(blockId, lecture.id));
      }
    });
    syncBlockWithLectureSelection(blockSet, lectureSet, block);
    setActiveBlock(blockId);
    setActiveWeek(blockId, week);
    setBuilder({
      lectures: Array.from(lectureSet),
      blocks: Array.from(blockSet),
      weeks: []
    });
    notifyBuilderChanged({ selectionChanged: true });
  }
  function clearWeek(block, week) {
    const blockId = block.blockId;
    const lectureSet = new Set(state.builder.lectures);
    const blockSet = new Set(state.builder.blocks);
    const lectures = lectureListFor(blockId, { clone: false });
    lectures.forEach((lecture) => {
      if (lecture.week === week) {
        lectureSet.delete(lectureKeyFor(blockId, lecture.id));
      }
    });
    syncBlockWithLectureSelection(blockSet, lectureSet, block);
    setActiveBlock(blockId);
    setActiveWeek(blockId, week);
    setBuilder({
      lectures: Array.from(lectureSet),
      blocks: Array.from(blockSet),
      weeks: []
    });
    notifyBuilderChanged({ selectionChanged: true });
  }
  function toggleLecture(block, lecture) {
    const key = lectureKeyFor(block.blockId, lecture.id);
    const lectureSet = new Set(state.builder.lectures);
    const blockSet = new Set(state.builder.blocks);
    if (lectureSet.has(key)) {
      lectureSet.delete(key);
    } else {
      lectureSet.add(key);
    }
    syncBlockWithLectureSelection(blockSet, lectureSet, block);
    setActiveBlock(block.blockId);
    setActiveWeek(block.blockId, lecture.week != null ? lecture.week : -1);
    setBuilder({
      lectures: Array.from(lectureSet),
      blocks: Array.from(blockSet),
      weeks: []
    });
    notifyBuilderChanged({ selectionChanged: true });
  }
  function toggleType(type) {
    const types = new Set(state.builder.types);
    if (types.has(type)) types.delete(type);
    else types.add(type);
    setBuilder({ types: Array.from(types) });
    notifyBuilderChanged({ selectionChanged: true });
  }
  function isBlockCollapsed(blockId) {
    if (state.builder.activeBlockId) {
      return state.builder.activeBlockId !== blockId;
    }
    return (state.builder.collapsedBlocks || []).includes(blockId);
  }
  function toggleBlockCollapsed(blockId) {
    if (!blockId) return;
    if (isBlockCollapsed(blockId)) {
      setActiveBlock(blockId);
      ensureWeekForBlock(blockId);
      return;
    }
    const fallback = findNextBlock(blockId);
    if (!fallback || fallback === blockId) {
      return;
    }
    setActiveBlock(fallback);
    ensureWeekForBlock(fallback);
  }
  function isWeekCollapsed(blockId, week) {
    const activeBlockId = state.builder.activeBlockId;
    if (!activeBlockId) {
      return (state.builder.collapsedWeeks || []).includes(weekKeyFor(blockId, week));
    }
    if (blockId !== activeBlockId) return true;
    const activeWeekKey = state.builder.activeWeekKey;
    const entries = builderWeekMap.get(blockId) || [];
    if (!entries.length) return true;
    const key = weekKeyFor(blockId, week);
    if (!activeWeekKey) {
      return key !== entries[0].key;
    }
    return activeWeekKey !== key;
  }
  function toggleWeekCollapsed(blockId, week) {
    const normalizedWeek = week;
    if (isWeekCollapsed(blockId, normalizedWeek)) {
      setActiveBlock(blockId);
      setActiveWeek(blockId, normalizedWeek);
      ensureWeekForBlock(blockId);
      return;
    }
    const entries = builderWeekMap.get(blockId) || [];
    const currentKey = weekKeyFor(blockId, normalizedWeek);
    const fallback = entries.find((entry) => entry.key !== currentKey);
    if (!fallback) return;
    setActiveWeek(blockId, fallback.week);
  }
  function isBlockFullySelected(block, lectures) {
    if (!block) return false;
    const blockId = block.blockId;
    if (!state.builder.blocks.includes(blockId)) return false;
    if (!lectures?.length) return true;
    return areAllLecturesSelected(blockId, lectures);
  }
  function hasAnySelection() {
    return state.builder.blocks.length || state.builder.lectures.length;
  }
  function countSelectedBlocks() {
    const blockSet = new Set(state.builder.blocks);
    for (const key of state.builder.lectures) {
      const [blockId] = key.split("|");
      if (blockId) blockSet.add(blockId);
    }
    return blockSet.size;
  }
  function groupByWeek(lectures) {
    const map = /* @__PURE__ */ new Map();
    lectures.forEach((lecture) => {
      const week = lecture.week != null ? lecture.week : -1;
      if (!map.has(week)) map.set(week, []);
      map.get(week).push(lecture);
    });
    return Array.from(map.entries()).sort((a, b) => {
      const [weekA, weekB] = [a[0], b[0]];
      const specialA = weekA == null || weekA < 0;
      const specialB = weekB == null || weekB < 0;
      if (specialA && specialB) return 0;
      if (specialA) return 1;
      if (specialB) return -1;
      return weekB - weekA;
    }).map(([week, items]) => ({ week, items }));
  }
  function weekKeyFor(blockId, week) {
    return `${blockId}|${week}`;
  }
  function lectureKeyFor(blockId, lectureId) {
    return `${blockId}|${lectureId}`;
  }
  function formatWeekLabel2(week) {
    if (week == null || week < 0) return "No week";
    return `Week ${week}`;
  }
  function hasAnyLectureSelected(blockId, lectures) {
    if (!lectures?.length) return false;
    const lectureSet = new Set(state.builder.lectures);
    return lectures.some((lecture) => lectureSet.has(lectureKeyFor(blockId, lecture.id)));
  }
  function areAllLecturesSelected(blockId, lectures) {
    if (!lectures?.length) return false;
    const lectureSet = new Set(state.builder.lectures);
    return lectures.every((lecture) => lectureSet.has(lectureKeyFor(blockId, lecture.id)));
  }
  function syncBlockWithLectureSelection(blockSet, lectureSet, block) {
    if (!block) return;
    const blockId = block.blockId;
    const prefix = `${blockId}|`;
    let hasLecture = false;
    for (const key of lectureSet) {
      if (key.startsWith(prefix)) {
        hasLecture = true;
        break;
      }
    }
    if (!hasLecture) {
      blockSet.delete(blockId);
      return;
    }
    const blockLectures = lectureListFor(blockId, { clone: false });
    if (!blockLectures.length) {
      blockSet.add(blockId);
      return;
    }
    const allSelected = blockLectures.every((lecture) => lectureSet.has(lectureKeyFor(blockId, lecture.id)));
    if (allSelected) {
      blockSet.add(blockId);
    } else {
      blockSet.delete(blockId);
    }
  }
  function createPill(active, label, onClick, variant = "") {
    const btn = document.createElement("button");
    btn.type = "button";
    btn.className = "builder-pill";
    if (variant) {
      const variants = Array.isArray(variant) ? variant : variant.split(" ");
      variants.filter(Boolean).forEach((name) => btn.classList.add(`builder-pill-${name}`));
    }
    setToggleState(btn, active);
    btn.textContent = label;
    btn.addEventListener("click", onClick);
    return btn;
  }
  function createAction(label, onClick, variant = "") {
    const btn = document.createElement("button");
    btn.type = "button";
    btn.className = "builder-action";
    if (variant) {
      const variants = Array.isArray(variant) ? variant : variant.split(" ");
      variants.filter(Boolean).forEach((name) => btn.classList.add(`builder-action-${name}`));
    }
    btn.textContent = label;
    btn.addEventListener("click", onClick);
    return btn;
  }
  function createCollapseToggle({ collapsed, label, onToggle, variant = "week" }) {
    const btn = document.createElement("button");
    btn.type = "button";
    btn.className = "builder-collapse-toggle";
    if (variant === "block") btn.classList.add("builder-collapse-toggle-block");
    btn.setAttribute("aria-expanded", String(!collapsed));
    btn.setAttribute("aria-label", label);
    btn.textContent = collapsed ? "\u25B8" : "\u25BE";
    btn.addEventListener("click", onToggle);
    return btn;
  }

  // js/storage/transfers.js
  var TRANSFER_VERSION = 1;
  function prom4(req) {
    return new Promise((resolve, reject) => {
      req.onsuccess = () => resolve(req.result);
      req.onerror = () => reject(req.error);
    });
  }
  function sanitizeBlock(block) {
    if (!block || typeof block !== "object") return null;
    const copy = deepClone(block);
    return {
      blockId: copy.blockId,
      title: copy.title || "",
      color: copy.color || null,
      weeks: Number.isFinite(copy.weeks) ? copy.weeks : null,
      startDate: null,
      endDate: null
    };
  }
  function sanitizeLecture(lecture) {
    if (!lecture || typeof lecture !== "object") return null;
    const copy = deepClone(lecture);
    return {
      blockId: copy.blockId,
      id: copy.id,
      name: copy.name || "",
      week: copy.week ?? null,
      tags: Array.isArray(copy.tags) ? copy.tags.slice() : [],
      passPlan: copy.passPlan ? deepClone(copy.passPlan) : null,
      plannerDefaults: copy.plannerDefaults ? deepClone(copy.plannerDefaults) : null,
      notes: typeof copy.notes === "string" ? copy.notes : "",
      position: Number.isFinite(copy.position) ? copy.position : null
    };
  }
  function buildLectureKey(blockId, lectureId) {
    if (blockId == null || lectureId == null) return null;
    return `${blockId}|${lectureId}`;
  }
  function collectLectureKeys(lectures) {
    const keys = /* @__PURE__ */ new Set();
    lectures.forEach((lecture) => {
      const key = buildLectureKey(lecture.blockId, lecture.id);
      if (key) keys.add(key);
    });
    return keys;
  }
  function matchItemToScope(item, { blockId, week, lectureKeys, includeLooseBlockItems = false }) {
    if (!item) return false;
    const itemLectures = Array.isArray(item.lectures) ? item.lectures : [];
    for (const ref of itemLectures) {
      const key = buildLectureKey(ref?.blockId, ref?.id);
      if (key && lectureKeys.has(key)) {
        return true;
      }
      if (week != null && ref && ref.blockId === blockId) {
        const refWeek = ref.week == null ? null : ref.week;
        if (refWeek === week) return true;
      }
    }
    if (includeLooseBlockItems) {
      const itemBlocks = Array.isArray(item.blocks) ? item.blocks : [];
      if (itemBlocks.some((id) => id === blockId)) {
        if (week == null) return true;
        const weeks = Array.isArray(item.weeks) ? item.weeks : [];
        if (weeks.some((w) => w === week)) return true;
      }
    }
    return false;
  }
  async function fetchBlockRecord(blockId) {
    if (!blockId) return null;
    const db = await openDB();
    const tx = db.transaction("blocks");
    const store2 = tx.objectStore("blocks");
    const record = await prom4(store2.get(blockId));
    if (!record) return null;
    const { lectures, ...rest } = record;
    return rest;
  }
  async function fetchLectures(blockId) {
    const db = await openDB();
    const tx = db.transaction("lectures");
    const store2 = tx.objectStore("lectures");
    if (!blockId) {
      const all2 = await prom4(store2.getAll());
      return Array.isArray(all2) ? all2 : [];
    }
    const index = typeof store2.index === "function" ? store2.index("by_block") : null;
    if (index && typeof index.getAll === "function") {
      return await prom4(index.getAll(blockId));
    }
    const all = await prom4(store2.getAll());
    return (Array.isArray(all) ? all : []).filter((lecture) => lecture?.blockId === blockId);
  }
  async function fetchAllItems() {
    const db = await openDB();
    const tx = db.transaction("items");
    const store2 = tx.objectStore("items");
    const all = await prom4(store2.getAll());
    return Array.isArray(all) ? all : [];
  }
  function extractMapData(mapConfig, itemIds) {
    if (!mapConfig || !Array.isArray(mapConfig.tabs)) return { tabs: [] };
    const idSet = new Set(itemIds);
    const tabs2 = mapConfig.tabs.map((tab) => {
      const layoutEntries = Object.entries(tab.layout || {}).filter(([id]) => idSet.has(id)).map(([id, pos]) => [id, { x: Number(pos?.x) || 0, y: Number(pos?.y) || 0 }]);
      const manualIds = Array.isArray(tab.manualIds) ? tab.manualIds.filter((id) => idSet.has(id)) : [];
      if (!layoutEntries.length && !manualIds.length) return null;
      return {
        name: tab.name || "Imported map",
        includeLinked: tab.includeLinked !== false,
        manualMode: Boolean(tab.manualMode),
        manualIds,
        layout: Object.fromEntries(layoutEntries),
        layoutSeeded: tab.layoutSeeded === true,
        filter: tab.filter ? { ...tab.filter } : { blockId: "", week: "", lectureKey: "" }
      };
    }).filter(Boolean);
    return { tabs: tabs2 };
  }
  function sanitizeItems(items) {
    return items.map((item) => {
      const copy = deepClone(item);
      delete copy.tokens;
      delete copy.searchMeta;
      return copy;
    });
  }
  function buildBundle({ scope, block, lectures, items, map }) {
    return {
      version: TRANSFER_VERSION,
      scope,
      exportedAt: Date.now(),
      block: block ? sanitizeBlock(block) : null,
      lectures: Array.isArray(lectures) ? lectures.map(sanitizeLecture).filter(Boolean) : [],
      items: sanitizeItems(items || []),
      map: map || { tabs: [] }
    };
  }
  async function readMapConfig() {
    try {
      const raw = await getMapConfig();
      return deepClone(raw);
    } catch (err) {
      console.warn("Failed to read map config for transfer", err);
      return { tabs: [] };
    }
  }
  async function exportBundleForLectures(lectures, options = {}) {
    if (!Array.isArray(lectures) || !lectures.length) {
      throw new Error("No lectures to export");
    }
    const blockId = lectures[0].blockId;
    const block = blockId ? await fetchBlockRecord(blockId) : null;
    const lectureKeys = collectLectureKeys(lectures);
    const allItems = await fetchAllItems();
    const items = allItems.filter(
      (item) => matchItemToScope(item, {
        blockId,
        week: options.week ?? null,
        lectureKeys,
        includeLooseBlockItems: options.includeLooseBlockItems === true
      })
    );
    const mapConfig = await readMapConfig();
    const map = extractMapData(mapConfig, items.map((item) => item.id));
    return buildBundle({ scope: options.scope || "lecture", block, lectures, items, map });
  }
  async function exportLectureTransfer(blockId, lectureId) {
    if (blockId == null || lectureId == null) {
      throw new Error("Missing lecture identity");
    }
    const lectures = await fetchLectures(blockId);
    const numericId = Number(lectureId);
    const match = lectures.find((lecture) => {
      const id = Number(lecture?.id);
      if (Number.isFinite(id) && Number.isFinite(numericId)) return id === numericId;
      return lecture?.id === lectureId;
    });
    if (!match) {
      throw new Error("Lecture not found");
    }
    return exportBundleForLectures([match], { scope: "lecture", week: match.week ?? null });
  }
  async function exportWeekTransfer(blockId, week) {
    if (blockId == null) {
      throw new Error("Missing block identity");
    }
    const lectures = await fetchLectures(blockId);
    const normalizedWeek = week == null || week === "" ? null : week;
    const filtered = lectures.filter((lecture) => {
      const lectureWeek = lecture.week == null ? null : lecture.week;
      if (normalizedWeek == null) {
        return lectureWeek == null;
      }
      return lectureWeek === normalizedWeek;
    });
    if (!filtered.length) {
      throw new Error("No lectures found for week");
    }
    return exportBundleForLectures(filtered, { scope: "week", week: normalizedWeek });
  }
  async function exportBlockTransfer(blockId) {
    if (!blockId) {
      throw new Error("Missing block identity");
    }
    const lectures = await fetchLectures(blockId);
    if (!lectures.length) {
      throw new Error("No lectures found for block");
    }
    return exportBundleForLectures(lectures, { scope: "block", includeLooseBlockItems: true });
  }
  function ensureLectureDefaults(lecture) {
    const base = sanitizeLecture(lecture) || {};
    base.passes = [];
    base.passPlan = base.passPlan || null;
    base.plannerDefaults = base.plannerDefaults || null;
    base.status = { ...DEFAULT_LECTURE_STATUS, state: "unscheduled", completedPasses: 0, lastCompletedAt: null };
    base.nextDueAt = null;
    base.startAt = null;
    return base;
  }
  function normalizeTransferPayload(bundle) {
    if (!bundle || typeof bundle !== "object") {
      throw new Error("Invalid transfer payload");
    }
    if (bundle.version !== TRANSFER_VERSION) {
      throw new Error("Unsupported transfer version");
    }
    const scope = bundle.scope === "block" || bundle.scope === "week" ? bundle.scope : "lecture";
    const block = sanitizeBlock(bundle.block || {});
    const lectures = Array.isArray(bundle.lectures) ? bundle.lectures.map(ensureLectureDefaults).filter(Boolean) : [];
    const items = Array.isArray(bundle.items) ? bundle.items.map((item) => {
      const cleaned = cleanItem({ ...deepClone(item) });
      delete cleaned.tokens;
      delete cleaned.searchMeta;
      return cleaned;
    }) : [];
    const map = bundle.map && typeof bundle.map === "object" && Array.isArray(bundle.map.tabs) ? {
      tabs: bundle.map.tabs.map((tab) => ({
        name: tab.name || "Imported map",
        includeLinked: tab.includeLinked !== false,
        manualMode: Boolean(tab.manualMode),
        manualIds: Array.isArray(tab.manualIds) ? tab.manualIds.filter(Boolean) : [],
        layout: tab.layout && typeof tab.layout === "object" ? { ...tab.layout } : {},
        layoutSeeded: tab.layoutSeeded === true,
        filter: tab.filter && typeof tab.filter === "object" ? { ...tab.filter } : { blockId: "", week: "", lectureKey: "" }
      }))
    } : { tabs: [] };
    return { scope, block, lectures, items, map };
  }
  async function deleteExisting(scope, blockId, lectures, strategy) {
    if (strategy !== "replace") return;
    if (!blockId) return;
    if (scope === "block") {
      await deleteBlock(blockId);
      return;
    }
    if (scope === "week") {
      const targetWeek = lectures[0]?.week ?? null;
      const existing = await listLecturesByBlock(blockId);
      const matches = existing.filter((lecture) => {
        const lectureWeek = lecture.week == null ? null : lecture.week;
        if (targetWeek == null) {
          return lectureWeek == null;
        }
        return lectureWeek === targetWeek;
      });
      for (const lecture of matches) {
        await deleteLecture(blockId, lecture.id);
      }
      return;
    }
    if (scope === "lecture") {
      const lecture = lectures[0];
      if (!lecture) return;
      await deleteLecture(blockId, lecture.id);
    }
  }
  function remapLectureIds(blockId, lectures, existingLectures, strategy) {
    const remapped = [];
    const lectureIdMap = /* @__PURE__ */ new Map();
    let maxId = existingLectures.reduce((max, lecture) => {
      const num = Number(lecture?.id);
      if (Number.isFinite(num) && num > max) return num;
      return max;
    }, 0);
    const existingIds = new Set(existingLectures.map((lecture) => lecture.id));
    lectures.forEach((lecture) => {
      const normalized2 = ensureLectureDefaults(lecture);
      normalized2.blockId = blockId;
      const desired = Number.isFinite(Number(lecture.id)) ? Number(lecture.id) : lecture.id;
      let finalId = desired;
      if (strategy === "merge" && existingIds.has(desired)) {
        maxId += 1;
        finalId = maxId;
      }
      normalized2.id = finalId;
      existingIds.add(finalId);
      const key = buildLectureKey(blockId, lecture.id);
      if (key) {
        lectureIdMap.set(key, {
          blockId,
          lectureId: finalId,
          name: normalized2.name,
          week: normalized2.week ?? null
        });
      }
      remapped.push(normalized2);
    });
    return { lectures: remapped, lectureIdMap };
  }
  function remapLectureRefs(refs, lectureIdMap) {
    if (!Array.isArray(refs)) return [];
    return refs.map((ref) => {
      if (!ref || typeof ref !== "object") return ref;
      const key = buildLectureKey(ref.blockId, ref.id);
      if (key && lectureIdMap.has(key)) {
        const mapping = lectureIdMap.get(key);
        return {
          blockId: mapping.blockId,
          id: mapping.lectureId,
          name: mapping.name || ref.name || "",
          week: mapping.week ?? ref.week ?? null
        };
      }
      return ref;
    });
  }
  function remapLinks(links, itemIdMap) {
    if (!Array.isArray(links)) return [];
    return links.map((link) => {
      if (!link || typeof link !== "object") return link;
      const mappedId = itemIdMap.get(link.id);
      if (mappedId) {
        return { ...link, id: mappedId };
      }
      return link;
    });
  }
  async function persistLectures(blockId, lectures, lectureIdMap) {
    for (const lecture of lectures) {
      const payload = {
        blockId,
        id: lecture.id,
        name: lecture.name,
        week: lecture.week,
        passPlan: lecture.passPlan || null,
        startAt: Date.now(),
        tags: Array.isArray(lecture.tags) ? lecture.tags.slice() : [],
        plannerDefaults: lecture.plannerDefaults || null,
        position: lecture.position
      };
      await saveLecture(payload);
      const db = await openDB();
      const tx = db.transaction("lectures", "readwrite");
      const store2 = tx.objectStore("lectures");
      const key = lectureKey(blockId, lecture.id);
      const record = await prom4(store2.get(key));
      if (record) {
        record.passes = [];
        record.status = { ...DEFAULT_LECTURE_STATUS, state: "unscheduled", completedPasses: 0, lastCompletedAt: null };
        record.nextDueAt = null;
        record.startAt = null;
        record.plannerDefaults = lecture.plannerDefaults || null;
        record.updatedAt = Date.now();
        await prom4(store2.put(record));
      }
      await new Promise((resolve, reject) => {
        tx.oncomplete = resolve;
        tx.onerror = () => reject(tx.error);
      });
      const keyStr = buildLectureKey(blockId, lecture.id);
      if (keyStr) {
        lectureIdMap.set(keyStr, {
          blockId,
          lectureId: lecture.id,
          name: lecture.name,
          week: lecture.week ?? null
        });
      }
    }
  }
  async function persistItems(items, lectureIdMap, strategy) {
    const existingIds = /* @__PURE__ */ new Set();
    const allExisting = await fetchAllItems();
    allExisting.forEach((item) => {
      if (item?.id) existingIds.add(item.id);
    });
    const plans = [];
    const itemIdMap = /* @__PURE__ */ new Map();
    for (const rawItem of items) {
      const originalId = rawItem?.id || null;
      let finalId = originalId;
      if (!originalId) {
        finalId = uid();
      } else if (!existingIds.has(originalId)) {
        finalId = originalId;
      } else if (strategy === "replace") {
        finalId = originalId;
      } else {
        let candidate = `${originalId}-${uid().slice(0, 6)}`;
        while (existingIds.has(candidate)) {
          candidate = `${originalId}-${uid().slice(0, 6)}`;
        }
        finalId = candidate;
        itemIdMap.set(originalId, finalId);
      }
      existingIds.add(finalId);
      plans.push({ raw: rawItem, finalId });
    }
    for (const plan of plans) {
      const item = cleanItem({ ...plan.raw });
      item.id = plan.finalId;
      item.lectures = remapLectureRefs(item.lectures, lectureIdMap);
      item.links = remapLinks(item.links, itemIdMap);
      delete item.tokens;
      delete item.searchMeta;
      item.tokens = buildTokens(item);
      item.searchMeta = buildSearchMeta(item);
      await upsertItem(item);
    }
    return itemIdMap;
  }
  function remapMapTabs(map, lectureIdMap, itemIdMap) {
    if (!map || !Array.isArray(map.tabs)) return [];
    return map.tabs.map((tab) => {
      const layout = {};
      Object.entries(tab.layout || {}).forEach(([id, pos]) => {
        const mapped = itemIdMap.get(id) || id;
        layout[mapped] = {
          x: Number(pos?.x) || 0,
          y: Number(pos?.y) || 0
        };
      });
      const manualIds = Array.isArray(tab.manualIds) ? tab.manualIds.map((id) => itemIdMap.get(id) || id) : [];
      let lectureKeyFilter = tab.filter?.lectureKey || "";
      if (lectureKeyFilter) {
        const mapping = lectureIdMap.get(lectureKeyFilter);
        if (mapping) {
          lectureKeyFilter = lectureKey(mapping.blockId, mapping.lectureId);
        }
      }
      return {
        id: uid(),
        name: tab.name || "Imported map",
        includeLinked: tab.includeLinked !== false,
        manualMode: Boolean(tab.manualMode),
        manualIds,
        layout,
        layoutSeeded: tab.layoutSeeded === true,
        filter: {
          blockId: tab.filter?.blockId || "",
          week: tab.filter?.week ?? "",
          lectureKey: lectureKeyFilter
        }
      };
    });
  }
  async function mergeMapConfig(map, lectureIdMap, itemIdMap) {
    if (!map || !Array.isArray(map.tabs) || !map.tabs.length) return;
    const config = await getMapConfig();
    const copy = deepClone(config);
    const appended = remapMapTabs(map, lectureIdMap, itemIdMap);
    appended.forEach((tab) => {
      let name = tab.name;
      const existingNames = new Set(copy.tabs.map((existing) => existing.name));
      while (existingNames.has(name)) {
        name = `${tab.name} (import)`;
        tab.name = name;
      }
      copy.tabs.push(tab);
    });
    await saveMapConfig(copy);
  }
  async function importLectureTransfer(bundle, options = {}) {
    const { scope, block, lectures, items, map } = normalizeTransferPayload(bundle);
    if (!block || !block.blockId) {
      throw new Error("Transfer missing block information");
    }
    const strategy = options.strategy === "replace" ? "replace" : "merge";
    const blockId = block.blockId;
    await deleteExisting(scope, blockId, lectures, strategy);
    const existingBlock = await fetchBlockRecord(blockId);
    if (!existingBlock) {
      await upsertBlock({
        blockId,
        title: block.title,
        color: block.color,
        weeks: block.weeks,
        startDate: null,
        endDate: null,
        lectures: []
      });
    }
    const existingLectures = await listLecturesByBlock(blockId);
    const { lectures: normalizedLectures, lectureIdMap } = remapLectureIds(blockId, lectures, existingLectures, strategy);
    await persistLectures(blockId, normalizedLectures, lectureIdMap);
    const itemIdMap = await persistItems(items, lectureIdMap, strategy);
    await mergeMapConfig(map, lectureIdMap, itemIdMap);
  }

  // js/ui/components/lectures.js
  function findLectureScrollContainer(element) {
    if (element && typeof element.closest === "function") {
      const main = element.closest("main");
      if (main && typeof main.scrollTop === "number") {
        return main;
      }
    }
    const doc = document.scrollingElement || document.documentElement || document.body;
    return doc;
  }
  function ensureLectureState() {
    if (!state.lectures) {
      setLecturesState({});
    }
    return state.lectures;
  }
  function captureLectureViewState() {
    const container = document.querySelector(".lectures-view");
    if (!container) {
      return;
    }
    const openBlocks = Array.from(
      container.querySelectorAll(".lectures-block-group")
    ).filter((details) => {
      if (!details) return false;
      if (typeof details.open === "boolean") return details.open;
      return details.hasAttribute("open");
    }).map((details) => String(details.dataset.blockKey ?? ""));
    const openWeeks = Array.from(container.querySelectorAll(".lectures-week-group")).filter((details) => {
      if (!details) return false;
      if (typeof details.open === "boolean") return details.open;
      return details.hasAttribute("open");
    }).map((details) => {
      const blockEl = details.closest(".lectures-block-group");
      const blockKey = blockEl?.dataset?.blockKey ?? "";
      const weekValue = details.dataset?.weekValue ?? "";
      return `${String(blockKey)}::${String(weekValue)}`;
    });
    setLecturesState({
      openBlocks,
      openWeeks,
      openSnapshot: Date.now(),
      scrollTop: findLectureScrollContainer(container)?.scrollTop ?? window.scrollY
    });
  }
  function collectLectures(catalog) {
    const lists = catalog?.lectureLists || {};
    const result = [];
    for (const list of Object.values(lists)) {
      if (!Array.isArray(list)) continue;
      list.forEach((entry) => {
        if (entry && typeof entry === "object") {
          result.push({ ...entry });
        }
      });
    }
    return result;
  }
  function buildBlockOrderMap(blocks) {
    const order = /* @__PURE__ */ new Map();
    blocks.forEach((block, index) => {
      if (!block || !block.blockId) return;
      order.set(block.blockId, index);
      order.set(String(block.blockId), index);
    });
    return order;
  }
  function slugify(value, fallback = "export") {
    if (value == null) return fallback;
    const text = String(value).toLowerCase();
    const slug = text.replace(/[^a-z0-9]+/g, "-").replace(/^-+|-+$/g, "").slice(0, 50);
    return slug || fallback;
  }
  function downloadJson(data, filename) {
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }
  function describeWeekValue(value) {
    if (value == null || value === "") return "No week assigned";
    const numeric = Number(value);
    if (Number.isFinite(numeric)) {
      return `Week ${numeric}`;
    }
    return `Week ${value}`;
  }
  function detectImportConflicts(bundle, catalog) {
    if (!bundle || typeof bundle !== "object") {
      return { hasConflicts: false };
    }
    const scopeRaw = typeof bundle.scope === "string" ? bundle.scope.toLowerCase() : "lecture";
    const scope = scopeRaw === "block" || scopeRaw === "week" ? scopeRaw : "lecture";
    const blockId = bundle.block && bundle.block.blockId != null ? String(bundle.block.blockId) : "";
    const blocks = Array.isArray(catalog?.blocks) ? catalog.blocks : [];
    const lectureLists = catalog?.lectureLists || {};
    const lectureIndex = catalog?.lectureIndex || {};
    const blockInfo = blocks.find((block) => String(block?.blockId) === blockId) || null;
    const blockTitle = blockInfo?.title || bundle?.block?.title || blockId || "Block";
    const blockExists = Boolean(blockInfo);
    const conflicts = {
      scope,
      blockId,
      blockTitle,
      blockExists: scope === "block" && blockExists,
      weeks: [],
      lectures: []
    };
    const existingLectures = lectureIndex[blockId] || {};
    const weekSet = /* @__PURE__ */ new Set();
    if (Array.isArray(bundle?.lectures)) {
      bundle.lectures.forEach((lecture) => {
        const lectureId = lecture?.id;
        const hasLectureConflict = Object.values(existingLectures).some((existing) => {
          if (!existing) return false;
          const existingId = existing.id;
          if (Number.isFinite(Number(existingId)) && Number.isFinite(Number(lectureId))) {
            return Number(existingId) === Number(lectureId);
          }
          return String(existingId) === String(lectureId);
        });
        if (hasLectureConflict) {
          conflicts.lectures.push({
            id: lectureId,
            name: lecture?.name || `Lecture ${lectureId}`
          });
        }
        if (scope !== "lecture") {
          const weekValue = lecture?.week == null ? null : lecture.week;
          if (!weekSet.has(weekValue)) {
            const existingWeek = (lectureLists[blockId] || []).some((entry) => {
              const entryWeek = entry?.week == null ? null : entry.week;
              return entryWeek === weekValue;
            });
            if (existingWeek) {
              conflicts.weeks.push(weekValue);
            }
            weekSet.add(weekValue);
          }
        }
      });
    }
    conflicts.hasConflicts = conflicts.blockExists || conflicts.weeks.length > 0 || conflicts.lectures.length > 0;
    return conflicts;
  }
  function promptImportStrategy(conflicts) {
    return new Promise((resolve) => {
      const overlay = document.createElement("div");
      overlay.className = "modal import-conflict-modal";
      const card = document.createElement("div");
      card.className = "card import-conflict-card";
      const title = document.createElement("h3");
      title.textContent = "Content already exists";
      card.appendChild(title);
      const message = document.createElement("p");
      message.textContent = "Choose whether to replace the existing content or merge the new material.";
      card.appendChild(message);
      const list = document.createElement("ul");
      list.className = "import-conflict-list";
      if (conflicts.blockExists) {
        const item = document.createElement("li");
        item.textContent = `Block "${conflicts.blockTitle}" already exists.`;
        list.appendChild(item);
      }
      if (Array.isArray(conflicts.weeks) && conflicts.weeks.length) {
        const item = document.createElement("li");
        const labels = conflicts.weeks.map(describeWeekValue).join(", ");
        item.textContent = `Week assignments already exist: ${labels}.`;
        list.appendChild(item);
      }
      if (Array.isArray(conflicts.lectures) && conflicts.lectures.length) {
        const item = document.createElement("li");
        const names = conflicts.lectures.map((entry) => entry.name || `Lecture ${entry.id}`).join(", ");
        item.textContent = `Lectures already exist: ${names}.`;
        list.appendChild(item);
      }
      if (list.childElementCount) {
        card.appendChild(list);
      }
      const actions = document.createElement("div");
      actions.className = "row import-conflict-actions";
      function cleanup(result) {
        if (document.body.contains(overlay)) {
          document.body.removeChild(overlay);
        }
        resolve(result);
      }
      const replaceBtn = document.createElement("button");
      replaceBtn.type = "button";
      replaceBtn.className = "btn";
      replaceBtn.textContent = "Replace";
      replaceBtn.addEventListener("click", () => cleanup("replace"));
      const mergeBtn = document.createElement("button");
      mergeBtn.type = "button";
      mergeBtn.className = "btn secondary";
      mergeBtn.textContent = "Merge";
      mergeBtn.addEventListener("click", () => cleanup("merge"));
      const cancelBtn = document.createElement("button");
      cancelBtn.type = "button";
      cancelBtn.className = "btn secondary";
      cancelBtn.textContent = "Cancel";
      cancelBtn.addEventListener("click", () => cleanup(null));
      actions.appendChild(replaceBtn);
      actions.appendChild(mergeBtn);
      actions.appendChild(cancelBtn);
      card.appendChild(actions);
      overlay.appendChild(card);
      overlay.addEventListener("click", (event) => {
        if (event.target === overlay) {
          cleanup(null);
        }
      });
      document.body.appendChild(overlay);
      replaceBtn.focus();
    });
  }
  function normalizeWeekValue(value) {
    if (value == null || value === "") return "";
    return String(value);
  }
  function formatWeekLabel3(week) {
    if (week == null || week === "") return "\u2014";
    const num = Number(week);
    if (!Number.isFinite(num)) return String(week);
    return `Week ${num}`;
  }
  function collectBlockWeekOptions(blockId, blocks = [], lectureLists = {}) {
    if (!blockId) return [];
    const normalizedId = String(blockId);
    const blockInfo = blocks.find((block) => String(block?.blockId) === normalizedId) || null;
    const result = /* @__PURE__ */ new Set();
    const weeksValue = Number(blockInfo?.weeks);
    if (Number.isFinite(weeksValue) && weeksValue > 0) {
      const total = Math.max(1, Math.round(weeksValue));
      for (let i = 1; i <= total; i += 1) {
        result.add(i);
      }
    }
    const list = Array.isArray(lectureLists?.[normalizedId]) ? lectureLists[normalizedId] : [];
    list.forEach((entry) => {
      const weekNum = Number(entry?.week);
      if (Number.isFinite(weekNum) && weekNum >= 0) {
        result.add(weekNum);
      }
    });
    return Array.from(result).sort((a, b) => a - b);
  }
  function populateWeekSelect(select, blockId, blocks, lectureLists, options = {}) {
    if (!select) return;
    const {
      selectedValue = "",
      includeBlank = true,
      blankLabel = "No week"
    } = options;
    const normalizedValue = normalizeWeekValue(selectedValue);
    select.innerHTML = "";
    if (includeBlank) {
      const blank = document.createElement("option");
      blank.value = "";
      blank.textContent = blankLabel;
      select.appendChild(blank);
    }
    const weeks = collectBlockWeekOptions(blockId, blocks, lectureLists);
    weeks.forEach((week) => {
      const option = document.createElement("option");
      option.value = String(week);
      option.textContent = formatWeekLabel3(week);
      select.appendChild(option);
    });
    if (normalizedValue && !weeks.some((week) => String(week) === normalizedValue)) {
      const custom = document.createElement("option");
      custom.value = normalizedValue;
      custom.textContent = formatWeekLabel3(normalizedValue);
      select.appendChild(custom);
    }
    select.value = normalizedValue;
  }
  function formatOffset2(minutes) {
    if (!Number.isFinite(minutes)) return "0m";
    const abs = Math.abs(minutes);
    if (abs < 60) return `${Math.round(minutes)}m`;
    const hours = minutes / 60;
    if (Math.abs(hours) < 24) return `${Math.round(hours)}h`;
    const days = minutes / (60 * 24);
    if (Math.abs(days) < 7) return `${Math.round(days)}d`;
    const weeks = minutes / (60 * 24 * 7);
    if (Math.abs(weeks) < 4) return `${Math.round(weeks)}w`;
    const months = minutes / (60 * 24 * 30);
    return `${Math.round(months)}mo`;
  }
  var OFFSET_UNITS2 = [
    { id: "minutes", label: "minutes", minutes: 1 },
    { id: "hours", label: "hours", minutes: 60 },
    { id: "days", label: "days", minutes: 60 * 24 },
    { id: "weeks", label: "weeks", minutes: 60 * 24 * 7 }
  ];
  function normalizeOffsetUnit2(id) {
    const fallback = OFFSET_UNITS2[2];
    if (typeof id !== "string") return fallback.id;
    const match = OFFSET_UNITS2.find((option) => option.id === id);
    return match ? match.id : fallback.id;
  }
  function splitOffsetMinutes2(minutes) {
    const value = Number.isFinite(minutes) ? Math.max(0, Math.round(minutes)) : 0;
    if (value === 0) {
      return { value: 0, unit: "days" };
    }
    const preferred = [...OFFSET_UNITS2].reverse().find((option) => value % option.minutes === 0);
    if (preferred) {
      return { value: Math.round(value / preferred.minutes), unit: preferred.id };
    }
    if (value < 60) {
      return { value, unit: "minutes" };
    }
    if (value < 60 * 24) {
      return { value: Math.round(value / 60), unit: "hours" };
    }
    return { value: Math.round(value / (60 * 24)), unit: "days" };
  }
  function combineOffsetValueUnit2(value, unitId) {
    const normalizedUnit = normalizeOffsetUnit2(unitId);
    const option = OFFSET_UNITS2.find((entry) => entry.id === normalizedUnit) || OFFSET_UNITS2[2];
    const numeric = Number(value);
    if (!Number.isFinite(numeric) || numeric <= 0) {
      return 0;
    }
    return Math.max(0, Math.round(numeric * option.minutes));
  }
  var PASS_DUE_FORMAT = new Intl.DateTimeFormat(void 0, {
    month: "short",
    day: "numeric"
  });
  var PASS_TIME_FORMAT = new Intl.DateTimeFormat(void 0, {
    hour: "numeric",
    minute: "2-digit"
  });
  function formatDateForInput(timestamp = Date.now()) {
    if (!Number.isFinite(timestamp)) return "";
    const date = new Date(timestamp);
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, "0");
    const day = String(date.getDate()).padStart(2, "0");
    return `${year}-${month}-${day}`;
  }
  function parseDateInputValue(value) {
    if (typeof value !== "string" || !value) return null;
    const [yearStr, monthStr, dayStr] = value.split("-");
    const year = Number(yearStr);
    const month = Number(monthStr) - 1;
    const day = Number(dayStr);
    if (!Number.isFinite(year) || !Number.isFinite(month) || !Number.isFinite(day)) {
      return null;
    }
    const date = new Date(year, month, day, 0, 0, 0, 0);
    if (Number.isNaN(date.getTime())) return null;
    return date.getTime();
  }
  function passAccent(order = 1) {
    return passColorForOrder(order);
  }
  function formatPassDueTimestamp(due) {
    if (!Number.isFinite(due)) return "";
    const date = new Date(due);
    return `${PASS_DUE_FORMAT.format(date)} \u2022 ${PASS_TIME_FORMAT.format(date)}`;
  }
  function describePassCountdown(due, now = Date.now()) {
    if (!Number.isFinite(due)) return "Unscheduled";
    const diffMs = due - now;
    const dayMs = 24 * 60 * 60 * 1e3;
    if (Math.abs(diffMs) < dayMs) {
      return diffMs >= 0 ? "Due today" : "Overdue today";
    }
    if (diffMs > 0) {
      const days = Math.ceil(diffMs / dayMs);
      return days === 1 ? "In 1 day" : `In ${days} days`;
    }
    const overdueDays = Math.ceil(Math.abs(diffMs) / dayMs);
    return overdueDays === 1 ? "1 day overdue" : `${overdueDays} days overdue`;
  }
  function buildPassDisplayList(lecture) {
    const scheduleList = Array.isArray(lecture?.passPlan?.schedule) ? lecture.passPlan.schedule : [];
    const scheduleByOrder = /* @__PURE__ */ new Map();
    scheduleList.forEach((step, index) => {
      const order = Number.isFinite(step?.order) ? step.order : index + 1;
      scheduleByOrder.set(order, { ...step, order });
    });
    const passes = Array.isArray(lecture?.passes) ? lecture.passes : [];
    const passByOrder = /* @__PURE__ */ new Map();
    passes.forEach((pass) => {
      const order = Number(pass?.order);
      if (Number.isFinite(order)) {
        passByOrder.set(order, pass);
      }
    });
    const orders = /* @__PURE__ */ new Set([
      ...scheduleByOrder.keys(),
      ...passByOrder.keys()
    ]);
    if (!orders.size) {
      const planLength = scheduleList.length;
      for (let i = 1; i <= planLength; i += 1) {
        orders.add(i);
      }
    }
    return Array.from(orders).filter((order) => Number.isFinite(order)).sort((a, b) => a - b).map((order) => {
      const schedule = scheduleByOrder.get(order) || {};
      const pass = passByOrder.get(order) || {};
      return {
        order,
        label: schedule.label || pass.label || `Pass ${order}`,
        action: schedule.action || pass.action || "",
        due: Number.isFinite(pass?.due) ? pass.due : null,
        completedAt: Number.isFinite(pass?.completedAt) ? pass.completedAt : null,
        offsetMinutes: Number.isFinite(schedule?.offsetMinutes) ? schedule.offsetMinutes : null,
        anchor: schedule.anchor || pass.anchor || null
      };
    });
  }
  function createPassChipDisplay(info, now = Date.now(), options = {}) {
    const { onOpen, onToggle } = options || {};
    const chip = document.createElement("div");
    chip.className = "lecture-pass-chip";
    chip.style.setProperty("--chip-accent", passAccent(info?.order));
    chip.dataset.passOrder = String(info?.order ?? "");
    chip.setAttribute("role", "button");
    chip.tabIndex = 0;
    const passTitle = info?.action || info?.label || `Pass ${info?.order ?? ""}`;
    const statusWrap = document.createElement("div");
    statusWrap.className = "lecture-pass-chip-status";
    const toggleButton = document.createElement("button");
    toggleButton.type = "button";
    toggleButton.className = "lecture-pass-chip-toggle";
    toggleButton.setAttribute("aria-label", `Mark ${passTitle} as complete`);
    toggleButton.setAttribute("aria-pressed", "false");
    const toggleIcon = document.createElement("span");
    toggleIcon.className = "lecture-pass-chip-toggle-icon";
    toggleIcon.setAttribute("aria-hidden", "true");
    toggleIcon.textContent = "\u2713";
    toggleButton.append(toggleIcon);
    statusWrap.appendChild(toggleButton);
    chip.appendChild(statusWrap);
    const body = document.createElement("div");
    body.className = "lecture-pass-chip-body";
    chip.appendChild(body);
    const header = document.createElement("div");
    header.className = "lecture-pass-chip-header";
    const badge = document.createElement("span");
    badge.className = "lecture-pass-chip-order";
    badge.textContent = `P${info?.order ?? ""}`;
    header.appendChild(badge);
    const defaultLabel = `Pass ${info?.order ?? ""}`.trim();
    const primaryText = (info?.action || "").trim();
    const fallbackText = (info?.label || "").trim();
    const functionText = primaryText || (fallbackText && fallbackText !== defaultLabel ? fallbackText : "");
    if (functionText) {
      const functionEl = document.createElement("span");
      functionEl.className = "lecture-pass-chip-function";
      functionEl.textContent = functionText;
      header.appendChild(functionEl);
    }
    body.appendChild(header);
    const timing = document.createElement("div");
    timing.className = "lecture-pass-chip-due";
    timing.textContent = Number.isFinite(info?.due) ? formatPassDueTimestamp(info.due) : "No scheduled date";
    body.appendChild(timing);
    const countdown = document.createElement("div");
    countdown.className = "lecture-pass-chip-countdown";
    countdown.textContent = describePassCountdown(info?.due, now);
    body.appendChild(countdown);
    const isInitiallyComplete = Number.isFinite(info?.completedAt);
    const dueTimestamp = Number.isFinite(info?.due) ? info.due : null;
    function applyCompletionState(complete) {
      chip.classList.toggle("is-complete", complete);
      const overdue = !complete && Number.isFinite(dueTimestamp) && dueTimestamp < now;
      chip.classList.toggle("is-overdue", overdue);
      toggleButton.classList.toggle("is-active", complete);
      toggleButton.setAttribute("aria-pressed", complete ? "true" : "false");
      toggleButton.setAttribute(
        "aria-label",
        complete ? `Mark ${passTitle} as incomplete` : `Mark ${passTitle} as complete`
      );
    }
    applyCompletionState(isInitiallyComplete);
    let busy = false;
    toggleButton.addEventListener("click", async () => {
      if (typeof onToggle !== "function") return;
      if (busy) return;
      const desired = !toggleButton.classList.contains("is-active");
      busy = true;
      chip.classList.add("is-pending");
      toggleButton.disabled = true;
      try {
        await onToggle(desired);
        applyCompletionState(desired);
      } catch (err) {
        console.error(err);
      }
      chip.classList.remove("is-pending");
      toggleButton.disabled = false;
      busy = false;
    });
    chip.addEventListener("click", (event) => {
      if (event.target instanceof Element && event.target.closest(".lecture-pass-chip-toggle")) {
        return;
      }
      if (typeof onOpen === "function") {
        onOpen();
      }
    });
    chip.addEventListener("keydown", (event) => {
      if (event.target !== chip) return;
      if (event.key === "Enter" || event.key === " ") {
        event.preventDefault();
        if (typeof onOpen === "function") onOpen();
      }
    });
    return chip;
  }
  var MAX_PASS_COUNT2 = 20;
  var DAY_MINUTES3 = 24 * 60;
  function defaultActionForIndex2(index) {
    if (!Array.isArray(LECTURE_PASS_ACTIONS) || !LECTURE_PASS_ACTIONS.length) return "";
    const normalized2 = index % LECTURE_PASS_ACTIONS.length;
    return LECTURE_PASS_ACTIONS[Math.max(0, normalized2)];
  }
  function baseSchedule2(plan) {
    if (plan && Array.isArray(plan.schedule)) {
      return plan.schedule;
    }
    return DEFAULT_PASS_PLAN.schedule;
  }
  function computeDefaultGap2(schedule) {
    if (!Array.isArray(schedule) || schedule.length < 2) return DAY_MINUTES3;
    const deltas = [];
    for (let i = 1; i < schedule.length; i += 1) {
      const prev = Number(schedule[i - 1]?.offsetMinutes);
      const current = Number(schedule[i]?.offsetMinutes);
      if (Number.isFinite(prev) && Number.isFinite(current)) {
        const delta = current - prev;
        if (delta > 0) deltas.push(delta);
      }
    }
    return deltas.length ? deltas[deltas.length - 1] : DAY_MINUTES3;
  }
  function fallbackAnchor2(index) {
    if (index === 0) return "today";
    if (index === 1) return "tomorrow";
    return "upcoming";
  }
  function buildScheduleTemplate2(plan, count) {
    const template = baseSchedule2(plan);
    const numericCount = Number(count);
    const safeCount = Math.max(0, Number.isFinite(numericCount) ? Math.round(numericCount) : 0);
    const defaultGap = computeDefaultGap2(template);
    const schedule = [];
    for (let i = 0; i < safeCount; i += 1) {
      const source = template[i] || {};
      const previous = schedule[i - 1] || null;
      const order = i + 1;
      const offset = Number.isFinite(source.offsetMinutes) ? source.offsetMinutes : previous ? previous.offsetMinutes + defaultGap : i === 0 ? 0 : defaultGap * i;
      const anchor = typeof source.anchor === "string" && source.anchor.trim() ? source.anchor.trim() : previous?.anchor || fallbackAnchor2(i);
      const label = typeof source.label === "string" && source.label.trim() ? source.label.trim() : `Pass ${order}`;
      const action = typeof source.action === "string" && source.action.trim() ? source.action.trim() : defaultActionForIndex2(i);
      schedule.push({
        order,
        offsetMinutes: offset,
        anchor,
        label,
        action
      });
    }
    return schedule;
  }
  function adjustPassConfigs2(current, count, plan) {
    const template = buildScheduleTemplate2(plan || { schedule: current }, count);
    const byOrder = /* @__PURE__ */ new Map();
    (Array.isArray(current) ? current : []).forEach((entry) => {
      const order = Number(entry?.order);
      if (Number.isFinite(order) && !byOrder.has(order)) {
        byOrder.set(order, entry);
      }
    });
    return template.map((step, index) => {
      const existing = byOrder.get(step.order) || current[index] || {};
      const action = typeof existing?.action === "string" && existing.action.trim() ? existing.action.trim() : step.action;
      const offsetMinutes = Number.isFinite(existing?.offsetMinutes) ? Math.max(0, Math.round(existing.offsetMinutes)) : step.offsetMinutes;
      const anchor = typeof existing?.anchor === "string" && existing.anchor.trim() ? existing.anchor.trim() : step.anchor;
      const label = typeof existing?.label === "string" && existing.label.trim() ? existing.label.trim() : step.label;
      return { ...step, action, offsetMinutes, anchor, label };
    });
  }
  function clampPassCount2(value) {
    const parsed = Number(value);
    if (!Number.isFinite(parsed)) return 0;
    return Math.min(MAX_PASS_COUNT2, Math.max(0, Math.round(parsed)));
  }
  function buildPassPlanPayload2(passConfigs, existingPlan) {
    const planId = existingPlan && typeof existingPlan.id === "string" && existingPlan.id.trim() ? existingPlan.id.trim() : "custom";
    return {
      id: planId,
      schedule: passConfigs.map((config, index) => {
        const order = index + 1;
        const label = typeof config.label === "string" && config.label.trim() ? config.label.trim() : `Pass ${order}`;
        const offset = Number.isFinite(config.offsetMinutes) ? Math.max(0, Math.round(config.offsetMinutes)) : index === 0 ? 0 : (passConfigs[index - 1]?.offsetMinutes ?? 0) + DAY_MINUTES3;
        const anchor = typeof config.anchor === "string" && config.anchor.trim() ? config.anchor.trim() : fallbackAnchor2(index);
        const action = typeof config.action === "string" && config.action.trim() ? config.action.trim() : defaultActionForIndex2(index);
        return {
          order,
          label,
          offsetMinutes: offset,
          anchor,
          action
        };
      })
    };
  }
  function formatPassPlan2(plan) {
    if (!plan || !Array.isArray(plan.schedule) || !plan.schedule.length) {
      return "No passes scheduled";
    }
    const steps = plan.schedule.slice().sort((a, b) => (a?.order ?? 0) - (b?.order ?? 0)).map((step) => {
      const action = typeof step?.action === "string" && step.action.trim() ? step.action.trim() : `Pass ${step?.order ?? ""}`;
      const offset = formatOffset2(step?.offsetMinutes ?? 0);
      return `${action} \u2022 ${offset}`;
    });
    return `Plan: ${steps.join(", ")}`;
  }
  function formatOverdue(due, now) {
    const diffMs = Math.max(0, now - due);
    if (diffMs < 60 * 1e3) return "due now";
    const minutes = Math.round(diffMs / (60 * 1e3));
    if (minutes < 60) return `${minutes} min overdue`;
    const hours = Math.round(minutes / 60);
    if (hours < 24) return `${hours} hr overdue`;
    const days = Math.round(hours / 24);
    return `${days} day${days === 1 ? "" : "s"} overdue`;
  }
  function formatTimeUntil(due, now) {
    const diffMs = Math.max(0, due - now);
    if (diffMs < 60 * 1e3) return "due in under a minute";
    const minutes = Math.round(diffMs / (60 * 1e3));
    if (minutes < 60) return `due in ${minutes} min`;
    const hours = Math.round(minutes / 60);
    if (hours < 24) return `due in ${hours} hr`;
    const days = Math.round(hours / 24);
    return `due in ${days} day${days === 1 ? "" : "s"}`;
  }
  function formatNextDueDescriptor(nextDueAt, now = Date.now()) {
    if (nextDueAt == null || !Number.isFinite(nextDueAt)) return "Not scheduled";
    const date = new Date(nextDueAt);
    const dateLabel = new Intl.DateTimeFormat(void 0, {
      month: "short",
      day: "numeric",
      hour: "numeric",
      minute: "2-digit"
    }).format(date);
    const relative = nextDueAt <= now ? formatOverdue(nextDueAt, now) : formatTimeUntil(nextDueAt, now);
    return `${dateLabel} \u2022 ${relative}`;
  }
  function renderEmptyState() {
    const empty = document.createElement("div");
    empty.className = "lectures-empty";
    empty.textContent = "No lectures found. Use \u201CAdd Lecture\u201D to create one.";
    return empty;
  }
  function computeLecturePassStats(lecture) {
    const passes = Array.isArray(lecture?.passes) ? lecture.passes : [];
    const scheduled = Array.isArray(lecture?.passPlan?.schedule) ? lecture.passPlan.schedule.length : 0;
    const statusTotal = Number.isFinite(lecture?.status?.totalPasses) ? lecture.status.totalPasses : 0;
    let planned = Math.max(scheduled, passes.length, statusTotal);
    const completedFromPasses = passes.filter((pass) => Number.isFinite(pass?.completedAt)).length;
    const completedFromStatus = Number.isFinite(lecture?.status?.completedPasses) ? lecture.status.completedPasses : 0;
    const completed = Math.max(completedFromPasses, completedFromStatus);
    planned = Math.max(planned, completed);
    const remaining = Math.max(0, planned - completed);
    return { planned, completed, remaining };
  }
  function summarizeLectures(lectures) {
    return (Array.isArray(lectures) ? lectures : []).reduce(
      (acc, lecture) => {
        const stats = computeLecturePassStats(lecture);
        acc.totalPasses += stats.planned;
        acc.completed += stats.completed;
        return acc;
      },
      { totalPasses: 0, completed: 0 }
    );
  }
  function formatPassTotals(summary) {
    if (!summary || summary.totalPasses === 0) return "0 passes planned";
    return `${summary.completed}/${summary.totalPasses} passes complete`;
  }
  function labelForWeekKey(weekKey) {
    if (weekKey === "__no-week") return "No week assigned";
    return formatWeekLabel3(weekKey);
  }
  var LECTURE_SORT_FIELDS = ["position", "created", "nextDue"];
  var DEFAULT_LECTURE_SORT = { field: "position", direction: "asc" };
  function normalizeLectureSort(value) {
    if (!value) return { ...DEFAULT_LECTURE_SORT };
    let field = DEFAULT_LECTURE_SORT.field;
    let direction = DEFAULT_LECTURE_SORT.direction;
    if (typeof value === "string") {
      const parts = value.split("-");
      if (parts.length === 1) {
        field = parts[0];
      } else if (parts.length >= 2) {
        [field, direction] = parts;
      }
    } else if (typeof value === "object") {
      if (typeof value.field === "string") field = value.field;
      if (value.direction === "asc" || value.direction === "desc") direction = value.direction;
    }
    if (!LECTURE_SORT_FIELDS.includes(field)) {
      field = DEFAULT_LECTURE_SORT.field;
    }
    direction = direction === "desc" ? "desc" : "asc";
    return { field, direction };
  }
  function formatLectureSortValue(sort) {
    const normalized2 = normalizeLectureSort(sort);
    return `${normalized2.field}-${normalized2.direction}`;
  }
  function describeSortDirectionLabel(field, direction) {
    if (field === "created") {
      return direction === "desc" ? "Newest first" : "Oldest first";
    }
    if (field === "nextDue") {
      return direction === "asc" ? "Soonest due" : "Latest due";
    }
    return direction === "desc" ? "High \u2192 Low" : "Low \u2192 High";
  }
  function describeSortDirectionAria(field, direction) {
    if (field === "created") {
      return `Toggle sort order (currently ${direction === "desc" ? "newest first" : "oldest first"})`;
    }
    if (field === "nextDue") {
      return `Toggle sort order (currently ${direction === "asc" ? "soonest due first" : "latest due first"})`;
    }
    return `Toggle sort order (currently ${direction === "asc" ? "ascending" : "descending"})`;
  }
  function sortLecturesForDisplay(lectures, sort) {
    const { field, direction } = normalizeLectureSort(sort);
    const multiplier = direction === "desc" ? -1 : 1;
    const list = Array.isArray(lectures) ? lectures.slice() : [];
    return list.sort((a, b) => {
      let comparison = 0;
      if (field === "created") {
        const aValue = Number(a?.createdAt);
        const bValue = Number(b?.createdAt);
        const aRank = Number.isFinite(aValue) ? aValue : direction === "desc" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;
        const bRank = Number.isFinite(bValue) ? bValue : direction === "desc" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;
        if (aRank !== bRank) {
          comparison = aRank < bRank ? -1 : 1;
        }
      } else if (field === "nextDue") {
        const aDue = resolveNextDueAt(a);
        const bDue = resolveNextDueAt(b);
        const aRank = Number.isFinite(aDue) ? aDue : direction === "desc" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;
        const bRank = Number.isFinite(bDue) ? bDue : direction === "desc" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;
        if (aRank !== bRank) {
          comparison = aRank < bRank ? -1 : 1;
        }
      } else {
        const posA = Number(a?.position);
        const posB = Number(b?.position);
        const posAValid = Number.isFinite(posA);
        const posBValid = Number.isFinite(posB);
        if (posAValid && posBValid && posA !== posB) {
          comparison = posA < posB ? -1 : 1;
        } else if (posAValid && !posBValid) {
          comparison = -1;
        } else if (!posAValid && posBValid) {
          comparison = 1;
        }
      }
      if (comparison !== 0) {
        return comparison * multiplier;
      }
      const nameA = (a?.name || "").toLowerCase();
      const nameB = (b?.name || "").toLowerCase();
      if (nameA && nameB && nameA !== nameB) return nameA.localeCompare(nameB);
      const idA = Number(a?.id);
      const idB = Number(b?.id);
      if (Number.isFinite(idA) && Number.isFinite(idB) && idA !== idB) return idA - idB;
      return 0;
    });
  }
  function resolveNextDueAt(lecture) {
    if (Number.isFinite(lecture?.nextDueAt)) return lecture.nextDueAt;
    const passes = Array.isArray(lecture?.passes) ? lecture.passes : [];
    for (const pass of passes) {
      if (!pass || Number.isFinite(pass?.completedAt)) continue;
      if (Number.isFinite(pass?.due)) return pass.due;
    }
    return null;
  }
  function getLectureState(lecture, stats) {
    if (lecture?.status?.state) return lecture.status.state;
    const counts = stats || computeLecturePassStats(lecture);
    if (!counts.planned) return "unscheduled";
    if (counts.completed >= counts.planned) return "complete";
    if (counts.completed > 0) return "in-progress";
    return "pending";
  }
  function renderLectureWeekRow(lecture, onEdit, onDelete, onEditPass, onTogglePass, onExport, now = Date.now()) {
    const row = document.createElement("div");
    row.className = "lecture-row";
    row.dataset.lectureRow = "true";
    row.dataset.lectureId = String(lecture.id);
    row.dataset.blockId = String(lecture.blockId ?? "");
    const stats = computeLecturePassStats(lecture);
    const stateLabel = getLectureState(lecture, stats);
    const overviewCell = document.createElement("div");
    overviewCell.className = "lecture-col lecture-overview lecture-col-lecture";
    const header = document.createElement("div");
    header.className = "lecture-overview-header";
    const name = document.createElement("span");
    name.className = "lecture-name";
    name.textContent = lecture.name || `Lecture ${lecture.id}`;
    header.appendChild(name);
    const status = document.createElement("span");
    status.className = "lecture-status-pill";
    status.dataset.status = stateLabel;
    status.textContent = stateLabel;
    header.appendChild(status);
    overviewCell.appendChild(header);
    const nextDueLine = document.createElement("div");
    nextDueLine.className = "lecture-next-indicator";
    nextDueLine.textContent = formatNextDueDescriptor(resolveNextDueAt(lecture), now);
    overviewCell.appendChild(nextDueLine);
    if (lecture.position != null) {
      const position = document.createElement("div");
      position.className = "lecture-overview-position";
      position.textContent = `Position: ${lecture.position}`;
      overviewCell.appendChild(position);
    }
    const tags = Array.isArray(lecture.tags) ? lecture.tags.filter(Boolean) : [];
    if (tags.length) {
      const tagList = document.createElement("div");
      tagList.className = "lecture-tags";
      tags.forEach((tag) => {
        const chip = document.createElement("span");
        chip.className = "lecture-tag";
        chip.textContent = tag;
        tagList.appendChild(chip);
      });
      overviewCell.appendChild(tagList);
    }
    const metrics = document.createElement("div");
    metrics.className = "lecture-overview-metrics";
    const completedMetric = document.createElement("span");
    completedMetric.className = "lecture-metric lecture-metric-complete";
    completedMetric.textContent = `${stats.completed} complete`;
    metrics.appendChild(completedMetric);
    const remainingMetric = document.createElement("span");
    remainingMetric.className = "lecture-metric lecture-metric-remaining";
    remainingMetric.textContent = `${stats.remaining} remaining`;
    metrics.appendChild(remainingMetric);
    overviewCell.appendChild(metrics);
    row.appendChild(overviewCell);
    const passesCell = document.createElement("div");
    passesCell.className = "lecture-col lecture-passes-cell lecture-col-passes";
    const passScroller = document.createElement("div");
    passScroller.className = "lecture-pass-scroller";
    const passList = buildPassDisplayList(lecture);
    if (!passList.length) {
      const empty = document.createElement("div");
      empty.className = "lecture-pass-empty";
      empty.textContent = "No passes planned";
      passScroller.appendChild(empty);
    } else {
      passList.forEach((info) => {
        const chip = createPassChipDisplay(info, now, {
          onOpen: () => onEditPass(lecture, info),
          onToggle: (checked) => onTogglePass?.(lecture, info, checked)
        });
        passScroller.appendChild(chip);
      });
    }
    passesCell.appendChild(passScroller);
    row.appendChild(passesCell);
    const actions = document.createElement("div");
    actions.className = "lecture-col lecture-actions lecture-col-actions";
    const editBtn = document.createElement("button");
    editBtn.type = "button";
    editBtn.className = "btn secondary";
    editBtn.dataset.action = "edit-lecture";
    editBtn.textContent = "Edit";
    editBtn.addEventListener("click", () => onEdit(lecture));
    actions.appendChild(editBtn);
    const deleteBtn = document.createElement("button");
    deleteBtn.type = "button";
    deleteBtn.className = "btn secondary";
    deleteBtn.dataset.action = "delete-lecture";
    deleteBtn.textContent = "Delete";
    deleteBtn.addEventListener("click", () => onDelete(lecture));
    actions.appendChild(deleteBtn);
    if (typeof onExport === "function") {
      const exportBtn = document.createElement("button");
      exportBtn.type = "button";
      exportBtn.className = "btn secondary";
      exportBtn.dataset.action = "export-lecture";
      exportBtn.textContent = "Export";
      exportBtn.addEventListener("click", (event) => {
        event.stopPropagation();
        onExport(lecture);
      });
      actions.appendChild(exportBtn);
    }
    row.appendChild(actions);
    return row;
  }
  function renderLectureTable(blocks, lectures, filters, onEdit, onDelete, onEditPass, onTogglePass, onExportLecture, onExportWeek, onExportBlock) {
    const card = document.createElement("section");
    card.className = "card lectures-card";
    const title = document.createElement("h2");
    title.textContent = "Lectures";
    card.appendChild(title);
    if (!lectures.length) {
      card.appendChild(renderEmptyState());
      return card;
    }
    const blockMap = /* @__PURE__ */ new Map();
    blocks.forEach((block) => {
      if (!block || block.blockId == null) return;
      blockMap.set(String(block.blockId), block);
    });
    const orderMap = buildBlockOrderMap(blocks);
    const blockFilter = String(filters?.blockId || "").trim();
    const weekFilter = String(filters?.week || "").trim();
    const now = Date.now();
    const sortConfig = normalizeLectureSort(filters?.sort);
    const openSnapshot = Number(filters?.openSnapshot) || 0;
    const storedBlockKeys = new Set(
      Array.isArray(filters?.openBlocks) ? filters.openBlocks.map((value) => String(value ?? "")) : []
    );
    const storedWeekKeys = new Set(
      Array.isArray(filters?.openWeeks) ? filters.openWeeks.map((value) => String(value ?? "")) : []
    );
    const useStoredExpansion = openSnapshot > 0;
    function composeWeekKey(blockKey, weekValue) {
      return `${String(blockKey)}::${String(weekValue)}`;
    }
    function recordBlockOpen(blockKey, isOpen) {
      const key = String(blockKey ?? "");
      const lectureState = ensureLectureState();
      const openBlocks = new Set(
        Array.isArray(lectureState.openBlocks) ? lectureState.openBlocks.map((value) => String(value ?? "")) : []
      );
      const openWeeks = new Set(
        Array.isArray(lectureState.openWeeks) ? lectureState.openWeeks.map((value) => String(value ?? "")) : []
      );
      if (isOpen) {
        openBlocks.add(key);
      } else {
        openBlocks.delete(key);
        Array.from(openWeeks).forEach((entry) => {
          if (entry.startsWith(`${key}::`)) {
            openWeeks.delete(entry);
          }
        });
      }
      setLecturesState({
        openBlocks: Array.from(openBlocks),
        openWeeks: Array.from(openWeeks),
        openSnapshot: Date.now()
      });
    }
    function recordWeekOpen(blockKey, weekValue, isOpen) {
      const composite = composeWeekKey(blockKey, weekValue);
      const lectureState = ensureLectureState();
      const openWeeks = new Set(
        Array.isArray(lectureState.openWeeks) ? lectureState.openWeeks.map((value) => String(value ?? "")) : []
      );
      if (isOpen) {
        openWeeks.add(composite);
      } else {
        openWeeks.delete(composite);
      }
      setLecturesState({
        openWeeks: Array.from(openWeeks),
        openSnapshot: Date.now()
      });
    }
    const blockGroups = /* @__PURE__ */ new Map();
    lectures.forEach((lecture) => {
      if (!lecture) return;
      const rawBlockId = lecture.blockId == null || lecture.blockId === "" ? "" : lecture.blockId;
      const key = rawBlockId === "" ? "__no-block" : String(rawBlockId);
      if (!blockGroups.has(key)) {
        const blockInfo = blockMap.get(String(rawBlockId));
        const fallbackTitle = rawBlockId === "" ? "No block assigned" : `Block ${rawBlockId}`;
        blockGroups.set(key, {
          key,
          blockId: rawBlockId,
          block: blockInfo || { blockId: rawBlockId, title: blockInfo?.title || fallbackTitle, color: blockInfo?.color || null },
          lectures: [],
          weeks: /* @__PURE__ */ new Map()
        });
      }
      const group = blockGroups.get(key);
      group.lectures.push(lecture);
      const weekKey = lecture.week == null || lecture.week === "" ? "__no-week" : String(lecture.week);
      if (!group.weeks.has(weekKey)) {
        group.weeks.set(weekKey, []);
      }
      group.weeks.get(weekKey).push(lecture);
    });
    const groupsContainer = document.createElement("div");
    groupsContainer.className = "lectures-groups";
    const sortedGroups = Array.from(blockGroups.values()).sort((a, b) => {
      const ao = orderMap.has(a.blockId) ? orderMap.get(a.blockId) : orderMap.get(String(a.blockId)) ?? Number.POSITIVE_INFINITY;
      const bo = orderMap.has(b.blockId) ? orderMap.get(b.blockId) : orderMap.get(String(b.blockId)) ?? Number.POSITIVE_INFINITY;
      if (ao !== bo) return ao - bo;
      const nameA = (a.block?.title || a.block?.name || String(a.blockId || "") || "").toLowerCase();
      const nameB = (b.block?.title || b.block?.name || String(b.blockId || "") || "").toLowerCase();
      return nameA.localeCompare(nameB);
    });
    const activeBlockId = findActiveBlockId(blocks);
    const defaultBlockId = (() => {
      if (blockFilter) return blockFilter;
      if (activeBlockId) return activeBlockId;
      const firstWithId = sortedGroups.find((group) => {
        const id = String(group.blockId ?? "");
        return id !== "";
      });
      if (firstWithId) return String(firstWithId.blockId ?? "");
      return String(sortedGroups[0]?.blockId ?? "");
    })();
    sortedGroups.forEach((group) => {
      const blockDetails = document.createElement("details");
      blockDetails.className = "lectures-block-group";
      const normalizedGroupId = String(group.blockId ?? "");
      const blockKey = String(group.key ?? normalizedGroupId);
      blockDetails.dataset.blockId = normalizedGroupId;
      blockDetails.dataset.blockKey = blockKey;
      const blockInfo = group.block || {};
      if (blockInfo.color) {
        blockDetails.style.setProperty("--block-accent", blockInfo.color);
        blockDetails.classList.add("has-accent");
      }
      const blockSummary = document.createElement("summary");
      blockSummary.className = "lectures-block-summary";
      const blockTitle = document.createElement("span");
      blockTitle.className = "lectures-block-name";
      blockTitle.textContent = blockInfo.title || blockInfo.name || (group.blockId ? `Block ${group.blockId}` : "No block assigned");
      blockSummary.appendChild(blockTitle);
      const blockStats = summarizeLectures(group.lectures);
      const blockCounts = document.createElement("span");
      blockCounts.className = "lectures-block-counts";
      const lectureCount = group.lectures.length;
      const lectureLabel = `${lectureCount} lecture${lectureCount === 1 ? "" : "s"}`;
      blockCounts.textContent = `${lectureLabel} \u2022 ${formatPassTotals(blockStats)}`;
      blockSummary.appendChild(blockCounts);
      if (typeof onExportBlock === "function") {
        const blockExportBtn = document.createElement("button");
        blockExportBtn.type = "button";
        blockExportBtn.className = "btn secondary lectures-block-export";
        blockExportBtn.textContent = "Export block";
        blockExportBtn.addEventListener("click", (event) => {
          event.stopPropagation();
          onExportBlock(group.block);
        });
        blockSummary.appendChild(blockExportBtn);
      }
      blockDetails.appendChild(blockSummary);
      const weekWrapper = document.createElement("div");
      weekWrapper.className = "lectures-week-groups";
      const sortedWeeks = Array.from(group.weeks.entries()).sort((aEntry, bEntry) => {
        const [aKey] = aEntry;
        const [bKey] = bEntry;
        if (aKey === "__no-week" && bKey === "__no-week") return 0;
        if (aKey === "__no-week") return 1;
        if (bKey === "__no-week") return -1;
        const aNum = Number(aKey);
        const bNum = Number(bKey);
        if (Number.isFinite(aNum) && Number.isFinite(bNum) && aNum !== bNum) return bNum - aNum;
        if (Number.isFinite(aNum) && !Number.isFinite(bNum)) return -1;
        if (!Number.isFinite(aNum) && Number.isFinite(bNum)) return 1;
        return String(bKey).localeCompare(String(aKey));
      });
      const matchesWeekFilter = weekFilter ? sortedWeeks.some(([weekKey]) => {
        const normalized2 = weekKey === "__no-week" ? "" : String(weekKey);
        return normalized2 === weekFilter;
      }) : false;
      let shouldOpenBlock;
      if (blockFilter) {
        shouldOpenBlock = blockFilter === normalizedGroupId;
      } else if (matchesWeekFilter) {
        shouldOpenBlock = true;
      } else if (useStoredExpansion) {
        shouldOpenBlock = storedBlockKeys.has(blockKey);
      } else {
        shouldOpenBlock = defaultBlockId === normalizedGroupId;
      }
      blockDetails.open = shouldOpenBlock;
      blockDetails.addEventListener("toggle", () => {
        recordBlockOpen(blockKey, blockDetails.open);
      });
      sortedWeeks.forEach(([weekKey, weekLectures], index) => {
        const weekDetails = document.createElement("details");
        weekDetails.className = "lectures-week-group";
        const normalizedWeek = weekKey === "__no-week" ? "" : String(weekKey);
        weekDetails.dataset.week = normalizedWeek;
        weekDetails.dataset.weekValue = normalizedWeek;
        weekDetails.dataset.weekKey = String(weekKey ?? "");
        const compositeKey = composeWeekKey(blockKey, normalizedWeek);
        let shouldOpenWeek;
        if (weekFilter) {
          shouldOpenWeek = weekFilter === normalizedWeek;
        } else if (useStoredExpansion) {
          shouldOpenWeek = storedWeekKeys.has(compositeKey);
        } else {
          shouldOpenWeek = blockDetails.open && index === 0;
        }
        weekDetails.open = blockDetails.open && shouldOpenWeek;
        weekDetails.addEventListener("toggle", () => {
          recordWeekOpen(blockKey, normalizedWeek, weekDetails.open);
        });
        const weekSummary = document.createElement("summary");
        weekSummary.className = "lectures-week-summary";
        const weekTitle = document.createElement("span");
        weekTitle.className = "lectures-week-title";
        weekTitle.textContent = labelForWeekKey(weekKey);
        weekSummary.appendChild(weekTitle);
        const weekStats = summarizeLectures(weekLectures);
        const weekCounts = document.createElement("span");
        weekCounts.className = "lectures-week-counts";
        const weekLectureCount = weekLectures.length;
        const weekLectureLabel = `${weekLectureCount} lecture${weekLectureCount === 1 ? "" : "s"}`;
        weekCounts.textContent = `${weekLectureLabel} \u2022 ${formatPassTotals(weekStats)}`;
        weekSummary.appendChild(weekCounts);
        if (typeof onExportWeek === "function") {
          const weekExportBtn = document.createElement("button");
          weekExportBtn.type = "button";
          weekExportBtn.className = "btn secondary lectures-week-export";
          weekExportBtn.textContent = "Export week";
          weekExportBtn.addEventListener("click", (event) => {
            event.stopPropagation();
            const targetWeek = weekLectures[0]?.week == null ? null : weekLectures[0].week;
            onExportWeek(group.block, targetWeek);
          });
          weekSummary.appendChild(weekExportBtn);
        }
        weekDetails.appendChild(weekSummary);
        const weekBody = document.createElement("div");
        weekBody.className = "lectures-week-body";
        const list = document.createElement("div");
        list.className = "lectures-week-list";
        const headerRow = document.createElement("div");
        headerRow.className = "lecture-row lecture-row-header";
        [
          { label: "Lecture", className: "lecture-col-lecture" },
          { label: "Passes", className: "lecture-col-passes" },
          { label: "Actions", className: "lecture-col-actions" }
        ].forEach((column) => {
          const cell = document.createElement("div");
          cell.className = `lecture-col ${column.className}`;
          cell.textContent = column.label;
          headerRow.appendChild(cell);
        });
        list.appendChild(headerRow);
        sortLecturesForDisplay(weekLectures, sortConfig).forEach((entry) => {
          const row = renderLectureWeekRow(
            entry,
            onEdit,
            onDelete,
            onEditPass,
            onTogglePass,
            (lecture) => onExportLecture?.(lecture, group.block),
            now
          );
          list.appendChild(row);
        });
        weekBody.appendChild(list);
        weekDetails.appendChild(weekBody);
        weekWrapper.appendChild(weekDetails);
      });
      blockDetails.appendChild(weekWrapper);
      groupsContainer.appendChild(blockDetails);
    });
    card.appendChild(groupsContainer);
    return card;
  }
  function uniqueStatusValues(lectures) {
    const set = /* @__PURE__ */ new Set();
    lectures.forEach((lecture) => {
      const state2 = lecture?.status?.state;
      if (state2) set.add(state2);
    });
    return Array.from(set);
  }
  function uniqueWeeks(lectures) {
    const set = /* @__PURE__ */ new Set();
    lectures.forEach((lecture) => {
      if (lecture.week == null) {
        set.add("");
      } else {
        set.add(String(lecture.week));
      }
    });
    return Array.from(set).filter((value) => value !== "").map((value) => Number(value)).filter((value) => Number.isFinite(value)).sort((a, b) => a - b);
  }
  function applyFilters(lectures, filters) {
    const query = (filters.query || "").trim().toLowerCase();
    const blockId = (filters.blockId || "").trim();
    const weekFilter = (filters.week || "").trim();
    const statusFilter = (filters.status || "").trim();
    const tagFilter = (filters.tag || "").trim().toLowerCase();
    return lectures.filter((lecture) => {
      if (blockId && String(lecture.blockId) !== blockId) return false;
      if (weekFilter) {
        const week = lecture.week == null ? "" : String(lecture.week);
        if (week !== weekFilter) return false;
      }
      if (statusFilter && statusFilter !== "all") {
        const statusState = lecture?.status?.state || "";
        if (statusState !== statusFilter) return false;
      }
      if (query) {
        const actionTerms = Array.isArray(lecture?.passPlan?.schedule) ? lecture.passPlan.schedule.map((step) => step?.action || "") : [];
        const haystacks = [lecture.name, lecture.id != null ? String(lecture.id) : "", lecture.blockId, ...actionTerms];
        if (!haystacks.some((value) => String(value || "").toLowerCase().includes(query))) {
          return false;
        }
      }
      if (tagFilter) {
        const tags = Array.isArray(lecture.tags) ? lecture.tags : [];
        if (!tags.some((tag) => String(tag).toLowerCase().includes(tagFilter))) {
          return false;
        }
      }
      return true;
    });
  }
  function buildToolbar(blocks, lectures, lectureLists, redraw, defaultPassPlan, onImport) {
    const filters = ensureLectureState();
    const toolbar = document.createElement("div");
    toolbar.className = "lectures-toolbar";
    toolbar.setAttribute("role", "toolbar");
    toolbar.setAttribute("aria-label", "Lecture filters");
    const filterGroup = document.createElement("div");
    filterGroup.className = "lectures-toolbar-filters";
    toolbar.appendChild(filterGroup);
    const actionsGroup = document.createElement("div");
    actionsGroup.className = "lectures-toolbar-actions";
    toolbar.appendChild(actionsGroup);
    if (typeof onImport === "function") {
      const importInput = document.createElement("input");
      importInput.type = "file";
      importInput.accept = "application/json";
      importInput.style.display = "none";
      const importBtn = document.createElement("button");
      importBtn.type = "button";
      importBtn.className = "btn secondary lectures-import-btn";
      importBtn.textContent = "Import bundle";
      importBtn.addEventListener("click", () => importInput.click());
      importInput.addEventListener("change", async () => {
        const file = importInput.files[0];
        if (!file) return;
        try {
          const text = await file.text();
          const json = JSON.parse(text);
          await onImport(json);
        } catch (err) {
          console.error("Failed to import lecture bundle", err);
          alert("Import failed.");
        } finally {
          importInput.value = "";
        }
      });
      actionsGroup.appendChild(importBtn);
      toolbar.appendChild(importInput);
    }
    const search = document.createElement("input");
    search.type = "search";
    search.className = "input lectures-search";
    search.placeholder = "Search lectures";
    search.value = filters.query || "";
    const debouncedSearch = debounce((value) => {
      setLecturesState({ query: value });
      redraw();
    }, 150);
    search.addEventListener("input", (e) => {
      debouncedSearch(e.target.value);
    });
    filterGroup.appendChild(search);
    const sortState = normalizeLectureSort(filters.sort);
    const sortControls = document.createElement("div");
    sortControls.className = "lectures-sort-controls";
    const sortSelect = document.createElement("select");
    sortSelect.className = "input lectures-sort-field";
    sortSelect.setAttribute("aria-label", "Sort lectures");
    [
      { value: "position", label: "Manual order" },
      { value: "created", label: "Date added" },
      { value: "nextDue", label: "Next pass due" }
    ].forEach((option) => {
      const opt = document.createElement("option");
      opt.value = option.value;
      opt.textContent = option.label;
      sortSelect.appendChild(opt);
    });
    sortSelect.value = sortState.field;
    sortSelect.addEventListener("change", () => {
      sortState.field = sortSelect.value;
      syncDirectionControl();
      setLecturesState({ sort: formatLectureSortValue(sortState) });
      redraw();
    });
    sortControls.appendChild(sortSelect);
    const directionBtn = document.createElement("button");
    directionBtn.type = "button";
    directionBtn.className = "btn secondary lectures-sort-direction";
    directionBtn.addEventListener("click", () => {
      sortState.direction = sortState.direction === "asc" ? "desc" : "asc";
      syncDirectionControl();
      setLecturesState({ sort: formatLectureSortValue(sortState) });
      redraw();
    });
    function syncDirectionControl() {
      directionBtn.dataset.direction = sortState.direction;
      directionBtn.textContent = describeSortDirectionLabel(sortState.field, sortState.direction);
      directionBtn.setAttribute("aria-label", describeSortDirectionAria(sortState.field, sortState.direction));
    }
    syncDirectionControl();
    sortControls.appendChild(directionBtn);
    filterGroup.appendChild(sortControls);
    const blockSelect = document.createElement("select");
    blockSelect.className = "input lectures-filter";
    blockSelect.setAttribute("aria-label", "Filter by block");
    const allBlocksOption = document.createElement("option");
    allBlocksOption.value = "";
    allBlocksOption.textContent = "All blocks";
    blockSelect.appendChild(allBlocksOption);
    blocks.forEach((block) => {
      if (!block || !block.blockId) return;
      const option = document.createElement("option");
      option.value = block.blockId;
      option.textContent = block.title || block.blockId;
      blockSelect.appendChild(option);
    });
    blockSelect.value = filters.blockId || "";
    blockSelect.addEventListener("change", () => {
      setLecturesState({ blockId: blockSelect.value });
      redraw();
    });
    filterGroup.appendChild(blockSelect);
    const weekSelect = document.createElement("select");
    weekSelect.className = "input lectures-filter";
    weekSelect.setAttribute("aria-label", "Filter by week");
    const allWeeksOption = document.createElement("option");
    allWeeksOption.value = "";
    allWeeksOption.textContent = "All weeks";
    weekSelect.appendChild(allWeeksOption);
    uniqueWeeks(lectures).forEach((week) => {
      const option = document.createElement("option");
      option.value = String(week);
      option.textContent = `Week ${week}`;
      weekSelect.appendChild(option);
    });
    weekSelect.value = normalizeWeekValue(filters.week);
    weekSelect.addEventListener("change", () => {
      setLecturesState({ week: weekSelect.value });
      redraw();
    });
    filterGroup.appendChild(weekSelect);
    const statuses = uniqueStatusValues(lectures);
    if (statuses.length) {
      const statusSelect = document.createElement("select");
      statusSelect.className = "input lectures-filter";
      statusSelect.setAttribute("aria-label", "Filter by status");
      const allStatusOption = document.createElement("option");
      allStatusOption.value = "all";
      allStatusOption.textContent = "All statuses";
      statusSelect.appendChild(allStatusOption);
      statuses.sort().forEach((status) => {
        const option = document.createElement("option");
        option.value = status;
        option.textContent = status.charAt(0).toUpperCase() + status.slice(1);
        statusSelect.appendChild(option);
      });
      statusSelect.value = filters.status || "all";
      statusSelect.addEventListener("change", () => {
        setLecturesState({ status: statusSelect.value });
        redraw();
      });
      filterGroup.appendChild(statusSelect);
    }
    const tagSearch = document.createElement("input");
    tagSearch.type = "search";
    tagSearch.className = "input lectures-tag-search";
    tagSearch.placeholder = "Filter tags";
    tagSearch.value = filters.tag || "";
    const debouncedTag = debounce((value) => {
      setLecturesState({ tag: value });
      redraw();
    }, 150);
    tagSearch.addEventListener("input", (e) => {
      debouncedTag(e.target.value);
    });
    filterGroup.appendChild(tagSearch);
    const addBlockSelect = document.createElement("select");
    addBlockSelect.className = "input lectures-add-select";
    addBlockSelect.setAttribute("aria-label", "Select block for new lecture");
    const addBlockPlaceholder = document.createElement("option");
    addBlockPlaceholder.value = "";
    addBlockPlaceholder.textContent = "Select block";
    addBlockSelect.appendChild(addBlockPlaceholder);
    blocks.forEach((block) => {
      if (!block || !block.blockId) return;
      const option = document.createElement("option");
      option.value = block.blockId;
      option.textContent = block.title || block.blockId;
      addBlockSelect.appendChild(option);
    });
    const defaultAddBlock = blocks.find((block) => block.blockId === filters.blockId)?.blockId || (blocks[0]?.blockId ?? "");
    if (defaultAddBlock) {
      addBlockSelect.value = defaultAddBlock;
    }
    actionsGroup.appendChild(addBlockSelect);
    const addWeekSelect = document.createElement("select");
    addWeekSelect.className = "input lectures-add-select";
    addWeekSelect.setAttribute("aria-label", "Select week for new lecture");
    actionsGroup.appendChild(addWeekSelect);
    let addWeekValue = normalizeWeekValue(filters.week);
    const updateAddWeekSelect = () => {
      const blockId = addBlockSelect.value;
      const blankLabel = blockId ? "No week" : "Select block first";
      populateWeekSelect(addWeekSelect, blockId, blocks, lectureLists, {
        selectedValue: addWeekValue,
        blankLabel
      });
      addWeekSelect.disabled = !blockId;
      addWeekValue = addWeekSelect.value;
    };
    updateAddWeekSelect();
    addBlockSelect.addEventListener("change", () => {
      if (filters.blockId && filters.blockId === addBlockSelect.value) {
        addWeekValue = normalizeWeekValue(filters.week);
      } else {
        addWeekValue = "";
      }
      updateAddWeekSelect();
      syncAddButtonState();
    });
    addWeekSelect.addEventListener("change", () => {
      addWeekValue = addWeekSelect.value;
    });
    const addBtn = document.createElement("button");
    addBtn.type = "button";
    addBtn.className = "btn primary add-lecture-btn";
    addBtn.dataset.action = "add-lecture";
    const addIcon = document.createElement("span");
    addIcon.className = "add-lecture-btn-icon";
    addIcon.setAttribute("aria-hidden", "true");
    addIcon.innerHTML = '<svg viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" focusable="false" aria-hidden="true"><path d="M8 3v10M3 8h10"/></svg>';
    const addLabel = document.createElement("span");
    addLabel.className = "add-lecture-btn-label";
    addLabel.textContent = "Add lecture";
    addBtn.append(addIcon, addLabel);
    actionsGroup.appendChild(addBtn);
    const syncAddButtonState = () => {
      addBtn.disabled = !blocks.length || !addBlockSelect.value;
    };
    syncAddButtonState();
    addBtn.addEventListener("click", () => {
      const selectedBlockId = addBlockSelect.value || (blocks[0]?.blockId || "");
      if (!selectedBlockId) return;
      const passPlanTemplate = clonePassPlan(
        defaultPassPlan && Array.isArray(defaultPassPlan.schedule) ? defaultPassPlan : void 0
      );
      const rawWeek = addWeekSelect.disabled ? "" : addWeekSelect.value;
      const numericWeek = rawWeek === "" ? "" : Number(rawWeek);
      const selectedWeek = rawWeek === "" || Number.isNaN(numericWeek) ? "" : numericWeek;
      openLectureDialog({
        mode: "create",
        blocks,
        lectureLists,
        defaults: {
          blockId: selectedBlockId,
          name: "",
          week: selectedWeek === "" ? "" : selectedWeek,
          passPlan: passPlanTemplate,
          startAt: Date.now()
        },
        onSubmit: async (payload) => {
          await saveLecture(payload);
          await invalidateBlockCatalog();
          await redraw();
        }
      });
    });
    return toolbar;
  }
  function openLectureDialog(options) {
    const { mode, blocks, defaults = {}, lectureLists = {}, onSubmit } = options;
    const overlay = document.createElement("div");
    overlay.className = "modal lecture-dialog";
    const card = document.createElement("div");
    card.className = "card";
    const title = document.createElement("h2");
    title.textContent = mode === "edit" ? "Edit lecture" : "Add lecture";
    card.appendChild(title);
    const form = document.createElement("form");
    form.className = "lecture-form";
    const basicsSection = document.createElement("section");
    basicsSection.className = "lecture-form-section";
    const basicsTitle = document.createElement("h3");
    basicsTitle.className = "lecture-form-section-title";
    basicsTitle.textContent = "Lecture details";
    basicsSection.appendChild(basicsTitle);
    const basicsGrid = document.createElement("div");
    basicsGrid.className = "lecture-form-grid";
    basicsSection.appendChild(basicsGrid);
    const blockField = document.createElement("label");
    blockField.className = "lecture-form-field";
    blockField.textContent = "Block";
    const blockSelect = document.createElement("select");
    blockSelect.className = "input";
    blockSelect.dataset.field = "blockId";
    blocks.forEach((block) => {
      if (!block || !block.blockId) return;
      const option = document.createElement("option");
      option.value = block.blockId;
      option.textContent = block.title || block.blockId;
      blockSelect.appendChild(option);
    });
    blockSelect.value = defaults.blockId || (blocks[0]?.blockId || "");
    if (mode === "edit") {
      blockSelect.disabled = true;
    }
    blockField.appendChild(blockSelect);
    basicsGrid.appendChild(blockField);
    const nameField = document.createElement("label");
    nameField.className = "lecture-form-field";
    nameField.dataset.span = "full";
    nameField.textContent = "Name";
    const nameInput = document.createElement("input");
    nameInput.type = "text";
    nameInput.required = true;
    nameInput.placeholder = "Lecture name";
    nameInput.className = "input";
    nameInput.dataset.field = "name";
    nameInput.value = defaults.name ?? "";
    nameField.appendChild(nameInput);
    basicsGrid.appendChild(nameField);
    const weekField = document.createElement("label");
    weekField.className = "lecture-form-field";
    weekField.textContent = "Week";
    const weekSelect = document.createElement("select");
    weekSelect.className = "input";
    weekSelect.dataset.field = "week";
    weekField.appendChild(weekSelect);
    basicsGrid.appendChild(weekField);
    const defaultStartAt = Number.isFinite(defaults.startAt) ? defaults.startAt : Date.now();
    const startField = document.createElement("label");
    startField.className = "lecture-form-field";
    startField.textContent = "First pass date";
    const startInput = document.createElement("input");
    startInput.type = "date";
    startInput.required = true;
    startInput.className = "input";
    const startValue = formatDateForInput(defaultStartAt);
    startInput.value = startValue || formatDateForInput(Date.now());
    startField.appendChild(startInput);
    const startHint = document.createElement("span");
    startHint.className = "lecture-field-hint";
    startHint.textContent = "Controls when pass 1 begins.";
    startField.appendChild(startHint);
    basicsGrid.appendChild(startField);
    form.appendChild(basicsSection);
    let dialogWeekValue = normalizeWeekValue(defaults.week);
    const updateDialogWeekOptions = () => {
      const blockId = blockSelect.value;
      populateWeekSelect(weekSelect, blockId, blocks, lectureLists, {
        selectedValue: dialogWeekValue,
        blankLabel: "No week"
      });
      dialogWeekValue = weekSelect.value;
    };
    updateDialogWeekOptions();
    weekSelect.addEventListener("change", () => {
      dialogWeekValue = weekSelect.value;
    });
    const planTemplate = defaults.passPlan && Array.isArray(defaults.passPlan.schedule) ? defaults.passPlan : clonePassPlan();
    const initialSchedule = Array.isArray(planTemplate.schedule) ? planTemplate.schedule : [];
    const defaultFallbackCount = Array.isArray(DEFAULT_PASS_PLAN.schedule) ? DEFAULT_PASS_PLAN.schedule.length : 0;
    const initialCount = clampPassCount2(
      initialSchedule.length > 0 ? initialSchedule.length : defaults.passPlan ? 0 : defaultFallbackCount
    );
    let passConfigs = adjustPassConfigs2(initialSchedule, initialCount, planTemplate);
    const planningSection = document.createElement("section");
    planningSection.className = "lecture-form-section";
    const planningTitle = document.createElement("h3");
    planningTitle.className = "lecture-form-section-title";
    planningTitle.textContent = "Pass planning";
    planningSection.appendChild(planningTitle);
    const passCountField = document.createElement("label");
    passCountField.className = "lecture-pass-count";
    passCountField.textContent = "Planned passes";
    const passCountInput = document.createElement("input");
    passCountInput.type = "number";
    passCountInput.min = "0";
    passCountInput.max = String(MAX_PASS_COUNT2);
    passCountInput.className = "input";
    passCountInput.value = String(passConfigs.length);
    passCountField.appendChild(passCountInput);
    const passHelp = document.createElement("span");
    passHelp.className = "lecture-pass-help";
    passHelp.textContent = "Set how many times you want to revisit this lecture.";
    passCountField.appendChild(passHelp);
    planningSection.appendChild(passCountField);
    const passSummary = document.createElement("div");
    passSummary.className = "lecture-pass-summary-line";
    planningSection.appendChild(passSummary);
    const advanced = document.createElement("details");
    advanced.className = "lecture-pass-advanced";
    if (mode === "edit") {
      advanced.open = true;
    }
    const advancedSummary = document.createElement("summary");
    advancedSummary.textContent = `Advanced pass settings (${passConfigs.length})`;
    advanced.appendChild(advancedSummary);
    const advancedHint = document.createElement("p");
    advancedHint.className = "lecture-pass-advanced-hint";
    advancedHint.textContent = "Tune the pass function and timing for each pass.";
    advanced.appendChild(advancedHint);
    const passList = document.createElement("div");
    passList.className = "lecture-pass-editor";
    advanced.appendChild(passList);
    planningSection.appendChild(advanced);
    form.appendChild(planningSection);
    function updatePassSummary() {
      if (!passConfigs.length) {
        passSummary.textContent = "No passes scheduled for this lecture.";
      } else {
        const planPreview = buildPassPlanPayload2(passConfigs, planTemplate);
        const previewText = formatPassPlan2(planPreview);
        const cleaned = previewText.startsWith("Plan: ") ? previewText.slice(6) : previewText;
        passSummary.textContent = `${passConfigs.length} pass${passConfigs.length === 1 ? "" : "es"} \u2022 ${cleaned}`;
      }
      advancedSummary.textContent = `Advanced pass settings (${passConfigs.length})`;
    }
    function renderPassEditor() {
      passList.innerHTML = "";
      if (!passConfigs.length) {
        const empty = document.createElement("div");
        empty.className = "lecture-pass-empty";
        empty.textContent = "No passes planned. Increase the pass count to build a schedule.";
        passList.appendChild(empty);
        updatePassSummary();
        return;
      }
      passConfigs.forEach((config, index) => {
        const row = document.createElement("div");
        row.className = "lecture-pass-row";
        const label = document.createElement("div");
        label.className = "lecture-pass-label";
        label.textContent = `Pass ${index + 1}`;
        row.appendChild(label);
        const controls = document.createElement("div");
        controls.className = "lecture-pass-controls";
        const actionField = document.createElement("div");
        actionField.className = "lecture-pass-field";
        const actionLabel = document.createElement("span");
        actionLabel.className = "lecture-pass-field-label";
        actionLabel.textContent = "Pass function";
        actionField.appendChild(actionLabel);
        const select = document.createElement("select");
        select.className = "input lecture-pass-action";
        LECTURE_PASS_ACTIONS.forEach((action) => {
          const option = document.createElement("option");
          option.value = action;
          option.textContent = action;
          select.appendChild(option);
        });
        if (config.action && !LECTURE_PASS_ACTIONS.includes(config.action)) {
          const custom = document.createElement("option");
          custom.value = config.action;
          custom.textContent = config.action;
          select.appendChild(custom);
        }
        select.value = config.action || "";
        select.addEventListener("change", (event) => {
          const value = event.target.value;
          passConfigs[index] = { ...passConfigs[index], action: value };
          updatePassSummary();
        });
        actionField.appendChild(select);
        controls.appendChild(actionField);
        const offsetField = document.createElement("div");
        offsetField.className = "lecture-pass-field lecture-pass-offset-field";
        const offsetLabel = document.createElement("span");
        offsetLabel.className = "lecture-pass-field-label";
        offsetLabel.textContent = "Timing";
        offsetField.appendChild(offsetLabel);
        const offsetInputs = document.createElement("div");
        offsetInputs.className = "lecture-pass-offset-inputs";
        const split = splitOffsetMinutes2(config.offsetMinutes ?? 0);
        const offsetInput = document.createElement("input");
        offsetInput.type = "number";
        offsetInput.min = "0";
        offsetInput.step = "1";
        offsetInput.className = "input lecture-pass-offset-value";
        offsetInput.value = String(split.value);
        const unitSelect = document.createElement("select");
        unitSelect.className = "input lecture-pass-offset-unit";
        OFFSET_UNITS2.forEach((option) => {
          const opt = document.createElement("option");
          opt.value = option.id;
          opt.textContent = option.label;
          unitSelect.appendChild(opt);
        });
        unitSelect.value = split.unit;
        offsetInputs.appendChild(offsetInput);
        offsetInputs.appendChild(unitSelect);
        offsetField.appendChild(offsetInputs);
        const preview = document.createElement("span");
        preview.className = "lecture-pass-offset-preview";
        preview.textContent = formatOffset2(config.offsetMinutes ?? 0);
        offsetField.appendChild(preview);
        function commitOffset() {
          const minutes = combineOffsetValueUnit2(offsetInput.value, unitSelect.value);
          passConfigs[index] = {
            ...passConfigs[index],
            offsetMinutes: minutes
          };
          preview.textContent = formatOffset2(passConfigs[index].offsetMinutes ?? 0);
          updatePassSummary();
        }
        offsetInput.addEventListener("change", () => {
          const numeric = Number(offsetInput.value);
          if (!Number.isFinite(numeric) || numeric < 0) {
            offsetInput.value = "0";
          }
          commitOffset();
        });
        offsetInput.addEventListener("blur", () => {
          const numeric = Math.max(0, Math.round(Number(offsetInput.value) || 0));
          offsetInput.value = String(numeric);
          commitOffset();
        });
        unitSelect.addEventListener("change", commitOffset);
        controls.appendChild(offsetField);
        row.appendChild(controls);
        passList.appendChild(row);
      });
      updatePassSummary();
    }
    renderPassEditor();
    passCountInput.addEventListener("change", () => {
      const next = clampPassCount2(passCountInput.value);
      passCountInput.value = String(next);
      passConfigs = adjustPassConfigs2(passConfigs, next, planTemplate);
      renderPassEditor();
    });
    if (mode !== "edit") {
      blockSelect.addEventListener("change", () => {
        dialogWeekValue = "";
        updateDialogWeekOptions();
      });
    }
    const actions = document.createElement("div");
    actions.className = "row lecture-dialog-actions";
    const submitBtn = document.createElement("button");
    submitBtn.type = "submit";
    submitBtn.className = "btn";
    submitBtn.textContent = mode === "edit" ? "Save changes" : "Add lecture";
    actions.appendChild(submitBtn);
    const cancelBtn = document.createElement("button");
    cancelBtn.type = "button";
    cancelBtn.className = "btn secondary";
    cancelBtn.textContent = "Cancel";
    cancelBtn.addEventListener("click", () => {
      document.body.removeChild(overlay);
    });
    actions.appendChild(cancelBtn);
    form.appendChild(actions);
    form.addEventListener("submit", async (event) => {
      event.preventDefault();
      const blockId = blockSelect.value.trim();
      const name = nameInput.value.trim();
      const weekValue = weekSelect.value;
      const week = weekValue === "" ? null : Number(weekValue);
      let startAt = parseDateInputValue(startInput.value);
      if (!Number.isFinite(startAt)) {
        startAt = Date.now();
      }
      if (!blockId || !name || weekValue !== "" && Number.isNaN(week)) {
        return;
      }
      const passPlan = buildPassPlanPayload2(passConfigs, defaults.passPlan);
      const payload = {
        blockId,
        name,
        week,
        passPlan,
        startAt
      };
      if (mode === "edit") {
        payload.id = defaults.id;
      }
      await onSubmit(payload);
      if (document.body.contains(overlay)) {
        document.body.removeChild(overlay);
      }
    });
    card.appendChild(form);
    overlay.appendChild(card);
    overlay.addEventListener("click", (event) => {
      if (event.target === overlay) {
        document.body.removeChild(overlay);
      }
    });
    document.body.appendChild(overlay);
    nameInput.focus();
  }
  function handleEdit(lecture, blocks, lectureLists, redraw) {
    openLectureDialog({
      mode: "edit",
      blocks,
      lectureLists,
      defaults: {
        blockId: lecture.blockId,
        id: lecture.id,
        name: lecture.name || "",
        week: lecture.week ?? "",
        passPlan: lecture.passPlan,
        startAt: lecture.startAt
      },
      onSubmit: async (payload) => {
        await saveLecture({
          blockId: lecture.blockId,
          id: lecture.id,
          name: payload.name,
          week: payload.week,
          passPlan: payload.passPlan,
          startAt: payload.startAt
        });
        await invalidateBlockCatalog();
        await redraw();
      }
    });
  }
  function handleDelete(lecture, redraw) {
    (async () => {
      if (!await confirmModal("Delete lecture?")) return;
      await deleteLecture(lecture.blockId, lecture.id);
      await invalidateBlockCatalog();
      await redraw();
    })();
  }
  function passScopeModal(mode) {
    return new Promise((resolve) => {
      const overlay = document.createElement("div");
      overlay.className = "modal lecture-pass-scope-modal";
      const card = document.createElement("div");
      card.className = "card lecture-pass-scope-card";
      const title = document.createElement("h3");
      title.textContent = mode === "push" ? "Push pass timing" : "Pull pass timing";
      card.appendChild(title);
      const message = document.createElement("p");
      message.textContent = mode === "push" ? "Choose how far the push should ripple." : "Choose how far the pull should ripple.";
      card.appendChild(message);
      const buttons = document.createElement("div");
      buttons.className = "row lecture-pass-scope-buttons";
      const single = document.createElement("button");
      single.className = "btn secondary";
      single.textContent = "Only this pass";
      single.addEventListener("click", () => {
        cleanup("single");
      });
      const cascade = document.createElement("button");
      cascade.className = "btn";
      cascade.textContent = mode === "push" ? "This & following" : "This & preceding";
      cascade.addEventListener("click", () => {
        cleanup(mode === "push" ? "chain-after" : "chain-before");
      });
      const cancel = document.createElement("button");
      cancel.className = "btn secondary";
      cancel.textContent = "Cancel";
      cancel.addEventListener("click", () => {
        cleanup(null);
      });
      buttons.appendChild(single);
      buttons.appendChild(cascade);
      buttons.appendChild(cancel);
      card.appendChild(buttons);
      overlay.appendChild(card);
      function cleanup(result) {
        if (document.body.contains(overlay)) {
          document.body.removeChild(overlay);
        }
        resolve(result);
      }
      overlay.addEventListener("click", (event) => {
        if (event.target === overlay) {
          cleanup(null);
        }
      });
      document.body.appendChild(overlay);
      single.focus();
    });
  }
  function clampOffsetMinutes(value) {
    const numeric = Number(value);
    if (!Number.isFinite(numeric)) return 0;
    return Math.max(0, Math.round(numeric));
  }
  function cloneLecturePasses(lecture) {
    return Array.isArray(lecture?.passes) ? lecture.passes.map((pass) => ({ ...pass })) : [];
  }
  async function togglePassCompletion(lecture, order, completed, redraw) {
    if (!lecture || lecture.blockId == null || lecture.id == null) return;
    const targetOrder = Number(order);
    if (!Number.isFinite(targetOrder)) return;
    const passes = cloneLecturePasses(lecture);
    const index = passes.findIndex((pass) => Number(pass?.order) === targetOrder);
    if (index < 0) return;
    const next = { ...passes[index] };
    if (completed) {
      next.completedAt = Number.isFinite(next.completedAt) ? next.completedAt : Date.now();
    } else {
      next.completedAt = null;
    }
    passes[index] = next;
    const status = deriveLectureStatus(passes, lecture.status);
    const nextDueAt = calculateNextDue(passes);
    await saveLecture({
      blockId: lecture.blockId,
      id: lecture.id,
      passes,
      status,
      nextDueAt
    });
    await invalidateBlockCatalog();
    await redraw();
  }
  function normalizeSchedule(plan) {
    return Array.isArray(plan?.schedule) ? plan.schedule.map((step) => ({ ...step })) : [];
  }
  async function updatePassFunction(lecture, order, action, redraw) {
    if (!lecture || lecture.blockId == null || lecture.id == null) return;
    const plan = clonePassPlan(lecture.passPlan || {});
    const schedule = normalizeSchedule(plan);
    const step = schedule.find((entry) => Number(entry?.order) === Number(order));
    if (!step) return;
    step.action = action;
    const passes = cloneLecturePasses(lecture);
    const pass = passes.find((entry) => Number(entry?.order) === Number(order));
    if (pass) {
      pass.action = action;
    }
    plan.schedule = schedule;
    await saveLecture({
      blockId: lecture.blockId,
      id: lecture.id,
      passPlan: plan,
      passes
    });
    await invalidateBlockCatalog();
    await redraw();
  }
  async function shiftPassTiming(lecture, order, deltaMinutes, scope, redraw) {
    if (!lecture || lecture.blockId == null || lecture.id == null) return;
    if (!Number.isFinite(deltaMinutes) || deltaMinutes === 0) return;
    const plan = clonePassPlan(lecture.passPlan || {});
    const schedule = normalizeSchedule(plan);
    if (!schedule.length) return;
    const targetOrder = Number(order);
    if (!Number.isFinite(targetOrder)) return;
    const affectedOrders = /* @__PURE__ */ new Set();
    schedule.forEach((step) => {
      const currentOrder = Number(step?.order);
      if (!Number.isFinite(currentOrder)) return;
      if (scope === "chain-after" && currentOrder >= targetOrder) {
        affectedOrders.add(currentOrder);
      } else if (scope === "chain-before" && currentOrder <= targetOrder) {
        affectedOrders.add(currentOrder);
      } else if (!scope || scope === "single") {
        if (currentOrder === targetOrder) affectedOrders.add(currentOrder);
      }
    });
    if (!affectedOrders.size) affectedOrders.add(targetOrder);
    schedule.forEach((step) => {
      const currentOrder = Number(step?.order);
      if (!Number.isFinite(currentOrder)) return;
      const offset = clampOffsetMinutes(step.offsetMinutes);
      if (affectedOrders.has(currentOrder)) {
        step.offsetMinutes = Math.max(0, offset + deltaMinutes);
      } else {
        step.offsetMinutes = offset;
      }
    });
    const minuteMs = 60 * 1e3;
    const passMap = /* @__PURE__ */ new Map();
    cloneLecturePasses(lecture).forEach((pass) => {
      const orderKey = Number(pass?.order);
      if (Number.isFinite(orderKey) && !passMap.has(orderKey)) {
        passMap.set(orderKey, { ...pass });
      }
    });
    affectedOrders.forEach((orderKey) => {
      const pass = passMap.get(orderKey);
      if (pass && Number.isFinite(pass.due)) {
        const nextDue = Math.max(0, Math.round(pass.due + deltaMinutes * minuteMs));
        pass.due = nextDue;
        passMap.set(orderKey, pass);
      }
    });
    const decorated = schedule.map((step, index) => ({
      ...step,
      originalOrder: Number(step?.order) || index + 1,
      offsetMinutes: clampOffsetMinutes(step.offsetMinutes)
    }));
    decorated.sort((a, b) => {
      if (a.offsetMinutes !== b.offsetMinutes) return a.offsetMinutes - b.offsetMinutes;
      return a.originalOrder - b.originalOrder;
    });
    const newSchedule = [];
    const reassignedPasses = [];
    decorated.forEach((entry, index) => {
      const newOrder = index + 1;
      const base = { ...entry };
      delete base.originalOrder;
      base.order = newOrder;
      newSchedule.push(base);
      const pass = passMap.get(entry.originalOrder);
      if (pass) {
        pass.order = newOrder;
        reassignedPasses.push(pass);
        passMap.delete(entry.originalOrder);
      }
    });
    passMap.forEach((pass) => {
      reassignedPasses.push(pass);
    });
    reassignedPasses.sort((a, b) => {
      const ao = Number(a?.order) || 0;
      const bo = Number(b?.order) || 0;
      return ao - bo;
    });
    plan.schedule = newSchedule;
    await saveLecture({
      blockId: lecture.blockId,
      id: lecture.id,
      passPlan: plan,
      passes: reassignedPasses
    });
    await invalidateBlockCatalog();
    await redraw();
  }
  function openPassEditDialog({ lecture, passInfo, onUpdateAction, onShift }) {
    const overlay = document.createElement("div");
    overlay.className = "modal lecture-pass-modal";
    const card = document.createElement("div");
    card.className = "card lecture-pass-card";
    const title = document.createElement("h2");
    const passLabel = passInfo?.label || `Pass ${passInfo?.order ?? ""}`;
    title.textContent = `Edit ${passLabel}`;
    card.appendChild(title);
    const meta = document.createElement("div");
    meta.className = "lecture-pass-meta";
    const dateLine = document.createElement("div");
    dateLine.className = "lecture-pass-meta-line";
    dateLine.textContent = Number.isFinite(passInfo?.due) ? formatPassDueTimestamp(passInfo.due) : "No scheduled date";
    meta.appendChild(dateLine);
    const countdownLine = document.createElement("div");
    countdownLine.className = "lecture-pass-meta-line";
    countdownLine.textContent = describePassCountdown(passInfo?.due);
    meta.appendChild(countdownLine);
    card.appendChild(meta);
    const actionField = document.createElement("label");
    actionField.className = "lecture-pass-modal-field";
    actionField.textContent = "Pass function";
    const actionInput = document.createElement("input");
    actionInput.type = "text";
    actionInput.className = "input";
    actionInput.value = passInfo?.action || passInfo?.label || "";
    const actionListId = `pass-action-${lecture.blockId}-${lecture.id}-${passInfo?.order}`.replace(/[^a-zA-Z0-9_-]/g, "-");
    const actionDatalist = document.createElement("datalist");
    actionDatalist.id = actionListId;
    LECTURE_PASS_ACTIONS.forEach((action) => {
      const option = document.createElement("option");
      option.value = action;
      actionDatalist.appendChild(option);
    });
    actionInput.setAttribute("list", actionListId);
    actionField.appendChild(actionInput);
    actionField.appendChild(actionDatalist);
    card.appendChild(actionField);
    const adjustSection = document.createElement("section");
    adjustSection.className = "lecture-pass-adjust";
    const adjustTitle = document.createElement("h3");
    adjustTitle.textContent = "Adjust timing";
    adjustSection.appendChild(adjustTitle);
    const adjustControls = document.createElement("div");
    adjustControls.className = "lecture-pass-adjust-controls";
    const amountInput = document.createElement("input");
    amountInput.type = "number";
    amountInput.className = "input lecture-pass-adjust-value";
    amountInput.min = "0";
    amountInput.step = "1";
    amountInput.value = "1";
    const unitSelect = document.createElement("select");
    unitSelect.className = "input lecture-pass-adjust-unit";
    OFFSET_UNITS2.forEach((option) => {
      const opt = document.createElement("option");
      opt.value = option.id;
      opt.textContent = option.label;
      unitSelect.appendChild(opt);
    });
    unitSelect.value = "days";
    adjustControls.appendChild(amountInput);
    adjustControls.appendChild(unitSelect);
    adjustSection.appendChild(adjustControls);
    const adjustButtons = document.createElement("div");
    adjustButtons.className = "lecture-pass-adjust-buttons";
    const pushBtn = document.createElement("button");
    pushBtn.type = "button";
    pushBtn.className = "btn";
    pushBtn.textContent = "Push later";
    const pullBtn = document.createElement("button");
    pullBtn.type = "button";
    pullBtn.className = "btn secondary";
    pullBtn.textContent = "Pull earlier";
    adjustButtons.appendChild(pushBtn);
    adjustButtons.appendChild(pullBtn);
    adjustSection.appendChild(adjustButtons);
    card.appendChild(adjustSection);
    const feedback = document.createElement("div");
    feedback.className = "lecture-pass-feedback";
    card.appendChild(feedback);
    const actions = document.createElement("div");
    actions.className = "row lecture-pass-actions";
    const saveBtn = document.createElement("button");
    saveBtn.type = "button";
    saveBtn.className = "btn";
    saveBtn.textContent = "Save function";
    const closeBtn = document.createElement("button");
    closeBtn.type = "button";
    closeBtn.className = "btn secondary";
    closeBtn.textContent = "Close";
    actions.appendChild(saveBtn);
    actions.appendChild(closeBtn);
    card.appendChild(actions);
    overlay.appendChild(card);
    function showMessage(message) {
      feedback.textContent = message || "";
      if (message) {
        feedback.classList.add("is-visible");
      } else {
        feedback.classList.remove("is-visible");
      }
    }
    let busy = false;
    function setBusy(value) {
      busy = Boolean(value);
      saveBtn.disabled = busy;
      pushBtn.disabled = busy;
      pullBtn.disabled = busy;
    }
    function close() {
      if (document.body.contains(overlay)) {
        document.body.removeChild(overlay);
      }
    }
    async function handleSave() {
      if (busy) return;
      const value = actionInput.value.trim();
      if (!value) {
        showMessage("Enter a function for this pass.");
        return;
      }
      setBusy(true);
      try {
        await onUpdateAction(value);
        close();
      } catch (err) {
        console.error(err);
        showMessage("Failed to update pass. Please try again.");
        setBusy(false);
      }
    }
    async function handleShift(mode) {
      if (busy) return;
      const amount = Number(amountInput.value);
      if (!Number.isFinite(amount) || amount <= 0) {
        showMessage("Enter how much to adjust the pass by.");
        return;
      }
      const minutes = combineOffsetValueUnit2(amount, unitSelect.value);
      if (!Number.isFinite(minutes) || minutes <= 0) {
        showMessage("Pick a timing greater than zero.");
        return;
      }
      const scope = await passScopeModal(mode);
      if (!scope) return;
      const delta = mode === "push" ? minutes : -minutes;
      setBusy(true);
      try {
        await onShift(delta, scope);
        close();
      } catch (err) {
        console.error(err);
        showMessage("Failed to adjust timing. Please try again.");
        setBusy(false);
      }
    }
    saveBtn.addEventListener("click", handleSave);
    pushBtn.addEventListener("click", () => handleShift("push"));
    pullBtn.addEventListener("click", () => handleShift("pull"));
    closeBtn.addEventListener("click", close);
    overlay.addEventListener("click", (event) => {
      if (event.target === overlay) {
        close();
      }
    });
    document.body.appendChild(overlay);
    actionInput.focus();
  }
  function handlePassEdit(lecture, passInfo, redraw) {
    if (!lecture || !passInfo) return;
    openPassEditDialog({
      lecture,
      passInfo,
      onUpdateAction: (action) => updatePassFunction(lecture, passInfo.order, action, redraw),
      onShift: (delta, scope) => shiftPassTiming(lecture, passInfo.order, delta, scope, redraw)
    });
  }
  async function handlePassToggle(lecture, passInfo, checked, redraw) {
    if (!lecture || !passInfo) return;
    await togglePassCompletion(lecture, passInfo.order, checked, redraw);
  }
  async function renderLectures(root, redraw) {
    const [catalog, settings] = await Promise.all([
      loadBlockCatalog(),
      getSettings()
    ]);
    setPassColorPalette(settings?.plannerDefaults?.passColors);
    const filters = ensureLectureState();
    const blocks = (catalog.blocks || []).map((block) => ({ ...block }));
    const allLectures = collectLectures(catalog);
    const lectureLists = catalog.lectureLists || {};
    const filtered = applyFilters(allLectures, filters);
    const defaultPassPlan = plannerDefaultsToPassPlan(settings?.plannerDefaults);
    const requestRedraw = () => {
      captureLectureViewState();
      return redraw();
    };
    const resolveBlockLabel = (blockInfo) => {
      if (!blockInfo) return "block";
      return blockInfo.title || blockInfo.name || blockInfo.blockId || "block";
    };
    async function handleExportLectureBundle(lecture, blockInfo) {
      if (!lecture || lecture.id == null) {
        alert("Lecture information is incomplete.");
        return;
      }
      const normalizedBlockId = String(lecture.blockId ?? "").trim();
      if (!normalizedBlockId) {
        alert("Assign this lecture to a block before exporting.");
        return;
      }
      try {
        const bundle = await exportLectureTransfer(normalizedBlockId, lecture.id);
        const blockLabel = resolveBlockLabel(blockInfo) || lecture.blockId || "block";
        const lectureLabel = lecture.name || `lecture-${lecture.id}`;
        const filename = `lecture-${slugify(blockLabel)}-${slugify(lectureLabel)}.json`;
        downloadJson(bundle, filename);
      } catch (err) {
        console.error("Failed to export lecture bundle", err);
        alert("Failed to export lecture.");
      }
    }
    async function handleExportWeekBundle(blockInfo, weekValue) {
      const blockId = blockInfo?.blockId;
      if (!blockId) {
        alert("Assign the lectures to a block before exporting a week.");
        return;
      }
      try {
        const bundle = await exportWeekTransfer(blockId, weekValue == null ? null : weekValue);
        const blockLabel = resolveBlockLabel(blockInfo);
        const weekSlug = weekValue == null ? "no-week" : `week-${weekValue}`;
        const filename = `week-${slugify(blockLabel)}-${slugify(weekSlug)}.json`;
        downloadJson(bundle, filename);
      } catch (err) {
        console.error("Failed to export week bundle", err);
        alert("Failed to export week.");
      }
    }
    async function handleExportBlockBundle(blockInfo) {
      const blockId = blockInfo?.blockId;
      if (!blockId) {
        alert("Select a block to export.");
        return;
      }
      try {
        const bundle = await exportBlockTransfer(blockId);
        const filename = `block-${slugify(resolveBlockLabel(blockInfo))}.json`;
        downloadJson(bundle, filename);
      } catch (err) {
        console.error("Failed to export block bundle", err);
        alert("Failed to export block.");
      }
    }
    async function handleImportBundle(payload) {
      try {
        const conflicts = detectImportConflicts(payload, catalog);
        let strategy = "merge";
        if (conflicts.hasConflicts) {
          const choice = await promptImportStrategy(conflicts);
          if (!choice) {
            return;
          }
          strategy = choice;
        }
        await importLectureTransfer(payload, { strategy });
        await invalidateBlockCatalog();
        await requestRedraw();
        alert("Import complete.");
      } catch (err) {
        console.error("Failed to import lecture bundle", err);
        alert("Import failed.");
      }
    }
    root.innerHTML = "";
    const layout = document.createElement("div");
    layout.className = "lectures-view";
    root.appendChild(layout);
    const toolbar = buildToolbar(
      blocks,
      allLectures,
      lectureLists,
      requestRedraw,
      defaultPassPlan,
      handleImportBundle
    );
    layout.appendChild(toolbar);
    const table = renderLectureTable(
      blocks,
      filtered,
      filters,
      (lecture) => handleEdit(lecture, blocks, lectureLists, requestRedraw),
      (lecture) => handleDelete(lecture, requestRedraw),
      (lecture, pass) => handlePassEdit(lecture, pass, requestRedraw),
      (lecture, pass, checked) => handlePassToggle(lecture, pass, checked, requestRedraw),
      (lecture, blockInfo) => handleExportLectureBundle(lecture, blockInfo || blocks.find((block) => block.blockId === lecture.blockId)),
      (blockInfo, weekValue) => handleExportWeekBundle(blockInfo, weekValue),
      (blockInfo) => handleExportBlockBundle(blockInfo)
    );
    layout.appendChild(table);
    const scroller = findLectureScrollContainer(root);
    requestAnimationFrame(() => {
      const target = Number(filters?.scrollTop);
      if (Number.isFinite(target) && target > 0) {
        if (scroller && typeof scroller.scrollTo === "function") {
          scroller.scrollTo({ top: target, left: 0, behavior: "auto" });
        } else if (scroller && "scrollTop" in scroller) {
          scroller.scrollTop = target;
        } else {
          window.scrollTo({ top: target, left: 0, behavior: "auto" });
        }
      }
    });
  }

  // js/ui/components/flashcards.js
  var KIND_ACCENTS = {
    disease: "var(--pink)",
    drug: "var(--blue)",
    concept: "var(--green)"
  };
  var RATING_LABELS = {
    again: "Again",
    hard: "Hard",
    good: "Good",
    easy: "Easy"
  };
  var RATING_CLASS = {
    again: "danger",
    hard: "secondary",
    good: "",
    easy: ""
  };
  function getFlashcardAccent(item) {
    if (item?.color) return item.color;
    if (item?.kind && KIND_ACCENTS[item.kind]) return KIND_ACCENTS[item.kind];
    return "var(--accent)";
  }
  function queueStatusLabel(snapshot) {
    if (!snapshot || snapshot.retired) return "Already in review queue";
    const rating = snapshot.lastRating;
    if (rating && RATING_LABELS[rating]) {
      return `In review (${RATING_LABELS[rating]})`;
    }
    return "Already in review queue";
  }
  function ratingKey(item, sectionKey) {
    const id = item?.id || "item";
    return `${id}::${sectionKey}`;
  }
  function sessionEntryAt(session, idx) {
    const pool = Array.isArray(session.pool) ? session.pool : [];
    return pool[idx] || null;
  }
  function normalizeFlashSession(session, fallbackPool, defaultMode = "study") {
    const source = session && typeof session === "object" ? session : {};
    const next = { ...source };
    let changed = !session || typeof session !== "object";
    const fallback = Array.isArray(fallbackPool) ? fallbackPool : [];
    const pool = Array.isArray(source.pool) && source.pool.length ? source.pool : fallback;
    if (source.pool !== pool) {
      next.pool = pool;
      changed = true;
    }
    const ratings = source.ratings && typeof source.ratings === "object" ? source.ratings : {};
    if (source.ratings !== ratings) {
      next.ratings = ratings;
      changed = true;
    }
    let idx = typeof source.idx === "number" && Number.isFinite(source.idx) ? Math.floor(source.idx) : 0;
    if (idx < 0) idx = 0;
    const maxIdx = pool.length ? pool.length - 1 : 0;
    if (idx > maxIdx) idx = maxIdx;
    if (idx !== source.idx) {
      next.idx = idx;
      changed = true;
    }
    const mode = source.mode === "review" ? "review" : defaultMode;
    if (source.mode !== mode) {
      next.mode = mode;
      changed = true;
    }
    return changed ? next : session;
  }
  function renderFlashcards(root, redraw) {
    const fallbackPool = Array.isArray(state.cohort) ? state.cohort : [];
    let active = state.flashSession;
    if (active) {
      const normalized2 = normalizeFlashSession(active, fallbackPool, active.mode === "review" ? "review" : "study");
      if (normalized2 !== active) {
        setFlashSession(normalized2);
        active = normalized2;
      }
    } else {
      active = normalizeFlashSession({ idx: 0, pool: fallbackPool, ratings: {}, mode: "study" }, fallbackPool, "study");
    }
    active.ratings = active.ratings || {};
    const items = Array.isArray(active.pool) && active.pool.length ? active.pool : fallbackPool;
    const resolvePool = () => Array.isArray(active.pool) && active.pool.length ? active.pool : items;
    const commitSession = (patch = {}) => {
      const pool = resolvePool();
      const next2 = { ...active, pool, ...patch };
      if (patch.ratings) {
        next2.ratings = { ...patch.ratings };
      } else {
        next2.ratings = { ...active.ratings };
      }
      active = next2;
      setFlashSession(next2);
    };
    const isReview = active.mode === "review";
    root.innerHTML = "";
    if (!items.length) {
      const msg = document.createElement("div");
      msg.textContent = "No cards selected. Adjust the filters above to add cards.";
      root.appendChild(msg);
      return;
    }
    if (active.idx >= items.length) {
      setFlashSession(null);
      setStudySelectedMode("Flashcards");
      setSubtab("Study", isReview ? "Review" : "Builder");
      if (isReview) {
        removeStudySession("review").catch((err) => console.warn("Failed to clear review session", err));
      } else {
        removeStudySession("flashcards").catch((err) => console.warn("Failed to clear flashcard session", err));
      }
      redraw();
      return;
    }
    const entry = sessionEntryAt(active, active.idx);
    const item = entry && entry.item ? entry.item : entry;
    if (!item) {
      setFlashSession(null);
      redraw();
      return;
    }
    const allowedSections = entry && entry.sections ? entry.sections : null;
    const sections = sectionsForItem(item, allowedSections);
    const card = document.createElement("section");
    card.className = "card flashcard";
    card.tabIndex = 0;
    const header = document.createElement("div");
    header.className = "flashcard-header";
    const title = document.createElement("h2");
    title.className = "flashcard-title";
    title.textContent = item.name || item.concept || "";
    header.appendChild(title);
    const editBtn = document.createElement("button");
    editBtn.type = "button";
    editBtn.className = "icon-btn flashcard-edit-btn";
    editBtn.innerHTML = "\u270F\uFE0F";
    editBtn.title = "Edit card";
    editBtn.setAttribute("aria-label", "Edit card");
    editBtn.addEventListener("click", (event) => {
      event.stopPropagation();
      const onSave = typeof redraw === "function" ? () => redraw() : void 0;
      openEditor(item.kind, onSave, item);
    });
    header.appendChild(editBtn);
    card.appendChild(header);
    const durationsPromise = getReviewDurations().catch(() => ({ ...DEFAULT_REVIEW_STEPS }));
    const sectionBlocks = sections.length ? sections : [];
    const sectionRequirements = /* @__PURE__ */ new Map();
    if (!sectionBlocks.length) {
      const empty = document.createElement("div");
      empty.className = "flash-empty";
      empty.textContent = "No content available for this card.";
      card.appendChild(empty);
    }
    sectionBlocks.forEach(({ key, label, content, extra }) => {
      const ratingId = ratingKey(item, key);
      const previousRating = active.ratings[ratingId] || null;
      const snapshot = getSectionStateSnapshot(item, key);
      const lockedByQueue = !isReview && Boolean(snapshot && snapshot.last && !snapshot.retired);
      const alreadyQueued = !isReview && Boolean(snapshot && snapshot.last && !snapshot.retired);
      const requiresRating = isReview || !alreadyQueued;
      sectionRequirements.set(key, requiresRating);
      const sec = document.createElement("div");
      sec.className = "flash-section";
      if (extra) sec.classList.add("flash-section-extra");
      sec.setAttribute("role", "button");
      sec.tabIndex = 0;
      const head = document.createElement("div");
      head.className = "flash-heading";
      head.textContent = label;
      const body = document.createElement("div");
      body.className = "flash-body";
      renderRichText(body, content || "", { clozeMode: "interactive" });
      const ratingRow = document.createElement("div");
      ratingRow.className = "flash-rating";
      const ratingButtons = document.createElement("div");
      ratingButtons.className = "flash-rating-options";
      const status = document.createElement("span");
      status.className = "flash-rating-status";
      let ratingLocked = lockedByQueue;
      const selectRating = (value) => {
        active.ratings[ratingId] = value;
        Array.from(ratingButtons.querySelectorAll("button")).forEach((btn) => {
          const btnValue = btn.dataset.value;
          const isSelected = btnValue === value;
          btn.classList.toggle("is-selected", isSelected);
          if (isSelected) {
            ratingButtons.dataset.selected = value;
          } else if (ratingButtons.dataset.selected === btnValue) {
            delete ratingButtons.dataset.selected;
          }
          btn.setAttribute("aria-pressed", isSelected ? "true" : "false");
        });
        status.classList.remove("is-error");
        commitSession({ ratings: { ...active.ratings } });
      };
      const handleRating = async (value) => {
        if (ratingLocked) return;
        const durations = await durationsPromise;
        setToggleState(sec, true, "revealed");
        ratingRow.classList.add("is-saving");
        status.textContent = "Saving\u2026";
        status.classList.remove("is-error");
        try {
          rateSection(item, key, value, durations, Date.now());
          await upsertItem(item);
          selectRating(value);
          status.textContent = "Saved";
          status.classList.remove("is-error");
        } catch (err) {
          console.error("Failed to record rating", err);
          status.textContent = "Save failed";
          status.classList.add("is-error");
        } finally {
          ratingRow.classList.remove("is-saving");
        }
      };
      REVIEW_RATINGS.forEach((value) => {
        const btn = document.createElement("button");
        btn.type = "button";
        btn.dataset.value = value;
        btn.dataset.rating = value;
        btn.className = "flash-rating-btn";
        const variant = RATING_CLASS[value];
        if (variant) btn.classList.add(variant);
        btn.textContent = RATING_LABELS[value];
        btn.setAttribute("aria-pressed", "false");
        btn.addEventListener("click", (event) => {
          event.stopPropagation();
          handleRating(value);
        });
        btn.addEventListener("keydown", (event) => {
          event.stopPropagation();
          if (event.key === "Enter" || event.key === " ") {
            event.preventDefault();
            handleRating(value);
          }
        });
        ratingButtons.appendChild(btn);
      });
      const unlockRating = () => {
        if (!ratingLocked) return;
        ratingLocked = false;
        ratingRow.classList.remove("is-locked");
        ratingButtons.hidden = false;
        status.classList.remove("flash-rating-status-action");
        status.removeAttribute("role");
        status.removeAttribute("tabindex");
        status.textContent = previousRating ? "Update rating" : "Select a rating (optional)";
      };
      if (lockedByQueue) {
        ratingLocked = true;
        ratingRow.classList.add("is-locked");
        ratingButtons.hidden = true;
        const label2 = queueStatusLabel(snapshot);
        status.textContent = `${label2} \u2014 click to adjust`;
        status.classList.add("flash-rating-status-action");
        status.setAttribute("role", "button");
        status.setAttribute("tabindex", "0");
        status.setAttribute("aria-label", "Update review rating");
        status.addEventListener("click", (event) => {
          event.stopPropagation();
          unlockRating();
        });
        status.addEventListener("keydown", (event) => {
          if (event.key === "Enter" || event.key === " ") {
            event.preventDefault();
            unlockRating();
          }
        });
      } else if (previousRating) {
        status.textContent = "Saved";
      } else {
        status.textContent = "Select a rating (optional)";
      }
      if (previousRating) {
        selectRating(previousRating);
      }
      ratingRow.appendChild(ratingButtons);
      ratingRow.appendChild(status);
      setToggleState(sec, false, "revealed");
      const toggleReveal = () => {
        if (sec.classList.contains("flash-section-disabled")) return;
        if (sec.contains(document.activeElement) && document.activeElement?.tagName === "BUTTON") return;
        const next2 = sec.dataset.active !== "true";
        setToggleState(sec, next2, "revealed");
      };
      sec.addEventListener("click", (event) => {
        if (event.target instanceof HTMLElement) {
          if (event.target.closest(".flash-rating")) return;
          if (event.target.closest("[data-cloze]")) return;
        }
        toggleReveal();
      });
      sec.addEventListener("keydown", (e) => {
        if (e.target instanceof HTMLElement && e.target.closest(".flash-rating")) return;
        if (e.key === "Enter" || e.key === " ") {
          e.preventDefault();
          toggleReveal();
        }
      });
      sec.appendChild(head);
      sec.appendChild(body);
      sec.appendChild(ratingRow);
      card.appendChild(sec);
    });
    const controls = document.createElement("div");
    controls.className = "row flash-controls";
    const prev = document.createElement("button");
    prev.className = "btn";
    prev.textContent = "Prev";
    prev.disabled = active.idx === 0;
    prev.addEventListener("click", () => {
      if (active.idx > 0) {
        commitSession({ idx: active.idx - 1 });
        redraw();
      }
    });
    controls.appendChild(prev);
    const next = document.createElement("button");
    next.className = "btn";
    const isLast = active.idx >= items.length - 1;
    next.textContent = isLast ? isReview ? "Finish review" : "Finish" : "Next";
    next.addEventListener("click", () => {
      const pool = Array.isArray(active.pool) ? active.pool : items;
      const idx = active.idx + 1;
      if (idx >= items.length) {
        setFlashSession(null);
      } else {
        commitSession({ idx });
      }
      redraw();
    });
    controls.appendChild(next);
    if (!isReview) {
      const saveExit = document.createElement("button");
      saveExit.className = "btn secondary";
      saveExit.textContent = "Save & close";
      saveExit.addEventListener("click", async () => {
        const original = saveExit.textContent;
        saveExit.disabled = true;
        saveExit.textContent = "Saving\u2026";
        try {
          const pool = resolvePool();
          await persistStudySession("flashcards", {
            session: { ...active, idx: active.idx, pool, ratings: { ...active.ratings || {} } },
            cohort: pool
          });
          setFlashSession(null);
          setStudySelectedMode("Flashcards");
          setSubtab("Study", "Builder");
          redraw();
        } catch (err) {
          console.error("Failed to save flashcard progress", err);
          saveExit.textContent = "Save failed";
          setTimeout(() => {
            saveExit.textContent = original;
          }, 2e3);
        } finally {
          saveExit.disabled = false;
        }
      });
      controls.appendChild(saveExit);
    } else {
      const saveExit = document.createElement("button");
      saveExit.className = "btn secondary";
      saveExit.textContent = "Pause & save";
      saveExit.addEventListener("click", async () => {
        const original = saveExit.textContent;
        saveExit.disabled = true;
        saveExit.textContent = "Saving\u2026";
        try {
          const pool = resolvePool();
          await persistStudySession("review", {
            session: { ...active, idx: active.idx, pool, ratings: { ...active.ratings || {} } },
            cohort: state.cohort,
            metadata: active.metadata || { label: "Review session" }
          });
          setFlashSession(null);
          setSubtab("Study", "Review");
          redraw();
        } catch (err) {
          console.error("Failed to save review session", err);
          saveExit.textContent = "Save failed";
          setTimeout(() => {
            saveExit.textContent = original;
          }, 2e3);
        } finally {
          saveExit.disabled = false;
        }
      });
      controls.appendChild(saveExit);
    }
    card.appendChild(controls);
    root.appendChild(card);
    card.focus();
    card.addEventListener("keydown", (e) => {
      if (e.key === "ArrowRight") {
        next.click();
      } else if (e.key === "ArrowLeft") {
        prev.click();
      }
    });
    const accent = getFlashcardAccent(item);
    card.style.setProperty("--flash-accent", accent);
    card.style.setProperty("--flash-accent-soft", `color-mix(in srgb, ${accent} 16%, transparent)`);
    card.style.setProperty("--flash-accent-strong", `color-mix(in srgb, ${accent} 32%, rgba(15, 23, 42, 0.08))`);
    card.style.setProperty("--flash-accent-border", `color-mix(in srgb, ${accent} 42%, transparent)`);
  }

  // js/ui/components/review.js
  var REVIEW_SCOPES = ["all", "blocks", "lectures"];
  var activeScope = "all";
  var blockTitleCache = null;
  function ensureBlockTitleMap(blocks) {
    if (blockTitleCache) return blockTitleCache;
    const map = /* @__PURE__ */ new Map();
    blocks.forEach((block) => {
      if (!block || !block.blockId) return;
      map.set(block.blockId, block.title || block.blockId);
    });
    blockTitleCache = map;
    return map;
  }
  function titleOf2(item) {
    return item?.name || item?.concept || "Untitled";
  }
  function formatOverdue2(due, now) {
    const diffMs = Math.max(0, now - due);
    if (diffMs < 60 * 1e3) return "due now";
    const minutes = Math.round(diffMs / (60 * 1e3));
    if (minutes < 60) return `${minutes} min overdue`;
    const hours = Math.round(minutes / 60);
    if (hours < 24) return `${hours} hr overdue`;
    const days = Math.round(hours / 24);
    return `${days} day${days === 1 ? "" : "s"} overdue`;
  }
  function formatTimeUntil2(due, now) {
    const diffMs = Math.max(0, due - now);
    if (diffMs < 60 * 1e3) return "due in under a minute";
    const minutes = Math.round(diffMs / (60 * 1e3));
    if (minutes < 60) return `due in ${minutes} min`;
    const hours = Math.round(minutes / 60);
    if (hours < 24) return `due in ${hours} hr`;
    const days = Math.round(hours / 24);
    return `due in ${days} day${days === 1 ? "" : "s"}`;
  }
  function groupByBlock(entries, blockTitles) {
    const groups = /* @__PURE__ */ new Map();
    entries.forEach((entry) => {
      const blocks = Array.isArray(entry.item.blocks) && entry.item.blocks.length ? entry.item.blocks : ["__unassigned"];
      blocks.forEach((blockId) => {
        const group = groups.get(blockId) || { id: blockId, entries: [] };
        group.entries.push(entry);
        groups.set(blockId, group);
      });
    });
    return Array.from(groups.values()).map((group) => ({
      id: group.id,
      title: group.id === "__unassigned" ? "Unassigned" : blockTitles.get(group.id) || group.id,
      entries: group.entries
    })).sort((a, b) => b.entries.length - a.entries.length);
  }
  function groupByLecture(entries, blockTitles) {
    const groups = /* @__PURE__ */ new Map();
    entries.forEach((entry) => {
      const lectures = Array.isArray(entry.item.lectures) && entry.item.lectures.length ? entry.item.lectures : [{ blockId: "__unassigned", id: "__none", name: "Unassigned lecture" }];
      lectures.forEach((lec) => {
        const key = `${lec.blockId || "__unassigned"}::${lec.id}`;
        const blockTitle = blockTitles.get(lec.blockId) || lec.blockId || "Unassigned";
        const title = lec.name ? `${blockTitle} \u2013 ${lec.name}` : `${blockTitle} \u2013 Lecture ${lec.id}`;
        const group = groups.get(key) || { id: key, title, entries: [] };
        group.entries.push(entry);
        groups.set(key, group);
      });
    });
    return Array.from(groups.values()).sort((a, b) => b.entries.length - a.entries.length);
  }
  function buildSessionPayload(entries) {
    return entries.map((entry) => ({ item: entry.item, sections: [entry.sectionKey] }));
  }
  function renderEmptyState2(container) {
    const empty = document.createElement("div");
    empty.className = "review-empty";
    empty.textContent = "No cards are due right now. Nice work!";
    container.appendChild(empty);
  }
  function renderAllView(container, dueEntries, upcomingEntries, now, start) {
    const actionRow = document.createElement("div");
    actionRow.className = "review-actions";
    const startBtn = document.createElement("button");
    startBtn.className = "btn";
    startBtn.textContent = `Start review (${dueEntries.length})`;
    startBtn.disabled = dueEntries.length === 0;
    startBtn.addEventListener("click", () => {
      if (!dueEntries.length) return;
      start(buildSessionPayload(dueEntries), { scope: "all", label: "All due cards" });
    });
    actionRow.appendChild(startBtn);
    if (upcomingEntries.length) {
      const upcomingBtn = document.createElement("button");
      upcomingBtn.className = "btn secondary";
      upcomingBtn.textContent = `Review upcoming (${upcomingEntries.length})`;
      upcomingBtn.addEventListener("click", () => {
        if (!upcomingEntries.length) return;
        start(buildSessionPayload(upcomingEntries), { scope: "upcoming", label: "Upcoming cards" });
      });
      actionRow.appendChild(upcomingBtn);
    }
    container.appendChild(actionRow);
    if (!dueEntries.length && !upcomingEntries.length) {
      renderEmptyState2(container);
      return;
    }
    if (!dueEntries.length) {
      const info = document.createElement("div");
      info.className = "review-empty";
      info.textContent = "No cards are due right now. Upcoming cards are listed below.";
      container.appendChild(info);
    } else {
      const list = document.createElement("ul");
      list.className = "review-entry-list";
      dueEntries.forEach((entry) => {
        const item = document.createElement("li");
        item.className = "review-entry";
        item.classList.add("is-clickable");
        item.tabIndex = 0;
        item.setAttribute("role", "button");
        item.setAttribute("aria-label", `Review ${titleOf2(entry.item)} immediately`);
        const title = document.createElement("div");
        title.className = "review-entry-title";
        title.textContent = titleOf2(entry.item);
        const meta = document.createElement("div");
        meta.className = "review-entry-meta";
        meta.textContent = `${getSectionLabel(entry.item, entry.sectionKey)} \u2022 ${formatOverdue2(entry.due, now)}`;
        item.appendChild(title);
        item.appendChild(meta);
        const launch = () => {
          start(buildSessionPayload([entry]), { scope: "single", label: `Focused review \u2013 ${titleOf2(entry.item)}` });
        };
        item.addEventListener("click", launch);
        item.addEventListener("keydown", (event) => {
          if (event.key === "Enter" || event.key === " ") {
            event.preventDefault();
            launch();
          }
        });
        list.appendChild(item);
      });
      container.appendChild(list);
    }
    if (upcomingEntries.length) {
      const upcomingSection = document.createElement("div");
      upcomingSection.className = "review-upcoming-section";
      const heading = document.createElement("div");
      heading.className = "review-upcoming-title";
      heading.textContent = "Upcoming cards";
      upcomingSection.appendChild(heading);
      const note = document.createElement("div");
      note.className = "review-upcoming-note";
      note.textContent = `Next ${upcomingEntries.length} card${upcomingEntries.length === 1 ? "" : "s"} in the queue`;
      upcomingSection.appendChild(note);
      const list = document.createElement("ul");
      list.className = "review-entry-list";
      upcomingEntries.forEach((entry) => {
        const item = document.createElement("li");
        item.className = "review-entry is-upcoming";
        item.classList.add("is-clickable");
        item.tabIndex = 0;
        item.setAttribute("role", "button");
        item.setAttribute("aria-label", `Review ${titleOf2(entry.item)} early`);
        const title = document.createElement("div");
        title.className = "review-entry-title";
        title.textContent = titleOf2(entry.item);
        const meta = document.createElement("div");
        meta.className = "review-entry-meta";
        meta.textContent = `${getSectionLabel(entry.item, entry.sectionKey)} \u2022 ${formatTimeUntil2(entry.due, now)}`;
        item.appendChild(title);
        item.appendChild(meta);
        const launch = () => {
          start(buildSessionPayload([entry]), { scope: "single", label: `Focused review \u2013 ${titleOf2(entry.item)}` });
        };
        item.addEventListener("click", launch);
        item.addEventListener("keydown", (event) => {
          if (event.key === "Enter" || event.key === " ") {
            event.preventDefault();
            launch();
          }
        });
        list.appendChild(item);
      });
      upcomingSection.appendChild(list);
      container.appendChild(upcomingSection);
    }
  }
  function renderGroupView(container, groups, label, start, metaBuilder = null) {
    if (!groups.length) {
      renderEmptyState2(container);
      return;
    }
    const list = document.createElement("div");
    list.className = "review-group-list";
    groups.forEach((group) => {
      const card = document.createElement("div");
      card.className = "review-group-card";
      const heading = document.createElement("div");
      heading.className = "review-group-heading";
      const title = document.createElement("div");
      title.className = "review-group-title";
      title.textContent = group.title;
      const count = document.createElement("span");
      count.className = "review-group-count";
      count.textContent = `${group.entries.length} card${group.entries.length === 1 ? "" : "s"}`;
      heading.appendChild(title);
      heading.appendChild(count);
      card.appendChild(heading);
      const actions = document.createElement("div");
      actions.className = "review-group-actions";
      const startBtn = document.createElement("button");
      startBtn.className = "btn";
      startBtn.textContent = `Start ${label}`;
      startBtn.addEventListener("click", () => {
        const metadata = typeof metaBuilder === "function" ? metaBuilder(group) : { label };
        start(buildSessionPayload(group.entries), metadata);
      });
      actions.appendChild(startBtn);
      card.appendChild(actions);
      list.appendChild(card);
    });
    container.appendChild(list);
  }
  async function renderReview(root, redraw) {
    root.innerHTML = "";
    await hydrateStudySessions().catch((err) => console.error("Failed to load saved sessions", err));
    const cohort = await loadReviewSourceItems();
    if (!Array.isArray(cohort) || !cohort.length) {
      const empty = document.createElement("div");
      empty.className = "review-empty";
      empty.textContent = "Add study cards to start building a review queue.";
      root.appendChild(empty);
      return;
    }
    setCohort(cohort);
    const now = Date.now();
    const dueEntries = collectDueSections(cohort, { now });
    const upcomingEntries = collectUpcomingSections(cohort, { now, limit: 50 });
    const { blocks } = await loadBlockCatalog();
    const blockTitles = ensureBlockTitleMap(blocks);
    const savedEntry = getStudySessionEntry("review");
    const wrapper = document.createElement("section");
    wrapper.className = "card review-panel";
    const backRow = document.createElement("div");
    backRow.className = "review-back-row";
    const backBtn = document.createElement("button");
    backBtn.type = "button";
    backBtn.className = "btn secondary";
    backBtn.textContent = "Back to study";
    backBtn.addEventListener("click", () => {
      setSubtab("Study", "Builder");
      redraw();
    });
    backRow.appendChild(backBtn);
    wrapper.appendChild(backRow);
    const heading = document.createElement("h2");
    heading.textContent = "Review queue";
    wrapper.appendChild(heading);
    const summary = document.createElement("div");
    summary.className = "review-summary";
    summary.textContent = `Cards due: ${dueEntries.length} \u2022 Upcoming: ${upcomingEntries.length}`;
    wrapper.appendChild(summary);
    if (savedEntry?.session) {
      const resumeRow = document.createElement("div");
      resumeRow.className = "review-resume-row";
      const resumeLabel = document.createElement("div");
      resumeLabel.className = "review-resume-label";
      resumeLabel.textContent = savedEntry.metadata?.label || "Saved review session available";
      resumeRow.appendChild(resumeLabel);
      const resumeBtn = document.createElement("button");
      resumeBtn.type = "button";
      resumeBtn.className = "btn";
      resumeBtn.textContent = "Resume";
      resumeBtn.addEventListener("click", async () => {
        await removeStudySession("review").catch((err) => console.warn("Failed to clear saved review entry", err));
        const restored = Array.isArray(savedEntry.cohort) ? savedEntry.cohort : null;
        if (restored) {
          setCohort(restored);
        }
        setFlashSession(savedEntry.session);
        redraw();
      });
      resumeRow.appendChild(resumeBtn);
      wrapper.appendChild(resumeRow);
    }
    const tabs2 = document.createElement("div");
    tabs2.className = "review-tabs";
    REVIEW_SCOPES.forEach((scope) => {
      const btn = document.createElement("button");
      btn.type = "button";
      btn.className = "tab";
      const label = scope === "all" ? "All" : scope === "blocks" ? "By block" : "By lecture";
      if (activeScope === scope) btn.classList.add("active");
      btn.textContent = label;
      btn.addEventListener("click", () => {
        if (activeScope === scope) return;
        activeScope = scope;
        renderReview(root, redraw);
      });
      tabs2.appendChild(btn);
    });
    wrapper.appendChild(tabs2);
    const body = document.createElement("div");
    body.className = "review-body";
    wrapper.appendChild(body);
    const startSession = async (pool, metadata = {}) => {
      if (!pool.length) return;
      await removeStudySession("review").catch((err) => console.warn("Failed to discard existing review save", err));
      setFlashSession({ idx: 0, pool, ratings: {}, mode: "review", metadata });
      redraw();
    };
    if (activeScope === "all") {
      renderAllView(body, dueEntries, upcomingEntries, now, startSession);
    } else if (activeScope === "blocks") {
      const groups = groupByBlock(dueEntries, blockTitles);
      renderGroupView(body, groups, "block review", startSession, (group) => ({
        scope: "block",
        label: `Block \u2013 ${group.title}`,
        blockId: group.id
      }));
    } else {
      const groups = groupByLecture(dueEntries, blockTitles);
      renderGroupView(body, groups, "lecture review", startSession, (group) => ({
        scope: "lecture",
        label: `Lecture \u2013 ${group.title}`,
        lectureId: group.id
      }));
    }
    root.appendChild(wrapper);
  }

  // js/ui/components/quiz.js
  var RATING_LABELS2 = {
    again: "Again",
    hard: "Hard",
    good: "Good",
    easy: "Easy"
  };
  var RATING_CLASS2 = {
    again: "danger",
    hard: "secondary",
    good: "",
    easy: ""
  };
  function titleOf3(item) {
    return item?.name || item?.concept || "";
  }
  function ratingKey2(item, sectionKey) {
    const id = item?.id || "item";
    return `${id}::${sectionKey}`;
  }
  function ensureSessionDefaults(session) {
    if (!session) return;
    if (!Array.isArray(session.pool)) session.pool = [];
    session.dict = session.pool.map((it) => ({
      id: it.id,
      title: titleOf3(it),
      lower: titleOf3(it).toLowerCase()
    }));
    if (!session.answers || typeof session.answers !== "object") {
      session.answers = {};
    }
    if (!session.ratings || typeof session.ratings !== "object") {
      session.ratings = {};
    }
    if (typeof session.idx !== "number" || Number.isNaN(session.idx)) {
      session.idx = 0;
    }
    session.idx = Math.max(0, Math.min(Math.floor(session.idx), session.pool.length ? session.pool.length - 1 : 0));
    if (typeof session.score !== "number" || Number.isNaN(session.score)) {
      session.score = computeScore(session.answers);
    }
  }
  function computeScore(answers) {
    if (!answers) return 0;
    return Object.values(answers).filter((entry) => entry && entry.isCorrect).length;
  }
  function renderCompletion(root, session, redraw) {
    removeStudySession("quiz").catch((err) => console.warn("Failed to clear quiz session", err));
    const wrap = document.createElement("section");
    wrap.className = "card quiz-summary";
    const heading = document.createElement("h2");
    heading.textContent = "Quiz complete";
    wrap.appendChild(heading);
    const score = document.createElement("p");
    const total = Array.isArray(session.pool) ? session.pool.length : 0;
    score.textContent = `Score ${session.score}/${total}`;
    wrap.appendChild(score);
    const btn = document.createElement("button");
    btn.className = "btn";
    btn.textContent = "Back to builder";
    btn.addEventListener("click", () => {
      setQuizSession(null);
      setStudySelectedMode("Quiz");
      setSubtab("Study", "Builder");
      redraw();
    });
    wrap.appendChild(btn);
    root.appendChild(wrap);
  }
  function renderQuiz(root, redraw) {
    const session = state.quizSession;
    if (!session) {
      if (root?.dataset) delete root.dataset.questionIdx;
      return;
    }
    ensureSessionDefaults(session);
    const hasWindow = typeof window !== "undefined";
    const docScroller = typeof document !== "undefined" ? document.scrollingElement || document.documentElement : null;
    const previousIdxRaw = root?.dataset?.questionIdx;
    const previousIdx = previousIdxRaw !== void 0 && previousIdxRaw !== "" && !Number.isNaN(Number(previousIdxRaw)) ? Number(previousIdxRaw) : null;
    const prevScrollY = hasWindow ? window.scrollY : docScroller ? docScroller.scrollTop : 0;
    const pool = Array.isArray(session.pool) ? session.pool : [];
    root.innerHTML = "";
    if (root?.dataset) delete root.dataset.questionIdx;
    if (!pool.length) {
      const empty = document.createElement("div");
      empty.textContent = "No questions available. Select study cards to begin.";
      root.appendChild(empty);
      return;
    }
    if (session.idx >= pool.length) {
      renderCompletion(root, session, redraw);
      return;
    }
    const item = pool[session.idx];
    if (!item) {
      renderCompletion(root, session, redraw);
      return;
    }
    const answer = session.answers[session.idx] || { value: "", isCorrect: false, checked: false, revealed: false };
    const hasResult = Boolean(answer.checked);
    const wasCorrect = hasResult && answer.isCorrect;
    const wasRevealed = hasResult && answer.revealed;
    const isSolved = wasCorrect || wasRevealed;
    const card = document.createElement("section");
    card.className = "card quiz-card";
    root.appendChild(card);
    const header = document.createElement("div");
    header.className = "quiz-header";
    const headerInfo = document.createElement("div");
    headerInfo.className = "quiz-header-info";
    const progress = document.createElement("div");
    progress.className = "quiz-progress";
    progress.textContent = `Question ${session.idx + 1} of ${pool.length}`;
    headerInfo.appendChild(progress);
    const tally = document.createElement("div");
    tally.className = "quiz-score";
    tally.textContent = `Score: ${session.score}`;
    headerInfo.appendChild(tally);
    header.appendChild(headerInfo);
    const editBtn = document.createElement("button");
    editBtn.type = "button";
    editBtn.className = "icon-btn quiz-edit-btn";
    editBtn.innerHTML = "\u270F\uFE0F";
    editBtn.title = "Edit card";
    editBtn.setAttribute("aria-label", "Edit card");
    editBtn.addEventListener("click", (event) => {
      event.stopPropagation();
      const onSave = typeof redraw === "function" ? () => redraw() : void 0;
      openEditor(item.kind, onSave, item);
    });
    header.appendChild(editBtn);
    card.appendChild(header);
    const prompt2 = document.createElement("p");
    prompt2.className = "quiz-prompt";
    prompt2.textContent = "Identify the term based on the details below.";
    card.appendChild(prompt2);
    const details = document.createElement("div");
    details.className = "quiz-details";
    const sections = sectionsForItem(item);
    if (!sections.length) {
      const emptySection = document.createElement("div");
      emptySection.className = "quiz-empty";
      emptySection.textContent = "No card content available for this entry.";
      details.appendChild(emptySection);
    } else {
      sections.forEach(({ key, label, content, extra }) => {
        const block = document.createElement("div");
        block.className = "quiz-section";
        if (extra) block.classList.add("quiz-section-extra");
        const head = document.createElement("div");
        head.className = "quiz-section-title";
        head.textContent = label;
        block.appendChild(head);
        const body = document.createElement("div");
        body.className = "quiz-section-body";
        renderRichText(body, content || "", { clozeMode: "interactive" });
        block.appendChild(body);
        details.appendChild(block);
      });
    }
    card.appendChild(details);
    const form = document.createElement("form");
    form.className = "quiz-answer";
    const input = document.createElement("input");
    input.type = "text";
    input.autocomplete = "off";
    input.spellcheck = false;
    input.placeholder = "Type your answer";
    input.value = answer.value || "";
    form.appendChild(input);
    const suggestions = document.createElement("ul");
    suggestions.className = "quiz-suggestions";
    const suggestionId = `quiz-suggestions-${session.idx}`;
    suggestions.id = suggestionId;
    suggestions.setAttribute("role", "listbox");
    form.appendChild(suggestions);
    input.setAttribute("aria-controls", suggestionId);
    input.setAttribute("aria-autocomplete", "list");
    input.setAttribute("aria-expanded", "false");
    const actions = document.createElement("div");
    actions.className = "quiz-answer-actions";
    const checkBtn = document.createElement("button");
    checkBtn.type = "button";
    checkBtn.className = "btn quiz-check-btn";
    checkBtn.textContent = "Check";
    checkBtn.disabled = !input.value.trim();
    checkBtn.addEventListener("click", () => gradeAnswer());
    actions.appendChild(checkBtn);
    const revealBtn = document.createElement("button");
    revealBtn.type = "button";
    revealBtn.className = "btn secondary quiz-reveal-btn";
    revealBtn.textContent = "Show answer";
    revealBtn.hidden = !(hasResult && !wasCorrect && !wasRevealed);
    actions.appendChild(revealBtn);
    form.appendChild(actions);
    const feedback = document.createElement("div");
    feedback.className = "quiz-feedback";
    if (wasCorrect) {
      feedback.textContent = "Correct!";
      feedback.classList.add("is-correct");
    } else if (wasRevealed) {
      feedback.textContent = `Answer: ${titleOf3(item)}`;
      feedback.classList.add("is-incorrect");
    } else if (hasResult) {
      feedback.textContent = "Incorrect. Try again or reveal the answer.";
      feedback.classList.add("is-incorrect");
    }
    form.appendChild(feedback);
    card.appendChild(form);
    const suggestionButtons = [];
    const setActiveSuggestion = (target = null) => {
      suggestionButtons.forEach((btn) => {
        btn.setAttribute("aria-selected", btn === target ? "true" : "false");
      });
    };
    const clearSuggestions = () => {
      suggestionButtons.splice(0, suggestionButtons.length);
      suggestions.innerHTML = "";
      input.setAttribute("aria-expanded", "false");
      setActiveSuggestion(null);
    };
    const commitSuggestion = (value) => {
      input.value = value;
      clearSuggestions();
      checkBtn.disabled = !input.value.trim();
      input.focus();
    };
    const focusSuggestion = (index) => {
      const target = suggestionButtons[index];
      if (target) {
        target.focus();
        setActiveSuggestion(target);
      }
    };
    const renderSuggestions = (matches) => {
      clearSuggestions();
      if (!matches.length) return;
      const fragment = document.createDocumentFragment();
      matches.forEach((entry, idx) => {
        const li = document.createElement("li");
        li.setAttribute("role", "presentation");
        const btn = document.createElement("button");
        btn.type = "button";
        btn.className = "quiz-suggestion-btn";
        btn.textContent = entry.title;
        btn.dataset.index = String(idx);
        btn.setAttribute("role", "option");
        btn.setAttribute("aria-selected", "false");
        btn.addEventListener("pointerdown", (event) => {
          event.preventDefault();
          commitSuggestion(entry.title);
        });
        btn.addEventListener("keydown", (event) => {
          if (event.key === "ArrowDown") {
            event.preventDefault();
            focusSuggestion(Math.min(suggestionButtons.length - 1, idx + 1));
          } else if (event.key === "ArrowUp") {
            event.preventDefault();
            if (idx === 0) {
              input.focus();
            } else {
              focusSuggestion(Math.max(0, idx - 1));
            }
          } else if (event.key === "Enter" || event.key === " ") {
            event.preventDefault();
            commitSuggestion(entry.title);
          }
        });
        btn.addEventListener("focus", () => {
          setActiveSuggestion(btn);
        });
        btn.addEventListener("blur", () => {
          if (typeof document !== "undefined") {
            const active = document.activeElement;
            if (active instanceof HTMLElement && suggestionButtons.includes(active) && active.closest(`#${suggestionId}`)) {
              return;
            }
          }
          setActiveSuggestion(null);
        });
        li.appendChild(btn);
        fragment.appendChild(li);
        suggestionButtons.push(btn);
      });
      suggestions.appendChild(fragment);
      input.setAttribute("aria-expanded", "true");
    };
    const updateSuggestions = () => {
      checkBtn.disabled = !input.value.trim();
      const v = input.value.toLowerCase();
      const existing = session.answers[session.idx];
      if (existing && existing.checked) {
        const answers = { ...session.answers };
        delete answers[session.idx];
        session.answers = answers;
        session.score = computeScore(answers);
        setQuizSession({ ...session });
        feedback.textContent = "";
        feedback.classList.remove("is-correct", "is-incorrect");
        revealBtn.hidden = true;
        revealBtn.disabled = false;
        tally.textContent = `Score: ${session.score}`;
        updateNavState();
      }
      if (!v) {
        clearSuggestions();
        return;
      }
      const seen = /* @__PURE__ */ new Set();
      const orderedMatches = [];
      const consider = (entry) => {
        if (!entry || seen.has(entry.id || entry.title)) return;
        seen.add(entry.id || entry.title);
        orderedMatches.push(entry);
      };
      session.dict.filter((d) => d.lower.startsWith(v)).forEach(consider);
      session.dict.filter((d) => !d.lower.startsWith(v) && d.lower.includes(v)).forEach(consider);
      renderSuggestions(orderedMatches.slice(0, 5));
    };
    input.addEventListener("input", updateSuggestions);
    input.addEventListener("keydown", (event) => {
      if (event.key === "ArrowDown" && suggestionButtons.length) {
        event.preventDefault();
        focusSuggestion(0);
      }
    });
    input.addEventListener("blur", () => {
      setTimeout(() => {
        if (typeof document !== "undefined") {
          const active = document.activeElement;
          if (active instanceof HTMLElement && active.closest(`#${suggestionId}`)) return;
        }
        clearSuggestions();
      }, 0);
    });
    revealBtn.addEventListener("click", () => {
      const revealValue = titleOf3(item);
      const answers = { ...session.answers, [session.idx]: { value: revealValue, isCorrect: false, checked: true, revealed: true } };
      session.answers = answers;
      session.score = computeScore(answers);
      setQuizSession({ ...session });
      input.value = revealValue;
      feedback.textContent = `Answer: ${titleOf3(item)}`;
      feedback.classList.remove("is-correct");
      feedback.classList.add("is-incorrect");
      revealBtn.hidden = true;
      clearSuggestions();
      tally.textContent = `Score: ${session.score}`;
      updateNavState();
    });
    form.addEventListener("submit", (event) => {
      event.preventDefault();
      gradeAnswer();
    });
    const durationsPromise = getReviewDurations().catch(() => ({ ...DEFAULT_REVIEW_STEPS }));
    const ratingPanel = document.createElement("div");
    ratingPanel.className = "quiz-rating-panel";
    card.appendChild(ratingPanel);
    const ratingRow = document.createElement("div");
    ratingRow.className = "quiz-rating-row";
    ratingPanel.appendChild(ratingRow);
    const options = document.createElement("div");
    options.className = "quiz-rating-options";
    ratingRow.appendChild(options);
    const status = document.createElement("span");
    status.className = "quiz-rating-status";
    status.textContent = "Optional: rate your confidence after answering.";
    ratingRow.appendChild(status);
    const ratingId = ratingKey2(item, "__overall__");
    let selectedRating = session.ratings[ratingId] || null;
    const updateSelection = (value) => {
      selectedRating = value;
      session.ratings[ratingId] = value;
      setQuizSession({ ...session });
      Array.from(options.querySelectorAll("button")).forEach((btn) => {
        const btnValue = btn.dataset.value;
        const isSelected = btnValue === value;
        btn.classList.toggle("is-selected", isSelected);
        btn.setAttribute("aria-pressed", isSelected ? "true" : "false");
      });
      status.classList.remove("is-error");
      updateNavState();
    };
    const handleRating = async (value) => {
      const current = session.answers[session.idx];
      if (!(current && current.checked && (current.isCorrect || current.revealed))) return;
      status.textContent = "Saving\u2026";
      status.classList.remove("is-error");
      try {
        const durations = await durationsPromise;
        const timestamp = Date.now();
        if (sections.length) {
          sections.forEach(({ key }) => rateSection(item, key, value, durations, timestamp));
          await upsertItem(item);
        }
        session.ratings[ratingId] = value;
        updateSelection(value);
        status.textContent = "Saved";
      } catch (err) {
        console.error("Failed to record quiz rating", err);
        status.textContent = "Save failed";
        status.classList.add("is-error");
      }
    };
    REVIEW_RATINGS.forEach((value) => {
      const btn = document.createElement("button");
      btn.type = "button";
      btn.dataset.value = value;
      btn.className = "btn quiz-rating-btn";
      const variant = RATING_CLASS2[value];
      if (variant) btn.classList.add(variant);
      btn.textContent = RATING_LABELS2[value];
      btn.disabled = !isSolved;
      btn.setAttribute("aria-pressed", "false");
      btn.addEventListener("click", () => handleRating(value));
      options.appendChild(btn);
    });
    if (selectedRating) {
      updateSelection(selectedRating);
      status.textContent = "Saved";
    }
    if (!sections.length) {
      const note = document.createElement("div");
      note.className = "quiz-rating-note";
      note.textContent = "This card has no reviewable sections.";
      ratingPanel.appendChild(note);
    }
    const controls = document.createElement("div");
    controls.className = "quiz-controls";
    const backBtn = document.createElement("button");
    backBtn.type = "button";
    backBtn.className = "btn secondary";
    backBtn.textContent = "Back";
    backBtn.disabled = session.idx === 0;
    backBtn.addEventListener("click", () => {
      setQuizSession({ ...session, idx: Math.max(0, session.idx - 1) });
      redraw();
    });
    controls.appendChild(backBtn);
    const nextBtn = document.createElement("button");
    nextBtn.type = "button";
    nextBtn.className = "btn";
    nextBtn.textContent = session.idx === pool.length - 1 ? "Finish" : "Next";
    nextBtn.disabled = true;
    nextBtn.addEventListener("click", () => {
      setQuizSession({ ...session, idx: session.idx + 1 });
      redraw();
    });
    controls.appendChild(nextBtn);
    card.appendChild(controls);
    const footer = document.createElement("div");
    footer.className = "quiz-footer";
    const saveExit = document.createElement("button");
    saveExit.type = "button";
    saveExit.className = "btn secondary";
    saveExit.textContent = "Save & close";
    saveExit.addEventListener("click", async () => {
      const original = saveExit.textContent;
      saveExit.disabled = true;
      saveExit.textContent = "Saving\u2026";
      try {
        await persistStudySession("quiz", {
          session: {
            ...session,
            idx: session.idx,
            pool,
            answers: session.answers,
            ratings: session.ratings
          },
          cohort: pool
        });
        setQuizSession(null);
        setStudySelectedMode("Quiz");
        setSubtab("Study", "Builder");
        redraw();
      } catch (err) {
        console.error("Failed to save quiz progress", err);
        saveExit.textContent = "Save failed";
        setTimeout(() => {
          saveExit.textContent = original;
        }, 2e3);
      } finally {
        saveExit.disabled = false;
      }
    });
    footer.appendChild(saveExit);
    card.appendChild(footer);
    updateNavState();
    if (root?.dataset) root.dataset.questionIdx = String(session.idx);
    const shouldRestore = previousIdx === session.idx;
    const targetY = shouldRestore ? prevScrollY : 0;
    const canRestore = hasWindow || docScroller;
    if (canRestore) {
      const applyScroll = () => {
        if (hasWindow && typeof window.scrollTo === "function") {
          window.scrollTo({ left: 0, top: targetY, behavior: "auto" });
        } else if (docScroller) {
          docScroller.scrollTop = targetY;
        }
      };
      if (hasWindow && typeof window.requestAnimationFrame === "function") {
        window.requestAnimationFrame(applyScroll);
      } else if (typeof setTimeout === "function") {
        setTimeout(applyScroll, 0);
      } else {
        applyScroll();
      }
    }
    function gradeAnswer() {
      const guess = input.value.trim();
      if (!guess) return;
      const normalized2 = guess.toLowerCase();
      const correct = titleOf3(item).toLowerCase();
      const isCorrect = normalized2 === correct;
      const answers = {
        ...session.answers,
        [session.idx]: { value: guess, isCorrect, checked: true, revealed: false }
      };
      const nextScore = computeScore(answers);
      session.answers = answers;
      session.score = nextScore;
      setQuizSession({ ...session });
      tally.textContent = `Score: ${session.score}`;
      feedback.textContent = isCorrect ? "Correct!" : "Incorrect. Try again or reveal the answer.";
      feedback.classList.remove("is-correct", "is-incorrect");
      feedback.classList.add(isCorrect ? "is-correct" : "is-incorrect");
      clearSuggestions();
      revealBtn.hidden = isCorrect;
      if (!isCorrect) {
        revealBtn.disabled = false;
        revealBtn.focus();
      }
      updateNavState();
    }
    function updateNavState() {
      const currentAnswer = session.answers[session.idx];
      const solved = Boolean(currentAnswer && currentAnswer.checked && (currentAnswer.isCorrect || currentAnswer.revealed));
      nextBtn.disabled = !solved;
      Array.from(options.querySelectorAll("button")).forEach((btn) => {
        btn.disabled = !solved;
      });
      if (!solved) {
        status.classList.remove("is-error");
        status.textContent = "Optional: rate your confidence after answering.";
      } else {
        revealBtn.hidden = true;
      }
    }
  }

  // js/ui/components/block-mode.js
  function renderBlockMode(root, redraw) {
    const shell = document.createElement("section");
    shell.className = "block-mode-shell";
    root.appendChild(shell);
    drawBlockMode(shell, redraw);
  }
  function drawBlockMode(shell, globalRedraw) {
    shell.innerHTML = "";
    const redraw = () => drawBlockMode(shell, globalRedraw);
    const items = state.cohort || [];
    if (!items.length) {
      shell.appendChild(messageCard("Select study cards to unlock Blocks mode. Use the filters above to assemble a cohort."));
      return;
    }
    const sections = collectSections(items);
    if (!sections.length) {
      shell.appendChild(messageCard("The selected cards do not have structured sections yet. Add cards with rich content to practice in Blocks mode."));
      return;
    }
    let activeKey = state.blockMode.section;
    if (!activeKey || !sections.some((sec) => sec.key === activeKey)) {
      activeKey = sections[0].key;
      if (activeKey !== state.blockMode.section) {
        setBlockMode({ section: activeKey });
      }
    }
    const sectionData = sections.find((sec) => sec.key === activeKey) || sections[0];
    const entryMap = /* @__PURE__ */ new Map();
    sectionData.items.forEach((info) => {
      entryMap.set(entryIdFor(info.itemId, sectionData.key), info);
    });
    const validAssignments = sanitizeAssignments(sectionData.key, entryMap);
    const assignedSet = new Set(Object.values(validAssignments));
    const reveal = !!(state.blockMode.reveal && state.blockMode.reveal[sectionData.key]);
    const bankEntries = Array.from(entryMap.entries()).filter(([id]) => !assignedSet.has(id)).map(([entryId, info]) => ({ entryId, value: info.value, itemId: info.itemId }));
    const orderedBank = orderEntries(sectionData.key, bankEntries);
    const results = sectionData.items.map((info) => {
      const entryId = entryIdFor(info.itemId, sectionData.key);
      const assignedId = validAssignments[info.itemId];
      const assignedInfo = assignedId ? entryMap.get(assignedId) : null;
      const assignedValue = assignedInfo ? assignedInfo.value : "";
      const correct = assignedValue && normalized(assignedValue) === normalized(info.value);
      return { ...info, entryId, assignedId, assignedValue, correct };
    });
    const filledCount = results.filter((r) => r.assignedValue).length;
    const correctCount = results.filter((r) => r.correct).length;
    shell.appendChild(renderHeader({
      sections,
      activeKey: sectionData.key,
      filledCount,
      correctCount,
      total: results.length,
      bankRemaining: orderedBank.length,
      reveal,
      onSectionChange: (key) => {
        const nextReveal = { ...state.blockMode.reveal || {} };
        delete nextReveal[key];
        setBlockMode({ section: key, reveal: nextReveal });
        redraw();
      },
      onCheck: () => {
        const nextReveal = { ...state.blockMode.reveal || {} };
        nextReveal[sectionData.key] = true;
        setBlockMode({ reveal: nextReveal });
        redraw();
      },
      onReset: () => {
        const assignments = { ...state.blockMode.assignments || {} };
        assignments[sectionData.key] = {};
        const revealMap = { ...state.blockMode.reveal || {} };
        delete revealMap[sectionData.key];
        setBlockMode({ assignments, reveal: revealMap });
        redraw();
      }
    }));
    const board = document.createElement("div");
    board.className = "block-mode-board";
    results.forEach((result) => {
      board.appendChild(renderBlockCard({
        sectionLabel: sectionData.label,
        reveal,
        result,
        onRemove: () => {
          const assignments = { ...state.blockMode.assignments || {} };
          const nextSectionAssignments = { ...assignments[sectionData.key] || {} };
          delete nextSectionAssignments[result.itemId];
          assignments[sectionData.key] = nextSectionAssignments;
          const revealMap = { ...state.blockMode.reveal || {} };
          delete revealMap[sectionData.key];
          setBlockMode({ assignments, reveal: revealMap });
          redraw();
        },
        onDrop: (entryId) => {
          const info = entryMap.get(entryId);
          if (!info) return;
          const assignments = { ...state.blockMode.assignments || {} };
          const nextSectionAssignments = { ...assignments[sectionData.key] || {} };
          for (const [itemId, assigned] of Object.entries(nextSectionAssignments)) {
            if (assigned === entryId) delete nextSectionAssignments[itemId];
          }
          nextSectionAssignments[result.itemId] = entryId;
          assignments[sectionData.key] = nextSectionAssignments;
          const revealMap = { ...state.blockMode.reveal || {} };
          delete revealMap[sectionData.key];
          setBlockMode({ assignments, reveal: revealMap });
          redraw();
        }
      }));
    });
    shell.appendChild(board);
    shell.appendChild(renderBank({
      label: sectionData.label,
      entries: orderedBank
    }));
    shell.appendChild(renderFooter({
      globalRedraw,
      sectionLabel: sectionData.label,
      filledCount,
      total: results.length
    }));
  }
  function snapshotBlockState() {
    const source = state.blockMode || {};
    const clone6 = (value) => deepClone(value ?? {});
    return {
      section: source.section || "",
      assignments: clone6(source.assignments),
      reveal: clone6(source.reveal),
      order: clone6(source.order)
    };
  }
  function renderFooter({ globalRedraw, sectionLabel, filledCount, total }) {
    const card = document.createElement("div");
    card.className = "card block-mode-footer";
    const status = document.createElement("div");
    status.className = "block-mode-footer-status";
    if (total > 0) {
      status.textContent = filledCount ? `Progress saved for ${filledCount}/${total} prompts` : "No assignments yet";
    } else {
      status.textContent = "No prompts in this section yet.";
    }
    card.appendChild(status);
    const actions = document.createElement("div");
    actions.className = "block-mode-footer-actions";
    const saveBtn = document.createElement("button");
    saveBtn.type = "button";
    saveBtn.className = "btn";
    saveBtn.textContent = "Save & exit";
    saveBtn.addEventListener("click", async () => {
      const original = saveBtn.textContent;
      saveBtn.disabled = true;
      saveBtn.textContent = "Saving\u2026";
      try {
        const snapshot = snapshotBlockState();
        await persistStudySession("blocks", {
          session: snapshot,
          cohort: state.cohort,
          metadata: {
            label: sectionLabel ? `Blocks \u2013 ${sectionLabel}` : "Blocks session"
          }
        });
        resetBlockMode();
        setStudySelectedMode("Blocks");
        setSubtab("Study", "Builder");
        if (typeof globalRedraw === "function") {
          globalRedraw();
        }
      } catch (err) {
        console.error("Failed to save blocks progress", err);
        saveBtn.textContent = "Save failed";
        setTimeout(() => {
          saveBtn.textContent = original;
        }, 2e3);
      } finally {
        saveBtn.disabled = false;
      }
    });
    actions.appendChild(saveBtn);
    const exitBtn = document.createElement("button");
    exitBtn.type = "button";
    exitBtn.className = "btn secondary";
    exitBtn.textContent = "Exit without saving";
    exitBtn.addEventListener("click", async () => {
      exitBtn.disabled = true;
      try {
        await removeStudySession("blocks").catch((err) => console.warn("Failed to discard blocks session", err));
      } finally {
        resetBlockMode();
        setStudySelectedMode("Blocks");
        setSubtab("Study", "Builder");
        if (typeof globalRedraw === "function") {
          globalRedraw();
        }
      }
    });
    actions.appendChild(exitBtn);
    card.appendChild(actions);
    return card;
  }
  function renderHeader({ sections, activeKey, filledCount, correctCount, total, bankRemaining, reveal, onSectionChange, onCheck, onReset }) {
    const card = document.createElement("div");
    card.className = "card block-mode-header";
    const titleRow = document.createElement("div");
    titleRow.className = "block-mode-header-row";
    const title = document.createElement("h2");
    title.textContent = "Blocks Mode";
    titleRow.appendChild(title);
    const selectWrap = document.createElement("label");
    selectWrap.className = "block-mode-select";
    const selectLabel = document.createElement("span");
    selectLabel.textContent = "Section";
    selectWrap.appendChild(selectLabel);
    const select = document.createElement("select");
    sections.forEach((sec) => {
      const opt = document.createElement("option");
      opt.value = sec.key;
      opt.textContent = sec.label;
      if (sec.key === activeKey) opt.selected = true;
      select.appendChild(opt);
    });
    select.addEventListener("change", () => onSectionChange(select.value));
    selectWrap.appendChild(select);
    titleRow.appendChild(selectWrap);
    card.appendChild(titleRow);
    const meta = document.createElement("div");
    meta.className = "block-mode-meta-row";
    const placed = document.createElement("span");
    placed.textContent = `Placed: ${filledCount}/${total}`;
    meta.appendChild(placed);
    if (reveal) {
      const score = document.createElement("span");
      score.textContent = `Correct: ${correctCount}/${total}`;
      meta.appendChild(score);
    }
    const bankInfo = document.createElement("span");
    bankInfo.textContent = `In bank: ${bankRemaining}`;
    meta.appendChild(bankInfo);
    card.appendChild(meta);
    const actions = document.createElement("div");
    actions.className = "block-mode-actions";
    const checkBtn = document.createElement("button");
    checkBtn.type = "button";
    checkBtn.className = "btn";
    checkBtn.textContent = "Check answers";
    checkBtn.disabled = !filledCount;
    checkBtn.addEventListener("click", onCheck);
    actions.appendChild(checkBtn);
    const resetBtn = document.createElement("button");
    resetBtn.type = "button";
    resetBtn.className = "btn secondary";
    resetBtn.textContent = "Reset section";
    resetBtn.disabled = !filledCount;
    resetBtn.addEventListener("click", onReset);
    actions.appendChild(resetBtn);
    card.appendChild(actions);
    return card;
  }
  function renderBlockCard({ sectionLabel, reveal, result, onRemove, onDrop }) {
    const card = document.createElement("div");
    card.className = "card block-mode-card";
    const title = document.createElement("div");
    title.className = "block-mode-card-title";
    title.textContent = itemTitle(result.item);
    card.appendChild(title);
    const subtitle = document.createElement("div");
    subtitle.className = "block-mode-card-subtitle";
    subtitle.textContent = formatItemContext(result.item);
    if (subtitle.textContent) card.appendChild(subtitle);
    const slot = document.createElement("div");
    slot.className = "block-mode-slot";
    slot.dataset.itemId = result.itemId;
    slot.dataset.section = sectionLabel;
    slot.addEventListener("dragover", (event) => {
      event.preventDefault();
      slot.classList.add("drag-over");
    });
    slot.addEventListener("dragenter", (event) => {
      event.preventDefault();
      slot.classList.add("drag-over");
    });
    slot.addEventListener("dragleave", () => {
      slot.classList.remove("drag-over");
    });
    slot.addEventListener("drop", (event) => {
      event.preventDefault();
      slot.classList.remove("drag-over");
      const entryId = event.dataTransfer.getData("text/plain");
      if (entryId) onDrop(entryId);
    });
    if (result.assignedValue) {
      slot.classList.add("filled");
      const chip = document.createElement("div");
      chip.className = "block-chip assigned";
      const text = document.createElement("div");
      text.className = "block-chip-text";
      text.textContent = result.assignedValue;
      chip.appendChild(text);
      const removeBtn = document.createElement("button");
      removeBtn.type = "button";
      removeBtn.className = "chip-remove";
      removeBtn.textContent = "\xD7";
      removeBtn.addEventListener("click", onRemove);
      chip.appendChild(removeBtn);
      slot.appendChild(chip);
    } else {
      const placeholder = document.createElement("div");
      placeholder.className = "block-slot-placeholder";
      placeholder.textContent = `Drop ${sectionLabel.toLowerCase()} here`;
      slot.appendChild(placeholder);
    }
    card.appendChild(slot);
    if (reveal) {
      slot.classList.add(result.correct ? "correct" : result.assignedValue ? "incorrect" : "missing");
      if (!result.correct) {
        const answer = document.createElement("div");
        answer.className = "block-mode-answer";
        const label = document.createElement("span");
        label.textContent = "Answer";
        const body = document.createElement("div");
        body.textContent = result.value;
        answer.appendChild(label);
        answer.appendChild(body);
        card.appendChild(answer);
      }
    }
    return card;
  }
  function renderBank({ label, entries, onPick }) {
    const card = document.createElement("div");
    card.className = "card block-mode-bank";
    const title = document.createElement("div");
    title.className = "block-mode-bank-title";
    title.textContent = `${label} bank`;
    card.appendChild(title);
    const list = document.createElement("div");
    list.className = "block-mode-bank-items";
    if (!entries.length) {
      const empty = document.createElement("div");
      empty.className = "block-mode-bank-empty";
      empty.textContent = "All matches placed!";
      list.appendChild(empty);
    } else {
      entries.forEach((entry) => {
        const chip = document.createElement("div");
        chip.className = "block-chip";
        chip.textContent = entry.value;
        chip.draggable = true;
        chip.addEventListener("dragstart", (event) => {
          event.dataTransfer.effectAllowed = "move";
          event.dataTransfer.setData("text/plain", entry.entryId);
          chip.classList.add("dragging");
        });
        chip.addEventListener("dragend", () => chip.classList.remove("dragging"));
        if (onPick) {
          chip.addEventListener("click", () => onPick(entry.entryId));
        }
        list.appendChild(chip);
      });
    }
    card.appendChild(list);
    return card;
  }
  function collectSections(items) {
    const map = /* @__PURE__ */ new Map();
    items.forEach((item, index) => {
      const itemId = resolveItemId(item, index);
      sectionDefsForKind(item.kind).forEach((def) => {
        const value = sectionValue(item[def.key]);
        if (!value) return;
        let section = map.get(def.key);
        if (!section) {
          section = { key: def.key, label: def.label, items: [] };
          map.set(def.key, section);
        }
        section.items.push({ item, itemId, value });
      });
    });
    return Array.from(map.values()).sort((a, b) => a.label.localeCompare(b.label));
  }
  function sanitizeAssignments(sectionKey, entryMap) {
    const current = state.blockMode.assignments && state.blockMode.assignments[sectionKey] || {};
    let changed = false;
    const valid = {};
    for (const [itemId, entryId] of Object.entries(current)) {
      if (entryMap.has(entryId)) {
        valid[itemId] = entryId;
      } else {
        changed = true;
      }
    }
    if (changed) {
      const assignments = { ...state.blockMode.assignments || {} };
      assignments[sectionKey] = valid;
      setBlockMode({ assignments });
    }
    return valid;
  }
  function orderEntries(sectionKey, entries) {
    const ids = entries.map((entry) => entry.entryId);
    const existing = state.blockMode.order && state.blockMode.order[sectionKey] || [];
    const filtered = existing.filter((id) => ids.includes(id));
    const missing = ids.filter((id) => !filtered.includes(id));
    const next = filtered.concat(missing);
    if (!arraysEqual2(existing, next)) {
      const order = { ...state.blockMode.order || {} };
      order[sectionKey] = next;
      setBlockMode({ order });
    }
    const byId = new Map(entries.map((entry) => [entry.entryId, entry]));
    return next.map((id) => byId.get(id)).filter(Boolean);
  }
  function entryIdFor(itemId, sectionKey) {
    return `${itemId}::${sectionKey}`;
  }
  function sectionValue(raw) {
    if (raw == null) return "";
    const text = typeof raw === "string" ? raw : String(raw);
    const sanitized = sanitizeHtml(text);
    const template = document.createElement("template");
    template.innerHTML = sanitized;
    return template.content.textContent?.trim() || "";
  }
  function normalized(text) {
    return sectionValue(text).replace(/\s+/g, " ").toLowerCase();
  }
  function resolveItemId(item, index) {
    return item.id || item.uid || item.slug || item.key || `${item.kind || "item"}-${index}`;
  }
  function itemTitle(item) {
    return item.name || item.concept || item.title || "Card";
  }
  function formatItemContext(item) {
    const parts = [];
    if (item.kind) parts.push(capitalize(item.kind));
    if (Array.isArray(item.lectures) && item.lectures.length) {
      const lectureNames = item.lectures.map((l) => l.name).filter(Boolean);
      if (lectureNames.length) parts.push(lectureNames.join(", "));
    }
    return parts.join(" \u2022 ");
  }
  function capitalize(text) {
    if (!text) return "";
    return text.charAt(0).toUpperCase() + text.slice(1);
  }
  function arraysEqual2(a, b) {
    if (a.length !== b.length) return false;
    return a.every((val, idx) => val === b[idx]);
  }
  function messageCard(text) {
    const card = document.createElement("div");
    card.className = "card block-mode-empty";
    card.textContent = text;
    return card;
  }

  // js/ui/components/block-board.js
  var loadCatalog = loadBlockCatalog;
  var fetchLectures2 = listAllLectures;
  var persistLecture = saveLecture;
  var fetchSettings = getSettings;
  var DAY_MS2 = 24 * 60 * 60 * 1e3;
  var DEFAULT_BOARD_DAYS = 14;
  var SHIFT_OFFSET_UNITS = [
    { id: "minutes", label: "minutes", minutes: 1 },
    { id: "hours", label: "hours", minutes: 60 },
    { id: "days", label: "days", minutes: 60 * 24 },
    { id: "weeks", label: "weeks", minutes: 60 * 24 * 7 }
  ];
  var TIMELINE_BASE_UNIT_HEIGHT = 20;
  var TIMELINE_MAX_BAR_HEIGHT = 200;
  var TIMELINE_MIN_SEGMENT_HEIGHT = 12;
  var BLOCK_RANGE_FORMAT = new Intl.DateTimeFormat(void 0, {
    month: "short",
    day: "numeric",
    year: "numeric"
  });
  var PASS_DUE_FORMAT2 = new Intl.DateTimeFormat(void 0, {
    month: "short",
    day: "numeric"
  });
  var PASS_TIME_FORMAT2 = new Intl.DateTimeFormat(void 0, {
    hour: "numeric",
    minute: "2-digit"
  });
  function ensureBoardState() {
    if (!state.blockBoard) {
      state.blockBoard = {
        collapsedBlocks: [],
        hiddenTimelines: [],
        autoCollapsed: [],
        autoHidden: [],
        manualExpanded: [],
        manualTimeline: []
      };
    }
    if (!Array.isArray(state.blockBoard.collapsedBlocks)) {
      state.blockBoard.collapsedBlocks = [];
    }
    if (!Array.isArray(state.blockBoard.hiddenTimelines)) {
      state.blockBoard.hiddenTimelines = [];
      if (state.blockBoard.showDensity === false && !state.blockBoard.hiddenTimelines.includes("__all__")) {
        state.blockBoard.hiddenTimelines.push("__all__");
      }
    }
    if (!Array.isArray(state.blockBoard.autoCollapsed)) {
      state.blockBoard.autoCollapsed = [];
    }
    if (!Array.isArray(state.blockBoard.autoHidden)) {
      state.blockBoard.autoHidden = [];
    }
    if (!Array.isArray(state.blockBoard.manualExpanded)) {
      state.blockBoard.manualExpanded = [];
    }
    if (!Array.isArray(state.blockBoard.manualTimeline)) {
      state.blockBoard.manualTimeline = [];
    }
    return state.blockBoard;
  }
  function passColor(order = 1) {
    return passColorForOrder(order);
  }
  function startOfDay2(timestamp) {
    const date = new Date(timestamp);
    date.setHours(0, 0, 0, 0);
    return date.getTime();
  }
  function formatDay(timestamp) {
    const date = new Date(Number(timestamp));
    const formatter = new Intl.DateTimeFormat(void 0, { weekday: "short", month: "short", day: "numeric" });
    return formatter.format(date);
  }
  function parseBlockDate2(value) {
    if (!value) return null;
    const date = new Date(value);
    if (Number.isNaN(date.getTime())) return null;
    return date;
  }
  function formatBlockDate2(value) {
    const date = parseBlockDate2(value);
    if (!date) return null;
    return BLOCK_RANGE_FORMAT.format(date);
  }
  function blockRangeLabel(block) {
    const start = formatBlockDate2(block?.startDate);
    const end = formatBlockDate2(block?.endDate);
    if (start && end) return `${start} \u2192 ${end}`;
    if (start) return `Starts ${start}`;
    if (end) return `Ends ${end}`;
    return null;
  }
  function blockSpanDays(block) {
    const start = parseBlockDate2(block?.startDate);
    const end = parseBlockDate2(block?.endDate);
    if (!start || !end) return null;
    const diff = end.getTime() - start.getTime();
    if (diff < 0) return null;
    return Math.round(diff / DAY_MS2) + 1;
  }
  function normalizeShiftUnit(id) {
    if (typeof id !== "string") return "days";
    const normalized2 = SHIFT_OFFSET_UNITS.find((option) => option.id === id);
    return normalized2 ? normalized2.id : "days";
  }
  function combineShiftValueUnit(value, unitId) {
    const numeric = Number(value);
    if (!Number.isFinite(numeric) || numeric <= 0) {
      return 0;
    }
    const unit = SHIFT_OFFSET_UNITS.find((option) => option.id === normalizeShiftUnit(unitId)) || SHIFT_OFFSET_UNITS[2];
    return Math.max(0, Math.round(numeric * unit.minutes));
  }
  function resolveLatestBlockId(blocks = []) {
    if (!Array.isArray(blocks) || !blocks.length) return null;
    let latestId = null;
    let latestScore = -Infinity;
    let fallbackId = null;
    const total = blocks.length;
    blocks.forEach((block, index) => {
      if (!block || block.blockId == null) return;
      const blockId = String(block.blockId);
      if (!fallbackId) fallbackId = blockId;
      const orderScore = Number(block?.order);
      const createdScore = Number(block?.createdAt);
      const start = parseBlockDate2(block?.startDate);
      const end = parseBlockDate2(block?.endDate);
      const startScore = start instanceof Date ? start.getTime() : null;
      const endScore = end instanceof Date ? end.getTime() : null;
      let score;
      if (Number.isFinite(orderScore)) {
        score = orderScore;
      } else if (Number.isFinite(createdScore)) {
        score = createdScore;
      } else if (Number.isFinite(startScore)) {
        score = startScore;
      } else if (Number.isFinite(endScore)) {
        score = endScore;
      } else {
        score = total - index;
      }
      if (latestId == null || score > latestScore) {
        latestId = blockId;
        latestScore = score;
      }
    });
    return latestId ?? fallbackId;
  }
  function buildScopeOptions(mode) {
    if (mode === "pull") {
      return [
        { id: "single", label: "Only this pass" },
        { id: "chain-before", label: "This & preceding passes" }
      ];
    }
    return [
      { id: "single", label: "Only this pass" },
      { id: "chain-after", label: "This & following passes" }
    ];
  }
  function openShiftDialog(mode, { title, description, defaultValue = 1, defaultUnit = "days" } = {}) {
    return new Promise((resolve) => {
      const overlay = document.createElement("div");
      overlay.className = "modal block-board-shift-modal";
      const card = document.createElement("div");
      card.className = "card block-board-shift-card";
      const heading = document.createElement("h3");
      heading.textContent = title || (mode === "push" ? "Push later" : "Pull earlier");
      card.appendChild(heading);
      if (description) {
        const desc = document.createElement("p");
        desc.className = "block-board-shift-description";
        desc.textContent = description;
        card.appendChild(desc);
      }
      const fields = document.createElement("div");
      fields.className = "block-board-shift-fields";
      const amountField = document.createElement("label");
      amountField.className = "block-board-shift-field";
      amountField.textContent = "Amount";
      const amountInput = document.createElement("input");
      amountInput.type = "number";
      amountInput.className = "input block-board-shift-input";
      amountInput.min = "0";
      amountInput.step = "1";
      amountInput.value = String(defaultValue);
      amountField.appendChild(amountInput);
      fields.appendChild(amountField);
      const unitField = document.createElement("label");
      unitField.className = "block-board-shift-field";
      unitField.textContent = "Unit";
      const unitSelect = document.createElement("select");
      unitSelect.className = "input block-board-shift-unit";
      SHIFT_OFFSET_UNITS.forEach((option) => {
        const opt = document.createElement("option");
        opt.value = option.id;
        opt.textContent = option.label;
        unitSelect.appendChild(opt);
      });
      unitSelect.value = normalizeShiftUnit(defaultUnit);
      unitField.appendChild(unitSelect);
      fields.appendChild(unitField);
      card.appendChild(fields);
      const scopeGroup = document.createElement("fieldset");
      scopeGroup.className = "block-board-shift-scope";
      const legend = document.createElement("legend");
      legend.textContent = "Scope";
      scopeGroup.appendChild(legend);
      const scopeInputs = [];
      buildScopeOptions(mode).forEach((option, index) => {
        const wrapper = document.createElement("label");
        wrapper.className = "block-board-shift-scope-option";
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "block-board-shift-scope";
        input.value = option.id;
        if (index === 0) input.checked = true;
        const span = document.createElement("span");
        span.textContent = option.label;
        wrapper.appendChild(input);
        wrapper.appendChild(span);
        scopeGroup.appendChild(wrapper);
        scopeInputs.push(input);
      });
      card.appendChild(scopeGroup);
      const feedback = document.createElement("div");
      feedback.className = "block-board-shift-error";
      card.appendChild(feedback);
      const actions = document.createElement("div");
      actions.className = "block-board-shift-actions";
      const confirm2 = document.createElement("button");
      confirm2.type = "button";
      confirm2.className = "btn";
      confirm2.textContent = mode === "push" ? "Push later" : "Pull earlier";
      const cancel = document.createElement("button");
      cancel.type = "button";
      cancel.className = "btn secondary";
      cancel.textContent = "Cancel";
      actions.appendChild(confirm2);
      actions.appendChild(cancel);
      card.appendChild(actions);
      function cleanup(result) {
        if (document.body.contains(overlay)) {
          document.body.removeChild(overlay);
        }
        resolve(result);
      }
      confirm2.addEventListener("click", () => {
        const minutes = combineShiftValueUnit(amountInput.value, unitSelect.value);
        if (!Number.isFinite(minutes) || minutes <= 0) {
          feedback.textContent = "Enter a value greater than zero.";
          feedback.classList.add("is-visible");
          amountInput.focus();
          return;
        }
        const selectedScope = scopeInputs.find((input) => input.checked)?.value || "single";
        cleanup({ minutes, scope: selectedScope });
      });
      cancel.addEventListener("click", () => cleanup(null));
      overlay.addEventListener("click", (event) => {
        if (event.target === overlay) {
          cleanup(null);
        }
      });
      overlay.appendChild(card);
      document.body.appendChild(overlay);
      amountInput.focus({ preventScroll: true });
    });
  }
  function shiftPassesForScope(lecture, passOrder, deltaMinutes, scope) {
    if (!lecture || typeof lecture !== "object") return lecture;
    const targetOrder = Number(passOrder);
    if (!Number.isFinite(targetOrder)) return lecture;
    const delta = Number(deltaMinutes);
    if (!Number.isFinite(delta) || delta === 0) return lecture;
    const passes = Array.isArray(lecture.passes) ? lecture.passes.map((pass) => ({ ...pass })) : [];
    if (!passes.length) return lecture;
    const shiftMs = Math.round(delta * 60 * 1e3);
    const normalizedScope = scope === "chain-after" || scope === "chain-before" ? scope : "single";
    passes.forEach((pass) => {
      const order = Number(pass?.order);
      if (!Number.isFinite(order)) return;
      const inScope = normalizedScope === "chain-after" ? order >= targetOrder : normalizedScope === "chain-before" ? order <= targetOrder : order === targetOrder;
      if (!inScope) return;
      if (!Number.isFinite(pass?.due)) return;
      if (Number.isFinite(pass?.completedAt)) return;
      const nextDue = Math.max(0, Math.round(pass.due + shiftMs));
      pass.due = nextDue;
    });
    const status = deriveLectureStatus(passes, lecture.status);
    const nextDueAt = calculateNextDue(passes);
    return {
      ...lecture,
      passes,
      status,
      nextDueAt
    };
  }
  function collectTimelineSegments(blockLectures, days) {
    const dayMap = new Map(days.map((day) => [day, []]));
    blockLectures.forEach((lecture) => {
      const passes = Array.isArray(lecture?.passes) ? lecture.passes : [];
      passes.forEach((pass) => {
        if (!pass) return;
        const due = Number(pass?.due);
        if (!Number.isFinite(due)) return;
        const dayKey = startOfDay2(due);
        if (!dayMap.has(dayKey)) return;
        dayMap.get(dayKey).push({
          lecture,
          pass,
          order: Number(pass?.order),
          completed: Number.isFinite(pass?.completedAt)
        });
      });
    });
    return days.map((day) => {
      const entries = (dayMap.get(day) || []).slice().sort((a, b) => {
        if (a.completed !== b.completed) return a.completed ? 1 : -1;
        const orderA = Number.isFinite(a.order) ? a.order : Number.POSITIVE_INFINITY;
        const orderB = Number.isFinite(b.order) ? b.order : Number.POSITIVE_INFINITY;
        if (orderA !== orderB) return orderA - orderB;
        const nameA = a.lecture?.name || "";
        const nameB = b.lecture?.name || "";
        return nameA.localeCompare(nameB);
      });
      return { day, entries };
    });
  }
  function formatPassDueLabel(due) {
    if (!Number.isFinite(due)) return "";
    const date = new Date(due);
    const datePart = PASS_DUE_FORMAT2.format(date);
    const timePart = PASS_TIME_FORMAT2.format(date);
    return `${datePart} \u2022 ${timePart}`;
  }
  function collectDefaultBoardDays(now = Date.now()) {
    const today = startOfDay2(now);
    const start = today - 2 * DAY_MS2;
    return Array.from({ length: DEFAULT_BOARD_DAYS }, (_, idx) => start + idx * DAY_MS2);
  }
  function collectLectureDueRange(lectures) {
    let start = null;
    let end = null;
    if (!Array.isArray(lectures)) return { start, end };
    lectures.forEach((lecture) => {
      const passes = Array.isArray(lecture?.passes) ? lecture.passes : [];
      passes.forEach((pass) => {
        const due = Number(pass?.due);
        if (!Number.isFinite(due)) return;
        const day = startOfDay2(due);
        if (start == null || day < start) start = day;
        if (end == null || day > end) end = day;
      });
    });
    return { start, end };
  }
  function collectDaysForBlock(block, lectures = [], now = Date.now()) {
    const startDate = parseBlockDate2(block?.startDate);
    const endDate = parseBlockDate2(block?.endDate);
    const dueRange = collectLectureDueRange(lectures);
    const weeks = Number(block?.weeks);
    let startDay = startDate ? startOfDay2(startDate.getTime()) : null;
    let endDay = endDate ? startOfDay2(endDate.getTime()) : null;
    if (Number.isFinite(weeks) && weeks > 0) {
      const totalDays = Math.max(1, Math.round(weeks * 7));
      if (startDay != null && endDay == null) {
        endDay = startDay + (totalDays - 1) * DAY_MS2;
      } else if (endDay != null && startDay == null) {
        startDay = endDay - (totalDays - 1) * DAY_MS2;
      }
    }
    if (dueRange.start != null) {
      startDay = startDay == null ? dueRange.start : Math.min(startDay, dueRange.start);
    }
    if (dueRange.end != null) {
      endDay = endDay == null ? dueRange.end : Math.max(endDay, dueRange.end);
    }
    if (startDay != null && endDay != null && endDay >= startDay) {
      const spanDays = Math.floor((endDay - startDay) / DAY_MS2) + 1;
      if (spanDays < 3) {
        const deficit = 3 - spanDays;
        const padBefore = Math.ceil(deficit / 2);
        const padAfter = deficit - padBefore;
        startDay -= padBefore * DAY_MS2;
        endDay += padAfter * DAY_MS2;
      }
      const days = [];
      for (let ts = startDay; ts <= endDay; ts += DAY_MS2) {
        days.push(ts);
      }
      return days;
    }
    if (Number.isFinite(weeks) && weeks > 0) {
      const totalDays = Math.max(1, Math.round(weeks * 7));
      const anchor = dueRange.start != null ? dueRange.start : startOfDay2(now);
      return Array.from({ length: totalDays }, (_, idx) => anchor + idx * DAY_MS2);
    }
    if (dueRange.start != null && dueRange.end != null && dueRange.end >= dueRange.start) {
      const days = [];
      for (let ts = dueRange.start; ts <= dueRange.end; ts += DAY_MS2) {
        days.push(ts);
      }
      return days;
    }
    if (startDate) {
      const start = startOfDay2(startDate.getTime());
      return Array.from({ length: 7 }, (_, idx) => start + idx * DAY_MS2);
    }
    return [];
  }
  function buildPassElement(entry, onComplete, onShift) {
    const chip = document.createElement("div");
    chip.className = "block-board-pass-chip";
    chip.style.setProperty("--chip-accent", passColor(entry?.pass?.order));
    const chipComplete = Number.isFinite(entry?.pass?.completedAt);
    chip.classList.toggle("is-complete", chipComplete);
    chip.classList.toggle("is-pending", !chipComplete);
    chip.dataset.passOrder = String(entry?.pass?.order ?? "");
    const title = document.createElement("div");
    title.className = "block-board-pass-title";
    title.textContent = entry?.lecture?.name || `Lecture ${entry?.lecture?.id}`;
    chip.appendChild(title);
    const meta = document.createElement("div");
    meta.className = "block-board-pass-meta";
    const label = entry?.pass?.label || `Pass ${entry?.pass?.order ?? ""}`;
    const action = entry?.pass?.action ? entry.pass.action : "";
    const dueLabel = Number.isFinite(entry?.pass?.due) ? formatPassDueLabel(entry.pass.due) : "Unscheduled";
    const parts = [label];
    if (action) parts.push(action);
    if (dueLabel) parts.push(dueLabel);
    meta.textContent = parts.join(" \u2022 ");
    chip.appendChild(meta);
    const actions = document.createElement("div");
    actions.className = "block-board-pass-actions";
    const done = document.createElement("button");
    done.type = "button";
    done.className = "btn tertiary";
    done.textContent = "Mark done";
    done.addEventListener("click", () => {
      chip.classList.add("is-complete");
      chip.classList.remove("is-pending");
      onComplete(entry);
    });
    actions.appendChild(done);
    if (typeof onShift === "function") {
      const push = document.createElement("button");
      push.type = "button";
      push.className = "btn tertiary";
      push.textContent = "Push";
      push.addEventListener("click", () => onShift(entry, "push"));
      actions.appendChild(push);
      const pull = document.createElement("button");
      pull.type = "button";
      pull.className = "btn tertiary";
      pull.textContent = "Pull";
      pull.addEventListener("click", () => onShift(entry, "pull"));
      actions.appendChild(pull);
    }
    chip.appendChild(actions);
    return chip;
  }
  function applyPassDueUpdate(lecture, passOrder, newDue) {
    const passes = Array.isArray(lecture?.passes) ? lecture.passes.map((pass) => ({ ...pass })) : [];
    const index = passes.findIndex((pass) => pass?.order === passOrder);
    if (index >= 0) {
      passes[index] = { ...passes[index], due: newDue ?? null };
      if (!Number.isFinite(newDue)) {
        passes[index].due = null;
      }
      passes[index].completedAt = passes[index].completedAt ?? null;
      if (passes[index].completedAt && newDue && newDue > passes[index].completedAt) {
        passes[index].completedAt = null;
      }
    }
    const status = deriveLectureStatus(passes, lecture?.status);
    const nextDueAt = calculateNextDue(passes);
    return { ...lecture, passes, status, nextDueAt };
  }
  function createPassCard(entry, onDrag) {
    const card = document.createElement("div");
    card.className = "block-board-pass-card";
    card.draggable = true;
    card.style.setProperty("--card-accent", passColor(entry?.pass?.order));
    const isComplete = Number.isFinite(entry?.pass?.completedAt);
    card.classList.toggle("is-complete", isComplete);
    card.classList.toggle("is-pending", !isComplete);
    card.dataset.blockId = entry?.lecture?.blockId ?? "";
    card.dataset.lectureId = entry?.lecture?.id ?? "";
    card.dataset.passOrder = entry?.pass?.order ?? "";
    card.dataset.passDue = Number.isFinite(entry?.pass?.due) ? String(entry.pass.due) : "";
    card.dataset.status = isComplete ? "complete" : "pending";
    const lectureName = entry?.lecture?.name || "Lecture";
    const title = document.createElement("div");
    title.className = "block-board-pass-title card-title";
    const titleInner = document.createElement("span");
    titleInner.className = "block-board-pass-title-inner";
    titleInner.textContent = lectureName;
    title.appendChild(titleInner);
    card.appendChild(title);
    const scheduleMarquee = () => {
      const container = title;
      const inner = titleInner;
      if (!container || !inner) return;
      const available = container.clientWidth;
      const content = inner.scrollWidth;
      const overflow = Math.round(content - available);
      if (available > 0 && overflow > 8) {
        const distance = overflow + 24;
        const duration = Math.min(22, Math.max(8, distance / 24));
        container.classList.add("is-animated");
        container.style.setProperty("--marquee-distance", `${distance}px`);
        container.style.setProperty("--marquee-duration", `${duration}s`);
      } else {
        container.classList.remove("is-animated");
        container.style.removeProperty("--marquee-distance");
        container.style.removeProperty("--marquee-duration");
      }
    };
    if (typeof requestAnimationFrame === "function") {
      requestAnimationFrame(scheduleMarquee);
    } else {
      setTimeout(scheduleMarquee, 0);
    }
    const passLabel = entry?.pass?.label || (entry?.pass?.order != null ? `Pass ${entry.pass.order}` : "Pass");
    const dueFullLabel = Number.isFinite(entry?.pass?.due) ? formatPassDueLabel(entry.pass.due) : "Unscheduled";
    const passOrder = document.createElement("span");
    passOrder.className = "block-board-pass-pill-order";
    passOrder.textContent = passLabel;
    card.appendChild(passOrder);
    const descriptionParts = [lectureName, passLabel];
    if (entry?.pass?.action) descriptionParts.push(entry.pass.action);
    if (dueFullLabel) descriptionParts.push(dueFullLabel);
    card.setAttribute("aria-label", descriptionParts.join(" \u2022 "));
    card.title = descriptionParts.join(" \u2022 ");
    card.addEventListener("dragstart", (event) => {
      if (!event.dataTransfer) return;
      const payload = {
        blockId: card.dataset.blockId,
        lectureId: card.dataset.lectureId,
        passOrder: Number(card.dataset.passOrder),
        due: card.dataset.passDue ? Number(card.dataset.passDue) : null
      };
      event.dataTransfer.effectAllowed = "move";
      event.dataTransfer.setData("application/json", JSON.stringify(payload));
      onDrag?.(payload);
    });
    return card;
  }
  function createDayColumn(dayTs) {
    const column = document.createElement("div");
    column.className = "block-board-day-column";
    column.dataset.day = String(dayTs);
    const header = document.createElement("div");
    header.className = "block-board-day-header";
    header.textContent = formatDay(dayTs);
    if (startOfDay2(Date.now()) === dayTs) {
      column.classList.add("today");
    }
    column.appendChild(header);
    const list = document.createElement("div");
    list.className = "block-board-day-list";
    column.appendChild(list);
    column.addEventListener("dragover", (event) => {
      event.preventDefault();
      column.classList.add("dropping");
    });
    column.addEventListener("dragleave", () => {
      column.classList.remove("dropping");
    });
    return column;
  }
  function scrollGridToToday(grid) {
    if (!grid) return;
    const todayColumn = grid.querySelector(".block-board-day-column.today");
    if (!todayColumn) return;
    if (grid.scrollWidth <= grid.clientWidth + 1) return;
    const apply = () => {
      const columnRect = todayColumn.getBoundingClientRect();
      const gridRect = grid.getBoundingClientRect();
      const relativeLeft = columnRect.left - gridRect.left + grid.scrollLeft;
      const halfWidth = Math.max(0, (grid.clientWidth - todayColumn.clientWidth) / 2);
      const maxScroll = Math.max(0, grid.scrollWidth - grid.clientWidth);
      const target = Math.max(0, Math.min(maxScroll, relativeLeft - halfWidth));
      if (typeof grid.scrollTo === "function") {
        grid.scrollTo({ left: target, behavior: "auto" });
      } else {
        grid.scrollLeft = target;
      }
    };
    if (typeof requestAnimationFrame === "function") {
      requestAnimationFrame(apply);
    } else {
      setTimeout(apply, 0);
    }
  }
  function sortPassEntries(entries) {
    return entries.slice().sort((a, b) => {
      const aComplete = Number.isFinite(a?.pass?.completedAt);
      const bComplete = Number.isFinite(b?.pass?.completedAt);
      if (aComplete !== bComplete) return aComplete ? 1 : -1;
      const orderA = Number.isFinite(a?.pass?.order) ? a.pass.order : Number.POSITIVE_INFINITY;
      const orderB = Number.isFinite(b?.pass?.order) ? b.pass.order : Number.POSITIVE_INFINITY;
      if (orderA !== orderB) return orderA - orderB;
      const nameA = a?.lecture?.name || "";
      const nameB = b?.lecture?.name || "";
      return nameA.localeCompare(nameB);
    });
  }
  async function updateLectureSchedule(lecture, updateFn) {
    const updated = updateFn(lecture);
    await persistLecture(updated);
  }
  function renderUrgentQueues(root, queues, handlers) {
    const wrapper = document.createElement("section");
    wrapper.className = "block-board-summary";
    const config = [
      { key: "today", label: "Today's To-Do", empty: "Nothing due today.", accent: "var(--blue)" },
      { key: "tomorrow", label: "Due Tomorrow", empty: "Nothing due tomorrow.", accent: "var(--yellow)" },
      { key: "overdue", label: "Overdue", empty: "No overdue passes. \u{1F389}", accent: "var(--rose)" }
    ];
    config.forEach(({ key, label, empty, accent }) => {
      const card = document.createElement("article");
      card.className = "block-board-summary-card";
      if (accent) card.style.setProperty("--summary-accent", accent);
      const header = document.createElement("div");
      header.className = "block-board-summary-header";
      const title = document.createElement("h3");
      title.className = "block-board-summary-title";
      title.textContent = label;
      header.appendChild(title);
      const entries = queues[key] || [];
      const count = document.createElement("span");
      count.className = "block-board-summary-count";
      count.textContent = String(entries.length);
      header.appendChild(count);
      card.appendChild(header);
      const list = document.createElement("div");
      list.className = "block-board-summary-list";
      if (!entries.length) {
        const emptyState = document.createElement("div");
        emptyState.className = "block-board-summary-empty";
        emptyState.textContent = empty || "Nothing queued.";
        list.appendChild(emptyState);
      } else {
        entries.forEach((entry) => {
          const chip = buildPassElement(entry, handlers.onComplete, handlers.onShift);
          list.appendChild(chip);
        });
      }
      card.appendChild(list);
      wrapper.appendChild(card);
    });
    root.appendChild(wrapper);
  }
  function buildDayAssignments(blockLectures, days) {
    const assignments = /* @__PURE__ */ new Map();
    blockLectures.forEach((lecture) => {
      const passes = Array.isArray(lecture?.passes) ? lecture.passes : [];
      passes.forEach((pass) => {
        if (!pass || Number.isFinite(pass.completedAt)) return;
        const due = Number.isFinite(pass.due) ? startOfDay2(pass.due) : null;
        const key = due != null ? due : "unscheduled";
        if (!assignments.has(key)) assignments.set(key, []);
        assignments.get(key).push({ lecture, pass });
      });
    });
    days.forEach((day) => {
      if (!assignments.has(day)) assignments.set(day, []);
    });
    const unscheduled = assignments.get("unscheduled");
    if (!unscheduled || !unscheduled.length) {
      assignments.delete("unscheduled");
    }
    return assignments;
  }
  function attachDropHandlers(column, blockEntries, refresh) {
    column.addEventListener("drop", async (event) => {
      event.preventDefault();
      column.classList.remove("dropping");
      const payloadRaw = event.dataTransfer?.getData("application/json");
      if (!payloadRaw) return;
      let payload;
      try {
        payload = JSON.parse(payloadRaw);
      } catch (err) {
        return;
      }
      const { lectureId, passOrder } = payload || {};
      const lecture = blockEntries.find((item) => String(item.lecture?.id) === String(lectureId))?.lecture;
      if (!lecture) return;
      const dayValue = column.dataset.day;
      const targetDay = dayValue ? Number(dayValue) : null;
      const newDue = targetDay != null ? targetDay + (payload?.due != null ? payload.due % DAY_MS2 : 9 * 60 * 60 * 1e3) : null;
      await updateLectureSchedule(lecture, (lec) => applyPassDueUpdate(lec, passOrder, newDue));
      await refresh({ full: true });
    });
  }
  function renderBlockBoardBlock(container, block, blockLectures, days, refresh, gridScrollState = /* @__PURE__ */ new Map()) {
    const boardState = ensureBoardState();
    const wrapper = document.createElement("section");
    wrapper.className = "block-board-block";
    wrapper.dataset.blockId = String(block?.blockId ?? "");
    if (block?.color) {
      wrapper.style.setProperty("--block-accent", block.color);
      wrapper.classList.add("has-accent");
    }
    const header = document.createElement("div");
    header.className = "block-board-block-header";
    const heading = document.createElement("div");
    heading.className = "block-board-block-heading";
    const title = document.createElement("h2");
    title.className = "block-board-block-title";
    title.textContent = block?.title || block?.name || `Block ${block?.blockId}`;
    if (block?.color) {
      title.style.setProperty("--block-accent", block.color);
      title.classList.add("has-accent");
    }
    heading.appendChild(title);
    const metaParts = [];
    const rangeText = blockRangeLabel(block);
    if (rangeText) metaParts.push(rangeText);
    const weekValue = Number(block?.weeks);
    if (Number.isFinite(weekValue) && weekValue > 0) {
      const weeks = Math.round(weekValue);
      metaParts.push(`${weeks} week${weeks === 1 ? "" : "s"}`);
    }
    const span = blockSpanDays(block);
    if (span) metaParts.push(`${span} day${span === 1 ? "" : "s"}`);
    if (metaParts.length) {
      const meta = document.createElement("div");
      meta.className = "block-board-block-meta";
      meta.textContent = metaParts.join(" \u2022 ");
      heading.appendChild(meta);
    }
    header.appendChild(heading);
    const controls = document.createElement("div");
    controls.className = "block-board-block-controls";
    const collapseBtn = document.createElement("button");
    collapseBtn.type = "button";
    collapseBtn.className = "btn secondary";
    const blockKey = String(block?.blockId ?? "");
    const isCollapsed = blockKey ? boardState.collapsedBlocks.includes(blockKey) : false;
    collapseBtn.textContent = isCollapsed ? "Expand" : "Minimize";
    collapseBtn.addEventListener("click", () => {
      if (!blockKey) return;
      const current = ensureBoardState();
      const nextCollapsed = new Set((current.collapsedBlocks || []).map(String));
      const manualExpanded = new Set((current.manualExpanded || []).map(String));
      const autoCollapsed = new Set((current.autoCollapsed || []).map(String));
      if (nextCollapsed.has(blockKey)) {
        nextCollapsed.delete(blockKey);
        manualExpanded.add(blockKey);
        autoCollapsed.delete(blockKey);
      } else {
        nextCollapsed.add(blockKey);
        manualExpanded.delete(blockKey);
        autoCollapsed.delete(blockKey);
      }
      setBlockBoardState({
        collapsedBlocks: Array.from(nextCollapsed),
        manualExpanded: Array.from(manualExpanded),
        autoCollapsed: Array.from(autoCollapsed)
      });
      refresh();
    });
    controls.appendChild(collapseBtn);
    const hiddenTimelineSet = new Set((boardState.hiddenTimelines || []).map((id) => String(id)));
    const timelineHidden = hiddenTimelineSet.has("__all__") || hiddenTimelineSet.has(blockKey);
    const timelineBtn = document.createElement("button");
    timelineBtn.type = "button";
    timelineBtn.className = "btn secondary";
    timelineBtn.textContent = timelineHidden ? "Show timeline" : "Hide timeline";
    timelineBtn.addEventListener("click", () => {
      if (!blockKey) return;
      const current = ensureBoardState();
      const nextHidden = new Set((current.hiddenTimelines || []).map((id) => String(id)));
      const manualTimeline = new Set((current.manualTimeline || []).map(String));
      const autoHidden = new Set((current.autoHidden || []).map(String));
      const hideAll = nextHidden.has("__all__");
      nextHidden.delete("__all__");
      if (timelineHidden) {
        nextHidden.delete(blockKey);
        manualTimeline.add(blockKey);
        autoHidden.delete(blockKey);
      } else {
        nextHidden.add(blockKey);
        manualTimeline.delete(blockKey);
        autoHidden.delete(blockKey);
      }
      if (hideAll) {
        nextHidden.add("__all__");
      }
      setBlockBoardState({
        hiddenTimelines: Array.from(nextHidden),
        manualTimeline: Array.from(manualTimeline),
        autoHidden: Array.from(autoHidden)
      });
      refresh();
    });
    controls.appendChild(timelineBtn);
    header.appendChild(controls);
    wrapper.appendChild(header);
    const assignments = buildDayAssignments(blockLectures, days);
    const unscheduledEntries = sortPassEntries(assignments.get("unscheduled") || []);
    assignments.delete("unscheduled");
    const blockEntries = [];
    assignments.forEach((entries) => {
      sortPassEntries(entries).forEach((entry) => blockEntries.push(entry));
    });
    unscheduledEntries.forEach((entry) => blockEntries.push(entry));
    if (!timelineHidden) {
      const timelineData = collectTimelineSegments(blockLectures, days);
      const timeline = document.createElement("div");
      timeline.className = "block-board-timeline";
      const timelineHeader = document.createElement("div");
      timelineHeader.className = "block-board-timeline-header";
      const timelineTitle = document.createElement("h3");
      timelineTitle.className = "block-board-timeline-title";
      timelineTitle.textContent = `Block Timeline \u2014 ${block?.title || block?.name || "Block"}`;
      timelineHeader.appendChild(timelineTitle);
      const spanCount = blockSpanDays(block) || days.length;
      const spanLabel = document.createElement("span");
      spanLabel.className = "block-board-timeline-span";
      spanLabel.textContent = `${spanCount} day${spanCount === 1 ? "" : "s"}`;
      timelineHeader.appendChild(spanLabel);
      timeline.appendChild(timelineHeader);
      const track = document.createElement("div");
      track.className = "block-board-timeline-track";
      const todayKey = startOfDay2(Date.now());
      timelineData.forEach(({ day, entries }) => {
        const column = document.createElement("div");
        column.className = "block-board-timeline-column";
        if (day === todayKey) {
          column.classList.add("is-today");
        }
        const date = new Date(day);
        const isoDate = Number.isFinite(day) ? date.toISOString().slice(0, 10) : "";
        const tooltip = isoDate ? `${isoDate} \u2022 ${entries.length} due` : `${date.toLocaleDateString()} \u2022 ${entries.length} due`;
        column.setAttribute("data-count", String(entries.length));
        const bar = document.createElement("div");
        bar.className = "block-board-timeline-bar";
        bar.title = tooltip;
        const count = entries.length;
        if (count > 0) {
          const hasCompleted = entries.some((entry) => entry.completed);
          if (hasCompleted) {
            bar.classList.add("has-complete");
          } else {
            bar.classList.add("is-pending");
          }
          const gap = 0;
          let segmentHeight = TIMELINE_BASE_UNIT_HEIGHT;
          const gapTotal = gap * Math.max(0, count - 1);
          let totalHeight = segmentHeight * count + gapTotal;
          if (totalHeight > TIMELINE_MAX_BAR_HEIGHT) {
            const available = Math.max(TIMELINE_MAX_BAR_HEIGHT - gapTotal, TIMELINE_MIN_SEGMENT_HEIGHT * count);
            segmentHeight = Math.max(TIMELINE_MIN_SEGMENT_HEIGHT, available / count);
            totalHeight = segmentHeight * count + gapTotal;
          }
          bar.style.height = `${Math.max(totalHeight, TIMELINE_MIN_SEGMENT_HEIGHT)}px`;
          entries.forEach((entry) => {
            const segment = document.createElement("div");
            segment.className = "block-board-timeline-segment";
            segment.style.setProperty("--segment-color", passColor(entry.order));
            segment.style.height = `${segmentHeight}px`;
            if (entry.completed) {
              segment.classList.add("is-complete");
            } else {
              segment.classList.add("is-pending");
            }
            bar.appendChild(segment);
          });
        } else {
          bar.classList.add("is-empty");
        }
        column.appendChild(bar);
        const label = document.createElement("div");
        label.className = "block-board-timeline-day";
        label.textContent = date.getDate();
        label.setAttribute("aria-hidden", "true");
        column.appendChild(label);
        if (tooltip) {
          column.setAttribute("aria-label", tooltip);
        }
        track.appendChild(column);
      });
      timeline.appendChild(track);
      wrapper.appendChild(timeline);
    }
    if (isCollapsed) {
      container.appendChild(wrapper);
      return;
    }
    if (unscheduledEntries.length) {
      const backlog = document.createElement("div");
      backlog.className = "block-board-backlog";
      const backlogTitle = document.createElement("h3");
      backlogTitle.className = "block-board-backlog-title";
      backlogTitle.textContent = "Needs a date";
      backlog.appendChild(backlogTitle);
      const backlogHint = document.createElement("p");
      backlogHint.className = "block-board-backlog-hint";
      backlogHint.textContent = "Drag a pass onto a day to schedule it.";
      backlog.appendChild(backlogHint);
      const backlogList = document.createElement("div");
      backlogList.className = "block-board-backlog-list";
      unscheduledEntries.forEach((entry) => {
        const card = createPassCard(entry);
        backlogList.appendChild(card);
      });
      backlog.appendChild(backlogList);
      wrapper.appendChild(backlog);
    }
    const board = document.createElement("div");
    board.className = "block-board-grid";
    days.forEach((day) => {
      const column = createDayColumn(day);
      const entries = sortPassEntries(assignments.get(day) || []);
      entries.forEach((entry) => {
        const card = createPassCard(entry);
        column.querySelector(".block-board-day-list").appendChild(card);
      });
      attachDropHandlers(column, blockEntries, refresh);
      board.appendChild(column);
    });
    wrapper.appendChild(board);
    const blockId = String(block?.blockId ?? "");
    if (blockId && !gridScrollState.has(blockId)) {
      scrollGridToToday(board);
    }
    container.appendChild(wrapper);
  }
  async function renderBlockBoard(container, refresh) {
    if (!container) return;
    const scrollSnapshot = captureBoardScrollState(container);
    container.innerHTML = "";
    container.classList.add("block-board-container");
    const boardState = ensureBoardState();
    const [catalog, lectures] = await Promise.all([
      loadCatalog(),
      fetchLectures2()
    ]);
    let settings = null;
    try {
      settings = await fetchSettings();
    } catch (err) {
      settings = null;
    }
    const { blocks } = catalog;
    setPassColorPalette(settings?.plannerDefaults?.passColors);
    if (Array.isArray(blocks) && blocks.length) {
      const validBlockIds = /* @__PURE__ */ new Set();
      blocks.forEach((block) => {
        if (!block || block.blockId == null) return;
        validBlockIds.add(String(block.blockId));
      });
      const normalizedCollapsed = new Set((boardState.collapsedBlocks || []).map((id) => String(id)));
      const hideAllTimelines = Array.isArray(boardState.hiddenTimelines) ? boardState.hiddenTimelines.includes("__all__") : false;
      const normalizedHidden = new Set(
        (boardState.hiddenTimelines || []).map((id) => String(id)).filter((id) => id !== "__all__")
      );
      const manualExpanded = new Set((boardState.manualExpanded || []).map((id) => String(id)));
      const manualTimeline = new Set((boardState.manualTimeline || []).map((id) => String(id)));
      const autoCollapsed = new Set((boardState.autoCollapsed || []).map((id) => String(id)));
      const autoHidden = new Set((boardState.autoHidden || []).map((id) => String(id)));
      let manualExpandedChanged = false;
      let manualTimelineChanged = false;
      let autoCollapsedChanged = false;
      let autoHiddenChanged = false;
      manualExpanded.forEach((id) => {
        if (!validBlockIds.has(id)) {
          manualExpanded.delete(id);
          manualExpandedChanged = true;
        }
      });
      manualTimeline.forEach((id) => {
        if (!validBlockIds.has(id)) {
          manualTimeline.delete(id);
          manualTimelineChanged = true;
        }
      });
      autoCollapsed.forEach((id) => {
        if (!validBlockIds.has(id)) {
          autoCollapsed.delete(id);
          autoCollapsedChanged = true;
        }
      });
      autoHidden.forEach((id) => {
        if (!validBlockIds.has(id)) {
          autoHidden.delete(id);
          autoHiddenChanged = true;
        }
      });
      const latestBlockId = resolveLatestBlockId(blocks);
      let collapsedChanged = false;
      let hiddenChanged = false;
      blocks.forEach((block) => {
        if (!block || block.blockId == null) return;
        const blockId = String(block.blockId);
        const isLatest = latestBlockId != null && blockId === latestBlockId;
        const keepOpen = isLatest || manualExpanded.has(blockId);
        if (keepOpen) {
          if (normalizedCollapsed.has(blockId) && autoCollapsed.has(blockId)) {
            normalizedCollapsed.delete(blockId);
            collapsedChanged = true;
          }
          if (autoCollapsed.delete(blockId)) {
            autoCollapsedChanged = true;
          }
        } else if (!normalizedCollapsed.has(blockId)) {
          normalizedCollapsed.add(blockId);
          collapsedChanged = true;
          if (!autoCollapsed.has(blockId)) {
            autoCollapsed.add(blockId);
            autoCollapsedChanged = true;
          }
        }
        if (!hideAllTimelines) {
          const manualShow = manualTimeline.has(blockId);
          const shouldAutoHide = !keepOpen && !manualShow;
          if (shouldAutoHide) {
            if (!normalizedHidden.has(blockId)) {
              normalizedHidden.add(blockId);
              hiddenChanged = true;
            }
            if (!autoHidden.has(blockId)) {
              autoHidden.add(blockId);
              autoHiddenChanged = true;
            }
          } else {
            const wasAutoHidden = autoHidden.has(blockId);
            if (wasAutoHidden && normalizedHidden.has(blockId) && (manualShow || keepOpen)) {
              normalizedHidden.delete(blockId);
              hiddenChanged = true;
            }
            if (wasAutoHidden) {
              autoHidden.delete(blockId);
              autoHiddenChanged = true;
            }
          }
        }
      });
      const collapsedArr = Array.from(normalizedCollapsed);
      const hiddenArr = hideAllTimelines ? ["__all__"] : Array.from(normalizedHidden);
      const manualExpandedArr = Array.from(manualExpanded);
      const manualTimelineArr = Array.from(manualTimeline);
      const autoCollapsedArr = Array.from(autoCollapsed);
      const autoHiddenArr = Array.from(autoHidden);
      const arraysEqual3 = (a = [], b = []) => {
        if (!Array.isArray(a) || !Array.isArray(b)) return false;
        if (a.length !== b.length) return false;
        for (let i = 0; i < a.length; i += 1) {
          if (a[i] !== b[i]) return false;
        }
        return true;
      };
      const patch = {};
      if (!arraysEqual3(boardState.collapsedBlocks || [], collapsedArr)) {
        patch.collapsedBlocks = collapsedArr;
      }
      if (!arraysEqual3(boardState.hiddenTimelines || [], hiddenArr)) {
        patch.hiddenTimelines = hiddenArr;
      }
      if (manualExpandedChanged || !arraysEqual3(boardState.manualExpanded || [], manualExpandedArr)) {
        patch.manualExpanded = manualExpandedArr;
      }
      if (manualTimelineChanged || !arraysEqual3(boardState.manualTimeline || [], manualTimelineArr)) {
        patch.manualTimeline = manualTimelineArr;
      }
      if (autoCollapsedChanged || !arraysEqual3(boardState.autoCollapsed || [], autoCollapsedArr)) {
        patch.autoCollapsed = autoCollapsedArr;
      }
      if (autoHiddenChanged || !arraysEqual3(boardState.autoHidden || [], autoHiddenArr)) {
        patch.autoHidden = autoHiddenArr;
      }
      if (Object.keys(patch).length) {
        setBlockBoardState(patch);
        if (patch.collapsedBlocks) boardState.collapsedBlocks = patch.collapsedBlocks;
        if (patch.hiddenTimelines) boardState.hiddenTimelines = patch.hiddenTimelines;
        if (patch.manualExpanded) boardState.manualExpanded = patch.manualExpanded;
        if (patch.manualTimeline) boardState.manualTimeline = patch.manualTimeline;
        if (patch.autoCollapsed) boardState.autoCollapsed = patch.autoCollapsed;
        if (patch.autoHidden) boardState.autoHidden = patch.autoHidden;
      }
    }
    const fallbackDays = collectDefaultBoardDays();
    const refreshBoard = async (options = {}) => {
      if (options && options.full && typeof refresh === "function") {
        await refresh();
      } else {
        await renderBlockBoard(container, refresh);
      }
    };
    const queues = groupLectureQueues(lectures);
    const urgentHost = document.createElement("div");
    renderUrgentQueues(urgentHost, queues, {
      onComplete: async (entry) => {
        const passOrder = entry?.pass?.order;
        const lecture = entry?.lecture;
        if (!lecture || !Number.isFinite(passOrder)) return;
        const passIndex = Array.isArray(lecture.passes) ? lecture.passes.findIndex((pass) => pass?.order === passOrder) : -1;
        if (passIndex < 0) return;
        await updateLectureSchedule(lecture, (lec) => markPassCompleted(lec, passIndex));
        await refreshBoard({ full: true });
      },
      onShift: async (entry, mode) => {
        if (!entry?.lecture) return;
        const lecture = entry.lecture;
        const passOrder = Number(entry?.pass?.order);
        if (!Number.isFinite(passOrder)) return;
        const lectureLabel = lecture?.name || `Lecture ${lecture?.id ?? ""}`;
        const passLabel = entry?.pass?.label || (Number.isFinite(passOrder) ? `Pass ${passOrder}` : "Pass");
        const result = await openShiftDialog(mode, {
          description: `${lectureLabel} \u2022 ${passLabel}`,
          defaultUnit: "days",
          defaultValue: 1
        });
        if (!result || !Number.isFinite(result.minutes) || result.minutes <= 0) return;
        const delta = mode === "push" ? result.minutes : -result.minutes;
        try {
          await updateLectureSchedule(lecture, (lec) => shiftPassesForScope(lec, passOrder, delta, result.scope));
          await refreshBoard({ full: true });
        } catch (err) {
          console.error("Failed to shift pass timing", err);
        }
      }
    });
    container.appendChild(urgentHost);
    const previousGridScroll = /* @__PURE__ */ new Map();
    const gridEntries = Array.isArray(scrollSnapshot?.gridScroll) ? scrollSnapshot.gridScroll : [];
    gridEntries.forEach((entry) => {
      if (!entry) return;
      const blockId = entry?.blockId;
      if (blockId == null) return;
      previousGridScroll.set(String(blockId), Number(entry?.left) || 0);
    });
    const blockList = document.createElement("div");
    blockList.className = "block-board-list";
    const lecturesByBlock = /* @__PURE__ */ new Map();
    lectures.forEach((lecture) => {
      const key = String(lecture?.blockId ?? "");
      if (!lecturesByBlock.has(key)) lecturesByBlock.set(key, []);
      lecturesByBlock.get(key).push(lecture);
    });
    blocks.forEach((block) => {
      const blockLectures = lecturesByBlock.get(String(block.blockId)) || [];
      const blockDays = collectDaysForBlock(block, blockLectures);
      const daysForBlock = blockDays.length ? blockDays : fallbackDays;
      renderBlockBoardBlock(blockList, block, blockLectures, daysForBlock, refreshBoard, previousGridScroll);
    });
    container.appendChild(blockList);
    restoreBoardScrollState(container, scrollSnapshot);
  }
  function captureBoardScrollState(container) {
    if (!container || typeof container !== "object") return null;
    const dayScroll = [];
    container.querySelectorAll(".block-board-day-list").forEach((list) => {
      const column = list.closest(".block-board-day-column");
      const block = list.closest(".block-board-block");
      const blockId = block?.dataset?.blockId ?? "";
      const day = column?.dataset?.day ?? "";
      if (blockId && day) {
        dayScroll.push({ key: `${blockId}::${day}`, top: list.scrollTop });
      }
    });
    const gridScroll = [];
    container.querySelectorAll(".block-board-block").forEach((blockEl) => {
      const blockId = blockEl?.dataset?.blockId ?? "";
      if (!blockId) return;
      const grid = blockEl.querySelector(".block-board-grid");
      if (!grid) return;
      gridScroll.push({ blockId, left: grid.scrollLeft });
    });
    const snapshot = {
      containerTop: container.scrollTop,
      containerLeft: container.scrollLeft,
      dayScroll,
      gridScroll,
      windowX: typeof window !== "undefined" ? window.scrollX : null,
      windowY: typeof window !== "undefined" ? window.scrollY : null
    };
    return snapshot;
  }
  function restoreBoardScrollState(container, snapshot) {
    if (!container || !snapshot) return;
    const apply = () => {
      if (typeof container.scrollTo === "function") {
        container.scrollTo(snapshot.containerLeft ?? 0, snapshot.containerTop ?? 0);
      } else {
        container.scrollLeft = snapshot.containerLeft ?? 0;
        container.scrollTop = snapshot.containerTop ?? 0;
      }
      if (snapshot.windowX != null && snapshot.windowY != null && typeof window !== "undefined") {
        const nav = typeof navigator !== "undefined" ? navigator : typeof window.navigator !== "undefined" ? window.navigator : null;
        const ua = nav && typeof nav.userAgent === "string" ? nav.userAgent.toLowerCase() : "";
        const shouldRestoreWindow = !ua.includes("jsdom") && typeof window.scrollTo === "function";
        if (shouldRestoreWindow) {
          try {
            window.scrollTo(snapshot.windowX, snapshot.windowY);
          } catch (err) {
          }
        }
      }
      const dayEntries = Array.isArray(snapshot.dayScroll) ? snapshot.dayScroll : [];
      const dayScrollMap = new Map(dayEntries.map((entry) => [entry.key, entry.top]));
      if (dayScrollMap.size) {
        container.querySelectorAll(".block-board-block").forEach((blockEl) => {
          const blockId = blockEl?.dataset?.blockId ?? "";
          if (!blockId) return;
          blockEl.querySelectorAll(".block-board-day-column").forEach((column) => {
            const day = column?.dataset?.day ?? "";
            if (!day) return;
            const key = `${blockId}::${day}`;
            if (!dayScrollMap.has(key)) return;
            const list = column.querySelector(".block-board-day-list");
            if (list) list.scrollTop = dayScrollMap.get(key) ?? 0;
          });
        });
      }
      const gridEntries = Array.isArray(snapshot.gridScroll) ? snapshot.gridScroll : [];
      if (gridEntries.length) {
        const gridScrollMap = new Map(gridEntries.map((entry) => [String(entry.blockId ?? ""), Number(entry.left) || 0]));
        container.querySelectorAll(".block-board-block").forEach((blockEl) => {
          const blockId = blockEl?.dataset?.blockId ?? "";
          if (!blockId || !gridScrollMap.has(blockId)) return;
          const grid = blockEl.querySelector(".block-board-grid");
          if (!grid) return;
          const target = gridScrollMap.get(blockId);
          if (typeof grid.scrollTo === "function") {
            grid.scrollTo({ left: target, behavior: "auto" });
          } else {
            grid.scrollLeft = target;
          }
        });
      }
    };
    if (typeof requestAnimationFrame === "function") {
      requestAnimationFrame(apply);
    } else {
      setTimeout(apply, 0);
    }
  }

  // js/ui/components/exams.js
  var DEFAULT_SECONDS = 60;
  var CSV_MAX_OPTIONS = 8;
  var CSV_HEADERS = (() => {
    const base = ["type", "examTitle", "timerMode", "secondsPerQuestion", "stem"];
    for (let i = 1; i <= CSV_MAX_OPTIONS; i += 1) {
      base.push(`option${i}`);
      base.push(`option${i}Correct`);
    }
    base.push("explanation", "tags", "media");
    return base;
  })();
  var CSV_ROW_META = "meta";
  var CSV_ROW_QUESTION = "question";
  var CSV_EXPLANATION_INDEX = CSV_HEADERS.indexOf("explanation");
  var CSV_TAGS_INDEX = CSV_HEADERS.indexOf("tags");
  var CSV_MEDIA_INDEX = CSV_HEADERS.indexOf("media");
  function csvOptionIndex(optionNumber) {
    return 5 + (optionNumber - 1) * 2;
  }
  function csvOptionCorrectIndex(optionNumber) {
    return csvOptionIndex(optionNumber) + 1;
  }
  var timerHandles = /* @__PURE__ */ new WeakMap();
  var keyHandler = null;
  var keyHandlerSession = null;
  var lastExamStatusMessage = "";
  function sanitizeRichText(value) {
    const raw = value == null ? "" : String(value);
    if (!raw) return "";
    const looksHtml = /<([a-z][^>]*>)/i.test(raw);
    const normalized2 = looksHtml ? raw : raw.replace(/\r?\n/g, "<br>");
    const sanitized = sanitizeHtml(normalized2);
    return isEmptyHtml(sanitized) ? "" : sanitized;
  }
  function ensureArrayTags(tags) {
    if (!Array.isArray(tags)) {
      if (tags == null) return [];
      if (typeof tags === "string") {
        return tags.split(/[|,]/).map((tag) => tag.trim()).filter(Boolean);
      }
      return [];
    }
    return tags.map((tag) => String(tag).trim()).filter(Boolean);
  }
  function parseTagString(tags) {
    if (!tags) return [];
    return String(tags).split(/[|,]/).map((tag) => tag.trim()).filter(Boolean);
  }
  function parseBooleanFlag(value) {
    if (value == null) return false;
    const str = String(value).trim().toLowerCase();
    return ["true", "1", "yes", "y", "correct"].includes(str);
  }
  function csvEscape(value) {
    const str = value == null ? "" : String(value);
    if (!str) return "";
    if (/["]/.test(str) || /[\n\r,]/.test(str)) {
      return `"${str.replace(/"/g, '""')}"`;
    }
    return str;
  }
  function downloadBlob(blob, filename) {
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }
  function scorePercentage(result) {
    if (!result || !Number.isFinite(result.correct) || !Number.isFinite(result.total) || result.total <= 0) {
      return null;
    }
    return Math.round(result.correct / result.total * 100);
  }
  function scoreBadgeClass(pct) {
    if (!Number.isFinite(pct)) return "neutral";
    if (pct >= 85) return "good";
    if (pct >= 70) return "warn";
    return "bad";
  }
  function createScoreBadge(result, label) {
    const pct = scorePercentage(result);
    const badge = document.createElement("span");
    badge.className = ["exam-score-badge", `exam-score-badge--${scoreBadgeClass(pct)}`].join(" ");
    if (label) {
      const labelEl = document.createElement("span");
      labelEl.className = "exam-score-badge-label";
      labelEl.textContent = label;
      badge.appendChild(labelEl);
    }
    const value = document.createElement("span");
    value.className = "exam-score-badge-value";
    if (pct == null) {
      value.textContent = "\u2014";
    } else {
      value.textContent = `${pct}%`;
    }
    badge.appendChild(value);
    return badge;
  }
  function setTimerElement(sess, element) {
    if (!sess) return;
    sess.__timerElement = element || null;
    if (element) {
      updateTimerElement(sess);
    }
  }
  function updateTimerElement(sess) {
    if (!sess) return;
    const el = sess.__timerElement;
    if (!el) return;
    const remaining = typeof sess.remainingMs === "number" ? Math.max(0, sess.remainingMs) : totalExamTimeMs(sess.exam);
    el.textContent = formatCountdown(remaining);
  }
  function ensureQuestionStats(sess) {
    const questionCount = sess?.exam?.questions?.length || 0;
    if (!sess) return;
    if (!Array.isArray(sess.questionStats)) {
      sess.questionStats = Array.from({ length: questionCount }, () => ({
        timeMs: 0,
        changes: [],
        enteredAt: null,
        initialAnswer: null,
        initialAnswerAt: null
      }));
      return;
    }
    if (sess.questionStats.length !== questionCount) {
      const next = Array.from({ length: questionCount }, (_, idx) => {
        const prev = sess.questionStats[idx] || {};
        return {
          timeMs: Number.isFinite(prev.timeMs) ? prev.timeMs : 0,
          changes: Array.isArray(prev.changes) ? [...prev.changes] : [],
          enteredAt: null,
          initialAnswer: prev.initialAnswer ?? null,
          initialAnswerAt: prev.initialAnswerAt ?? null
        };
      });
      sess.questionStats = next;
      return;
    }
    sess.questionStats.forEach((stat) => {
      if (!stat) return;
      if (!Array.isArray(stat.changes)) stat.changes = [];
      if (!Number.isFinite(stat.timeMs)) stat.timeMs = 0;
      if (stat.enteredAt == null) stat.enteredAt = null;
      if (!("initialAnswer" in stat)) stat.initialAnswer = null;
      if (!("initialAnswerAt" in stat)) stat.initialAnswerAt = null;
    });
  }
  function beginQuestionTiming(sess, idx) {
    if (!sess || sess.mode !== "taking") return;
    ensureQuestionStats(sess);
    const stat = sess.questionStats?.[idx];
    if (!stat) return;
    if (stat.enteredAt == null) {
      stat.enteredAt = Date.now();
    }
  }
  function finalizeQuestionTiming(sess, idx) {
    if (!sess || sess.mode !== "taking") return;
    ensureQuestionStats(sess);
    const stat = sess.questionStats?.[idx];
    if (!stat || stat.enteredAt == null) return;
    const now = Date.now();
    const delta = Math.max(0, now - stat.enteredAt);
    stat.timeMs = (Number.isFinite(stat.timeMs) ? stat.timeMs : 0) + delta;
    stat.enteredAt = null;
  }
  function finalizeActiveQuestionTiming(sess) {
    if (!sess || typeof sess.idx !== "number") return;
    finalizeQuestionTiming(sess, sess.idx);
  }
  function ensureScrollPositions(sess) {
    if (!sess) return;
    if (!sess.scrollPositions || typeof sess.scrollPositions !== "object") {
      sess.scrollPositions = {};
    }
  }
  function resolveScrollContainer(root) {
    const hasDocument = typeof document !== "undefined";
    if (root && typeof root.closest === "function") {
      const scoped = root.closest("main");
      if (scoped) return scoped;
    }
    if (hasDocument) {
      const main = document.querySelector("main");
      if (main) return main;
    }
    if (typeof window !== "undefined") return window;
    return null;
  }
  function isWindowScroller(scroller) {
    return typeof window !== "undefined" && scroller === window;
  }
  function readScrollPosition(scroller) {
    if (!scroller) return 0;
    if (isWindowScroller(scroller)) {
      return window.scrollY || window.pageYOffset || 0;
    }
    return scroller.scrollTop || 0;
  }
  function applyScrollPosition(scroller, value) {
    if (!scroller) return;
    const top = Number.isFinite(value) ? value : 0;
    if (isWindowScroller(scroller)) {
      if (typeof window.scrollTo === "function") {
        window.scrollTo({ left: 0, top, behavior: "auto" });
      }
      return;
    }
    if (typeof scroller.scrollTo === "function") {
      scroller.scrollTo({ left: 0, top, behavior: "auto" });
    } else {
      scroller.scrollTop = top;
    }
  }
  function storeScrollPosition(sess, idx, value) {
    if (!sess || typeof idx !== "number") return;
    ensureScrollPositions(sess);
    const numeric = Number.isFinite(value) ? value : 0;
    sess.scrollPositions[idx] = numeric;
  }
  function getStoredScroll(sess, idx) {
    if (!sess || typeof idx !== "number") return null;
    const store2 = sess.scrollPositions;
    if (!store2 || typeof store2 !== "object") return null;
    const value = store2[idx];
    return Number.isFinite(value) ? value : null;
  }
  function navigateToQuestion(sess, nextIdx, render) {
    if (!sess || typeof nextIdx !== "number") return;
    const total = sess.exam?.questions?.length || 0;
    if (!total) return;
    const clamped = Math.min(Math.max(nextIdx, 0), Math.max(0, total - 1));
    if (clamped === sess.idx) return;
    if (typeof sess.idx === "number") {
      const scroller = resolveScrollContainer();
      const scrollPos = readScrollPosition(scroller);
      storeScrollPosition(sess, sess.idx, scrollPos);
    }
    if (sess.mode === "taking") {
      finalizeActiveQuestionTiming(sess);
    }
    sess.idx = clamped;
    if (sess.mode === "taking") {
      beginQuestionTiming(sess, clamped);
    }
    render();
  }
  function recordAnswerChange(sess, idx, question, nextAnswer) {
    if (!sess || sess.mode !== "taking") return;
    ensureQuestionStats(sess);
    const stat = sess.questionStats?.[idx];
    if (!stat) return;
    const prev = sess.answers?.[idx];
    if (prev === nextAnswer) return;
    if (prev == null) {
      if (nextAnswer != null && stat.initialAnswer == null) {
        stat.initialAnswer = nextAnswer;
        stat.initialAnswerAt = Date.now();
      }
      return;
    }
    const change = {
      at: Date.now(),
      from: prev ?? null,
      to: nextAnswer ?? null
    };
    if (prev != null) change.fromCorrect = prev === question.answer;
    if (nextAnswer != null) change.toCorrect = nextAnswer === question.answer;
    if (!Array.isArray(stat.changes)) stat.changes = [];
    stat.changes.push(change);
  }
  function snapshotQuestionStats(sess) {
    ensureQuestionStats(sess);
    return (sess.questionStats || []).map((stat) => ({
      timeMs: Number.isFinite(stat?.timeMs) ? stat.timeMs : 0,
      changes: Array.isArray(stat?.changes) ? stat.changes.map((change) => ({ ...change })) : [],
      initialAnswer: stat?.initialAnswer ?? null,
      initialAnswerAt: stat?.initialAnswerAt ?? null
    }));
  }
  function extractAnswerSequence(stat, finalAnswer) {
    const sequence = [];
    const push = (value) => {
      if (value == null) return;
      if (sequence[sequence.length - 1] === value) return;
      sequence.push(value);
    };
    if (stat && stat.initialAnswer != null) {
      push(stat.initialAnswer);
    }
    const changes = Array.isArray(stat?.changes) ? stat.changes : [];
    changes.forEach((change) => {
      if (!change) return;
      if (change.to != null) push(change.to);
    });
    if (finalAnswer != null) {
      push(finalAnswer);
    }
    return sequence;
  }
  function analyzeAnswerChange(stat, question, finalAnswer) {
    if (!question) {
      return {
        initialAnswer: null,
        finalAnswer: null,
        initialCorrect: null,
        finalCorrect: null,
        changed: false,
        direction: null,
        switched: false,
        sequence: []
      };
    }
    const answerId = question.answer;
    const sequence = extractAnswerSequence(stat, finalAnswer);
    const initialAnswer = sequence.length ? sequence[0] : stat?.initialAnswer ?? null;
    const resolvedFinalAnswer = sequence.length ? sequence[sequence.length - 1] : finalAnswer ?? null;
    const initialCorrect = initialAnswer != null ? initialAnswer === answerId : null;
    const finalCorrect = resolvedFinalAnswer != null ? resolvedFinalAnswer === answerId : null;
    const switched = sequence.length > 1;
    const changed = switched && initialAnswer != null && resolvedFinalAnswer != null && initialAnswer !== resolvedFinalAnswer;
    let direction = null;
    if (changed) {
      if (initialCorrect === true && finalCorrect === false) {
        direction = "right-to-wrong";
      } else if (initialCorrect === false && finalCorrect === true) {
        direction = "wrong-to-right";
      } else {
        direction = "neutral";
      }
    }
    return {
      initialAnswer,
      finalAnswer: resolvedFinalAnswer,
      initialCorrect,
      finalCorrect,
      changed,
      direction,
      switched,
      sequence
    };
  }
  function summarizeAnswerChanges(questionStats, exam, answers = {}) {
    let rightToWrong = 0;
    let wrongToRight = 0;
    let switched = 0;
    let endedDifferent = 0;
    questionStats.forEach((stat, idx) => {
      const question = exam?.questions?.[idx];
      if (!question) return;
      const finalAnswer = answers[idx];
      const details = analyzeAnswerChange(stat, question, finalAnswer);
      if (details.switched) {
        switched += 1;
      }
      if (details.changed) {
        endedDifferent += 1;
        if (details.direction === "right-to-wrong") rightToWrong += 1;
        if (details.direction === "wrong-to-right") wrongToRight += 1;
      }
    });
    return {
      rightToWrong,
      wrongToRight,
      switched,
      endedDifferent,
      returnedToOriginal: Math.max(0, switched - endedDifferent),
      totalChanges: switched
    };
  }
  function clone5(value) {
    return value != null ? deepClone(value) : value;
  }
  function totalExamTimeMs(exam) {
    const seconds = typeof exam.secondsPerQuestion === "number" ? exam.secondsPerQuestion : DEFAULT_SECONDS;
    return seconds * (exam.questions?.length || 0) * 1e3;
  }
  function stopTimer(sess) {
    finalizeActiveQuestionTiming(sess);
    const handle = timerHandles.get(sess);
    if (handle) {
      clearInterval(handle);
      timerHandles.delete(sess);
    }
    if (sess?.startedAt) {
      const now = Date.now();
      const delta = Math.max(0, now - sess.startedAt);
      sess.elapsedMs = (sess.elapsedMs || 0) + delta;
      if (sess.exam?.timerMode === "timed" && typeof sess.remainingMs === "number") {
        sess.remainingMs = Math.max(0, sess.remainingMs - delta);
      }
      sess.startedAt = null;
      updateTimerElement(sess);
    }
  }
  function ensureTimer(sess, render) {
    if (!sess || sess.mode !== "taking" || sess.exam.timerMode !== "timed") return;
    if (timerHandles.has(sess)) return;
    if (typeof sess.remainingMs !== "number") {
      sess.remainingMs = totalExamTimeMs(sess.exam);
    }
    if (typeof sess.elapsedMs !== "number") sess.elapsedMs = 0;
    sess.startedAt = Date.now();
    const handle = setInterval(() => {
      const now = Date.now();
      const last = sess.startedAt || now;
      const delta = Math.max(0, now - last);
      sess.startedAt = now;
      sess.elapsedMs = (sess.elapsedMs || 0) + delta;
      sess.remainingMs = Math.max(0, (sess.remainingMs ?? 0) - delta);
      if (sess.remainingMs <= 0) {
        stopTimer(sess);
        finalizeExam(sess, render, { autoSubmit: true });
      } else {
        updateTimerElement(sess);
      }
    }, 1e3);
    timerHandles.set(sess, handle);
  }
  function teardownKeyboardNavigation() {
    if (keyHandler) {
      window.removeEventListener("keydown", keyHandler);
      keyHandler = null;
      keyHandlerSession = null;
    }
  }
  function setupKeyboardNavigation(sess, render) {
    if (!sess || sess.mode === "summary") {
      teardownKeyboardNavigation();
      return;
    }
    if (keyHandler && keyHandlerSession === sess) return;
    teardownKeyboardNavigation();
    keyHandlerSession = sess;
    keyHandler = (event) => {
      if (event.defaultPrevented) return;
      const target = event.target;
      if (target instanceof HTMLElement) {
        const tag = target.tagName;
        if (tag === "INPUT" || tag === "TEXTAREA" || tag === "SELECT" || target.isContentEditable) return;
      }
      if (event.key === "ArrowRight") {
        if (sess.idx < sess.exam.questions.length - 1) {
          event.preventDefault();
          navigateToQuestion(sess, sess.idx + 1, render);
        }
      } else if (event.key === "ArrowLeft") {
        if (sess.idx > 0) {
          event.preventDefault();
          navigateToQuestion(sess, sess.idx - 1, render);
        }
      }
    };
    window.addEventListener("keydown", keyHandler);
  }
  function formatCountdown(ms) {
    const totalSeconds = Math.max(0, Math.ceil(ms / 1e3));
    const hours = Math.floor(totalSeconds / 3600);
    const minutes = Math.floor(totalSeconds % 3600 / 60);
    const seconds = totalSeconds % 60;
    if (hours > 0) {
      return [hours, minutes, seconds].map((val) => String(val).padStart(2, "0")).join(":");
    }
    return `${String(minutes).padStart(2, "0")}:${String(seconds).padStart(2, "0")}`;
  }
  function currentElapsedMs(sess) {
    const base = sess?.elapsedMs || 0;
    if (sess?.startedAt) {
      return base + Math.max(0, Date.now() - sess.startedAt);
    }
    return base;
  }
  function slugify2(text) {
    const lowered = (text || "").toLowerCase();
    const normalized2 = lowered.replace(/[^a-z0-9]+/g, "-").replace(/^-+|-+$/g, "");
    return normalized2 || "exam";
  }
  function triggerExamDownload(exam) {
    try {
      const data = JSON.stringify(exam, null, 2);
      const blob = new Blob([data], { type: "application/json" });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = `${slugify2(exam.examTitle || "exam")}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      setTimeout(() => URL.revokeObjectURL(url), 0);
      return true;
    } catch (err) {
      console.warn("Failed to export exam", err);
      return false;
    }
  }
  function examToCsv(exam) {
    const rows = [];
    rows.push(CSV_HEADERS);
    const metaRow = new Array(CSV_HEADERS.length).fill("");
    metaRow[0] = CSV_ROW_META;
    metaRow[1] = exam.examTitle || "";
    metaRow[2] = exam.timerMode === "timed" ? "timed" : "untimed";
    metaRow[3] = Number.isFinite(exam.secondsPerQuestion) ? String(exam.secondsPerQuestion) : String(DEFAULT_SECONDS);
    rows.push(metaRow);
    (exam.questions || []).forEach((question) => {
      const row = new Array(CSV_HEADERS.length).fill("");
      row[0] = CSV_ROW_QUESTION;
      row[4] = question.stem || "";
      const options = Array.isArray(question.options) ? question.options : [];
      options.slice(0, CSV_MAX_OPTIONS).forEach((opt, idx) => {
        const optionCol = csvOptionIndex(idx + 1);
        const correctCol = csvOptionCorrectIndex(idx + 1);
        row[optionCol] = opt.text || "";
        row[correctCol] = opt.id === question.answer ? "TRUE" : "";
      });
      if (CSV_EXPLANATION_INDEX >= 0) row[CSV_EXPLANATION_INDEX] = question.explanation || "";
      if (CSV_TAGS_INDEX >= 0) row[CSV_TAGS_INDEX] = Array.isArray(question.tags) ? question.tags.join(" | ") : "";
      if (CSV_MEDIA_INDEX >= 0) row[CSV_MEDIA_INDEX] = question.media || "";
      rows.push(row);
    });
    return rows.map((row) => row.map(csvEscape).join(",")).join("\r\n");
  }
  function downloadExamCsv(exam) {
    const csv = examToCsv(exam);
    const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
    downloadBlob(blob, `${slugify2(exam.examTitle || "exam")}.csv`);
  }
  function downloadExamCsvTemplate() {
    const sampleQuestion = createBlankQuestion();
    sampleQuestion.stem = sanitizeRichText("What is the capital of France?");
    sampleQuestion.options = [
      { id: uid(), text: sanitizeRichText("Paris") },
      { id: uid(), text: sanitizeRichText("London") },
      { id: uid(), text: sanitizeRichText("Rome") }
    ];
    sampleQuestion.answer = sampleQuestion.options[0]?.id || "";
    sampleQuestion.explanation = sanitizeRichText("Paris is the capital and most populous city of France.");
    sampleQuestion.tags = ["geography"];
    const { exam } = ensureExamShape({
      examTitle: "Example Exam",
      timerMode: "untimed",
      secondsPerQuestion: DEFAULT_SECONDS,
      questions: [sampleQuestion],
      results: []
    });
    const csv = examToCsv(exam);
    const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
    downloadBlob(blob, "exam-template.csv");
  }
  function parseCsv(text) {
    const rows = [];
    let current = "";
    let row = [];
    let inQuotes = false;
    for (let i = 0; i < text.length; i += 1) {
      const char = text[i];
      if (inQuotes) {
        if (char === '"') {
          if (text[i + 1] === '"') {
            current += '"';
            i += 1;
          } else {
            inQuotes = false;
          }
        } else {
          current += char;
        }
      } else if (char === '"') {
        inQuotes = true;
      } else if (char === ",") {
        row.push(current);
        current = "";
      } else if (char === "\r") {
        row.push(current);
        rows.push(row);
        row = [];
        current = "";
        if (text[i + 1] === "\n") i += 1;
      } else if (char === "\n") {
        row.push(current);
        rows.push(row);
        row = [];
        current = "";
      } else {
        current += char;
      }
    }
    row.push(current);
    if (row.length > 1 || row[0].trim()) {
      rows.push(row);
    }
    return rows.filter((r) => !(r.length === 1 && r[0].trim() === ""));
  }
  function examFromCsv(text) {
    const rows = parseCsv(text);
    if (!rows.length) {
      throw new Error("Empty CSV");
    }
    const header = rows[0].map((col) => col.trim());
    const indexMap = /* @__PURE__ */ new Map();
    header.forEach((name, idx) => {
      if (!name) return;
      indexMap.set(name, idx);
    });
    const getCell = (row, key) => {
      const idx = indexMap.has(key) ? indexMap.get(key) : -1;
      if (idx == null || idx < 0) return "";
      return row[idx] ?? "";
    };
    const base = {
      examTitle: "Imported Exam",
      timerMode: "untimed",
      secondsPerQuestion: DEFAULT_SECONDS,
      questions: [],
      results: []
    };
    rows.slice(1).forEach((row) => {
      const type = String(getCell(row, "type") || "").trim().toLowerCase();
      if (!type) return;
      if (type === CSV_ROW_META) {
        const title = String(getCell(row, "examTitle") || "").trim();
        if (title) base.examTitle = title;
        const mode = String(getCell(row, "timerMode") || "").trim().toLowerCase();
        if (mode === "timed" || mode === "untimed") base.timerMode = mode;
        const seconds = Number(getCell(row, "secondsPerQuestion"));
        if (Number.isFinite(seconds) && seconds > 0) base.secondsPerQuestion = seconds;
        return;
      }
      if (type !== CSV_ROW_QUESTION) return;
      const question = createBlankQuestion();
      question.stem = sanitizeRichText(getCell(row, "stem"));
      question.explanation = sanitizeRichText(getCell(row, "explanation"));
      question.tags = parseTagString(getCell(row, "tags"));
      question.media = String(getCell(row, "media") || "").trim();
      question.options = [];
      question.answer = "";
      for (let i = 1; i <= CSV_MAX_OPTIONS; i += 1) {
        const optionHtml = sanitizeRichText(getCell(row, `option${i}`));
        if (!optionHtml) continue;
        const option = { id: uid(), text: optionHtml };
        question.options.push(option);
        if (!question.answer && parseBooleanFlag(getCell(row, `option${i}Correct`))) {
          question.answer = option.id;
        }
      }
      if (question.options.length < 2) {
        return;
      }
      if (!question.answer) {
        question.answer = question.options[0].id;
      }
      base.questions.push(question);
    });
    if (!base.questions.length) {
      throw new Error("No questions found in CSV");
    }
    return ensureExamShape(base).exam;
  }
  function ensureExamShape(exam) {
    const next = clone5(exam) || {};
    let changed = false;
    if (!next.id) {
      next.id = uid();
      changed = true;
    }
    if (!next.examTitle) {
      next.examTitle = "Untitled Exam";
      changed = true;
    }
    if (next.timerMode !== "timed") {
      if (next.timerMode !== "untimed") changed = true;
      next.timerMode = "untimed";
    }
    if (typeof next.secondsPerQuestion !== "number" || next.secondsPerQuestion <= 0) {
      next.secondsPerQuestion = DEFAULT_SECONDS;
      changed = true;
    }
    if (!Array.isArray(next.questions)) {
      next.questions = [];
      changed = true;
    }
    next.questions = next.questions.map((q) => {
      const question = { ...q };
      if (!question.id) {
        question.id = uid();
        changed = true;
      }
      const originalStem = question.stem;
      question.stem = sanitizeRichText(question.stem);
      if (originalStem !== question.stem) changed = true;
      if (!Array.isArray(question.options)) {
        question.options = [];
        changed = true;
      }
      question.options = question.options.map((opt) => {
        const option = { ...opt };
        if (!option.id) {
          option.id = uid();
          changed = true;
        }
        const originalText = option.text;
        option.text = sanitizeRichText(option.text);
        if (originalText !== option.text) changed = true;
        return option;
      });
      if (!question.answer || !question.options.some((opt) => opt.id === question.answer)) {
        question.answer = question.options[0]?.id || "";
        changed = true;
      }
      const originalExplanation = question.explanation;
      question.explanation = sanitizeRichText(question.explanation);
      if (originalExplanation !== question.explanation) changed = true;
      const normalizedTags = ensureArrayTags(question.tags);
      if (question.tags?.length !== normalizedTags.length || question.tags?.some((t, idx) => t !== normalizedTags[idx])) {
        question.tags = normalizedTags;
        changed = true;
      } else {
        question.tags = normalizedTags;
      }
      if (question.media == null) {
        question.media = "";
        changed = true;
      }
      return question;
    });
    if (!Array.isArray(next.results)) {
      next.results = [];
      changed = true;
    }
    next.results = next.results.map((res) => {
      const result = { ...res };
      if (!result.id) {
        result.id = uid();
        changed = true;
      }
      if (typeof result.when !== "number") {
        result.when = Date.now();
        changed = true;
      }
      if (typeof result.correct !== "number") {
        result.correct = Number(result.correct) || 0;
        changed = true;
      }
      if (typeof result.total !== "number") {
        result.total = Number(result.total) || (next.questions?.length ?? 0);
        changed = true;
      }
      if (!result.answers || typeof result.answers !== "object") {
        result.answers = {};
        changed = true;
      }
      if (!Array.isArray(result.flagged)) {
        result.flagged = [];
        changed = true;
      }
      if (typeof result.durationMs !== "number") {
        result.durationMs = 0;
        changed = true;
      }
      if (typeof result.answered !== "number") {
        result.answered = Object.keys(result.answers || {}).length;
        changed = true;
      }
      return result;
    });
    return { exam: next, changed };
  }
  function createBlankQuestion() {
    return {
      id: uid(),
      stem: "",
      options: [1, 2, 3, 4].map(() => ({ id: uid(), text: "" })),
      answer: "",
      explanation: "",
      tags: [],
      media: ""
    };
  }
  function createTakingSession(exam) {
    const snapshot = clone5(exam);
    const totalMs = snapshot.timerMode === "timed" ? totalExamTimeMs(snapshot) : null;
    return {
      mode: "taking",
      exam: snapshot,
      idx: 0,
      answers: {},
      flagged: {},
      checked: {},
      startedAt: Date.now(),
      elapsedMs: 0,
      remainingMs: totalMs,
      questionStats: snapshot.questions.map(() => ({
        timeMs: 0,
        changes: [],
        enteredAt: null,
        initialAnswer: null,
        initialAnswerAt: null
      }))
    };
  }
  function hydrateSavedSession(saved, fallbackExam) {
    const baseExam = saved?.exam ? ensureExamShape(saved.exam).exam : fallbackExam;
    const exam = clone5(baseExam);
    const questionCount = exam.questions.length;
    const idx = Math.min(Math.max(Number(saved?.idx) || 0, 0), Math.max(0, questionCount - 1));
    const remaining = typeof saved?.remainingMs === "number" ? Math.max(0, saved.remainingMs) : exam.timerMode === "timed" ? totalExamTimeMs(exam) : null;
    const elapsed = Math.max(0, Number(saved?.elapsedMs) || 0);
    return {
      mode: "taking",
      exam,
      idx,
      answers: saved?.answers ? { ...saved.answers } : {},
      flagged: saved?.flagged ? { ...saved.flagged } : {},
      checked: saved?.checked ? { ...saved.checked } : {},
      startedAt: Date.now(),
      elapsedMs: elapsed,
      remainingMs: remaining,
      questionStats: exam.questions.map((_, questionIdx) => {
        const stat = saved?.questionStats?.[questionIdx] || {};
        return {
          timeMs: Number.isFinite(stat.timeMs) ? stat.timeMs : 0,
          changes: Array.isArray(stat.changes) ? stat.changes.map((change) => ({ ...change })) : [],
          enteredAt: null,
          initialAnswer: stat.initialAnswer ?? null,
          initialAnswerAt: Number.isFinite(stat.initialAnswerAt) ? stat.initialAnswerAt : null
        };
      })
    };
  }
  async function renderExams(root, render) {
    root.innerHTML = "";
    root.className = "exam-view";
    const controls = document.createElement("div");
    controls.className = "exam-controls";
    const heading = document.createElement("div");
    heading.className = "exam-heading";
    heading.innerHTML = "<h1>Exams</h1><p>Import exams, take them, and review your attempts.</p>";
    controls.appendChild(heading);
    const actions = document.createElement("div");
    actions.className = "exam-control-actions";
    const status = document.createElement("div");
    status.className = "exam-status";
    const fileInput = document.createElement("input");
    fileInput.type = "file";
    fileInput.accept = ".json,.csv,application/json,text/csv";
    fileInput.style.display = "none";
    fileInput.addEventListener("change", async (e) => {
      const file = e.target.files?.[0];
      if (!file) return;
      try {
        const name = (file.name || "").toLowerCase();
        if (name.endsWith(".csv") || (file.type || "").includes("csv")) {
          const text = await file.text();
          const imported = examFromCsv(text);
          await upsertExam({ ...imported, updatedAt: Date.now() });
          lastExamStatusMessage = `Imported "${imported.examTitle}" from CSV.`;
          render();
        } else {
          const text = await file.text();
          const parsed = JSON.parse(text);
          const { exam } = ensureExamShape(parsed);
          await upsertExam({ ...exam, updatedAt: Date.now() });
          lastExamStatusMessage = `Imported "${exam.examTitle}" from JSON.`;
          render();
        }
      } catch (err) {
        console.warn("Failed to import exam", err);
        status.textContent = "Unable to import exam \u2014 check the file format.";
      } finally {
        fileInput.value = "";
      }
    });
    const importBtn = document.createElement("button");
    importBtn.type = "button";
    importBtn.className = "btn secondary";
    importBtn.textContent = "Import JSON/CSV";
    importBtn.addEventListener("click", () => fileInput.click());
    actions.appendChild(importBtn);
    const templateBtn = document.createElement("button");
    templateBtn.type = "button";
    templateBtn.className = "btn secondary";
    templateBtn.textContent = "CSV Template";
    templateBtn.addEventListener("click", () => {
      try {
        downloadExamCsvTemplate();
        status.textContent = "CSV template downloaded.";
      } catch (err) {
        console.warn("Failed to create CSV template", err);
        status.textContent = "Unable to download template.";
      }
    });
    actions.appendChild(templateBtn);
    const newBtn = document.createElement("button");
    newBtn.type = "button";
    newBtn.className = "btn";
    newBtn.textContent = "New Exam";
    newBtn.addEventListener("click", () => openExamEditor(null, render));
    actions.appendChild(newBtn);
    controls.appendChild(actions);
    const layout = state.examLayout || { mode: "grid", detailsVisible: true };
    const viewMode = layout.mode === "row" ? "row" : "grid";
    const detailsVisible = layout.detailsVisible !== false;
    const layoutControls = document.createElement("div");
    layoutControls.className = "exam-layout-controls";
    const layoutToggle = document.createElement("button");
    layoutToggle.type = "button";
    layoutToggle.className = "exam-layout-toggle";
    layoutToggle.setAttribute("aria-pressed", viewMode === "row" ? "true" : "false");
    layoutToggle.setAttribute("aria-label", viewMode === "row" ? "Switch to column view" : "Switch to row view");
    const toggleIcon = document.createElement("span");
    toggleIcon.className = "exam-layout-toggle-icon";
    layoutToggle.appendChild(toggleIcon);
    const toggleText = document.createElement("span");
    toggleText.className = "sr-only";
    toggleText.textContent = viewMode === "row" ? "Show exams in columns" : "Show exams in rows";
    layoutToggle.appendChild(toggleText);
    layoutToggle.addEventListener("click", () => {
      const nextMode = viewMode === "row" ? "grid" : "row";
      setExamLayout({ mode: nextMode });
      render();
    });
    layoutControls.appendChild(layoutToggle);
    controls.appendChild(layoutControls);
    controls.appendChild(status);
    root.appendChild(controls);
    root.appendChild(fileInput);
    if (lastExamStatusMessage) {
      status.textContent = lastExamStatusMessage;
      lastExamStatusMessage = "";
    } else {
      status.textContent = "";
    }
    const stored = await listExams();
    const exams = [];
    for (const raw of stored) {
      const { exam, changed } = ensureExamShape(raw);
      exams.push(exam);
      if (changed) await upsertExam(exam);
    }
    exams.sort((a, b) => (b.updatedAt || 0) - (a.updatedAt || 0));
    const savedSessions = await listExamSessions();
    const sessionMap = /* @__PURE__ */ new Map();
    for (const sess of savedSessions) {
      if (sess?.examId) sessionMap.set(sess.examId, sess);
    }
    for (const sess of savedSessions) {
      if (!exams.find((ex) => ex.id === sess.examId)) {
        await deleteExamSessionProgress(sess.examId);
      }
    }
    if (!exams.length) {
      const empty = document.createElement("div");
      empty.className = "exam-empty";
      empty.innerHTML = "<p>No exams yet. Import a JSON or CSV exam, download the template, or create one from scratch.</p>";
      root.appendChild(empty);
      return;
    }
    const layoutSnapshot = { mode: viewMode, detailsVisible };
    const grid = document.createElement("div");
    grid.className = "exam-grid";
    if (viewMode === "row") {
      grid.classList.add("exam-grid--row");
    }
    exams.forEach((exam) => {
      grid.appendChild(buildExamCard(exam, render, sessionMap.get(exam.id), status, layoutSnapshot));
    });
    root.appendChild(grid);
  }
  function buildExamCard(exam, render, savedSession, statusEl, layout) {
    const layoutMode = layout?.mode === "row" ? "row" : "grid";
    const defaultExpanded = layout?.detailsVisible !== false;
    const expandedState = state.examAttemptExpanded[exam.id];
    const isExpanded = expandedState != null ? expandedState : defaultExpanded;
    const last = latestResult(exam);
    const best = bestResult(exam);
    const card = document.createElement("article");
    card.className = "card exam-card";
    if (layoutMode === "row") {
      card.classList.add("exam-card--row");
    }
    if (isExpanded) {
      card.classList.add("exam-card--expanded");
    }
    const header = document.createElement("div");
    header.className = "exam-card-header";
    card.appendChild(header);
    const summaryButton = document.createElement("button");
    summaryButton.type = "button";
    summaryButton.className = "exam-card-summary";
    summaryButton.setAttribute("aria-expanded", isExpanded ? "true" : "false");
    summaryButton.addEventListener("click", () => {
      setExamAttemptExpanded(exam.id, !isExpanded);
      render();
    });
    header.appendChild(summaryButton);
    const summaryContent = document.createElement("div");
    summaryContent.className = "exam-card-summary-content";
    summaryButton.appendChild(summaryContent);
    const titleGroup = document.createElement("div");
    titleGroup.className = "exam-card-title-group";
    summaryContent.appendChild(titleGroup);
    const title = document.createElement("h2");
    title.className = "exam-card-title";
    title.textContent = exam.examTitle;
    titleGroup.appendChild(title);
    const meta = document.createElement("div");
    meta.className = "exam-card-meta";
    const questionCount = document.createElement("span");
    questionCount.textContent = `${exam.questions.length} question${exam.questions.length === 1 ? "" : "s"}`;
    meta.appendChild(questionCount);
    const timerInfo = document.createElement("span");
    timerInfo.textContent = exam.timerMode === "timed" ? `Timed \u2022 ${exam.secondsPerQuestion}s/question` : "Untimed";
    meta.appendChild(timerInfo);
    titleGroup.appendChild(meta);
    const glance = document.createElement("div");
    glance.className = "exam-card-pills";
    summaryContent.appendChild(glance);
    if (exam.results.length) {
      const attemptsChip = document.createElement("span");
      attemptsChip.className = "exam-card-chip";
      attemptsChip.textContent = `${exam.results.length} attempt${exam.results.length === 1 ? "" : "s"}`;
      attemptsChip.title = `${exam.results.length} recorded attempt${exam.results.length === 1 ? "" : "s"}`;
      glance.appendChild(attemptsChip);
    }
    if (best) {
      const badge = createScoreBadge(best);
      badge.classList.add("exam-score-badge--pill");
      badge.dataset.badge = "best";
      badge.title = `Best attempt \u2022 ${formatScore(best)}`;
      badge.setAttribute("aria-label", `Best attempt ${formatScore(best)}`);
      glance.appendChild(badge);
    }
    if (last && (!best || last.id !== best.id)) {
      const badge = createScoreBadge(last);
      badge.classList.add("exam-score-badge--pill");
      badge.dataset.badge = "last";
      badge.title = `Last attempt \u2022 ${formatScore(last)}`;
      badge.setAttribute("aria-label", `Last attempt ${formatScore(last)}`);
      glance.appendChild(badge);
    }
    if (savedSession) {
      const progressChip = document.createElement("span");
      progressChip.className = "exam-card-chip exam-card-chip--progress";
      progressChip.textContent = "In progress";
      glance.appendChild(progressChip);
    }
    const caret = document.createElement("span");
    caret.className = "exam-card-caret";
    summaryButton.appendChild(caret);
    const quickAction = document.createElement("div");
    quickAction.className = "exam-card-cta";
    header.appendChild(quickAction);
    const quickBtn = document.createElement("button");
    quickBtn.className = "btn exam-card-primary";
    quickBtn.disabled = !savedSession && !last && exam.questions.length === 0;
    quickAction.appendChild(quickBtn);
    if (savedSession) {
      quickBtn.textContent = "Resume";
      quickBtn.addEventListener("click", async () => {
        const latest = await loadExamSession(exam.id);
        if (!latest) {
          if (statusEl) statusEl.textContent = "Saved attempt could not be found.";
          render();
          return;
        }
        const session = hydrateSavedSession(latest, exam);
        setExamSession(session);
        render();
      });
    } else if (last) {
      quickBtn.textContent = "Review";
      quickBtn.addEventListener("click", () => {
        setExamSession({ mode: "review", exam: clone5(exam), result: clone5(last), idx: 0 });
        render();
      });
    } else {
      quickBtn.textContent = "Start";
      quickBtn.addEventListener("click", () => {
        setExamSession(createTakingSession(exam));
        render();
      });
    }
    const menuWrap = document.createElement("div");
    menuWrap.className = "exam-card-menu";
    quickAction.appendChild(menuWrap);
    const menuToggle = document.createElement("button");
    menuToggle.type = "button";
    menuToggle.className = "exam-card-menu-toggle";
    menuToggle.setAttribute("aria-haspopup", "true");
    menuToggle.setAttribute("aria-expanded", "false");
    const menuId = `exam-card-menu-${exam.id}`;
    menuToggle.setAttribute("aria-controls", menuId);
    const menuToggleIcon = document.createElement("span");
    menuToggleIcon.className = "exam-card-menu-toggle__icon";
    const menuToggleIconBar = document.createElement("span");
    menuToggleIconBar.className = "exam-card-menu-toggle__icon-bar";
    menuToggleIcon.appendChild(menuToggleIconBar);
    menuToggle.appendChild(menuToggleIcon);
    const menuToggleLabel = document.createElement("span");
    menuToggleLabel.className = "exam-card-menu-toggle__label";
    menuToggleLabel.textContent = "Actions";
    menuToggle.appendChild(menuToggleLabel);
    const menuToggleSr = document.createElement("span");
    menuToggleSr.className = "sr-only";
    menuToggleSr.textContent = "Toggle exam actions";
    menuToggle.appendChild(menuToggleSr);
    menuWrap.appendChild(menuToggle);
    const menuPanel = document.createElement("div");
    menuPanel.className = "exam-card-menu-panel";
    menuPanel.id = menuId;
    menuPanel.setAttribute("aria-hidden", "true");
    menuPanel.setAttribute("role", "menu");
    menuWrap.appendChild(menuPanel);
    let menuOpen = false;
    const handleOutside = (event) => {
      if (!menuOpen) return;
      if (menuWrap.contains(event.target)) return;
      closeMenu();
    };
    const handleKeydown = (event) => {
      if (!menuOpen) return;
      if (event.key === "Escape") {
        event.preventDefault();
        closeMenu();
        menuToggle.focus();
      }
    };
    const handleFocus = (event) => {
      if (!menuOpen) return;
      if (menuWrap.contains(event.target)) return;
      closeMenu();
    };
    function openMenu() {
      if (menuOpen) return;
      menuOpen = true;
      menuWrap.classList.add("exam-card-menu--open");
      menuToggle.setAttribute("aria-expanded", "true");
      menuPanel.setAttribute("aria-hidden", "false");
      document.addEventListener("click", handleOutside, true);
      document.addEventListener("keydown", handleKeydown, true);
      document.addEventListener("focusin", handleFocus, true);
    }
    function closeMenu() {
      if (!menuOpen) return;
      menuOpen = false;
      menuWrap.classList.remove("exam-card-menu--open");
      menuToggle.setAttribute("aria-expanded", "false");
      menuPanel.setAttribute("aria-hidden", "true");
      document.removeEventListener("click", handleOutside, true);
      document.removeEventListener("keydown", handleKeydown, true);
      document.removeEventListener("focusin", handleFocus, true);
    }
    menuToggle.addEventListener("click", (event) => {
      event.stopPropagation();
      if (menuOpen) {
        closeMenu();
      } else {
        openMenu();
      }
    });
    menuPanel.addEventListener("click", (event) => {
      event.stopPropagation();
    });
    const addMenuAction = (label, handler, options = {}) => {
      const item = document.createElement("button");
      item.type = "button";
      item.className = "exam-card-menu-item";
      item.setAttribute("role", "menuitem");
      if (options.variant === "danger") {
        item.classList.add("is-danger");
      }
      if (options.disabled) {
        item.disabled = true;
      }
      item.textContent = label;
      item.addEventListener("click", async () => {
        if (item.disabled) return;
        const result = await handler();
        if (result === false) return;
        closeMenu();
      });
      menuPanel.appendChild(item);
    };
    addMenuAction("Restart Exam", async () => {
      if (exam.questions.length === 0) return false;
      if (savedSession) {
        const confirm2 = await confirmModal("Start a new attempt and discard saved progress?");
        if (!confirm2) return false;
        await deleteExamSessionProgress(exam.id).catch(() => {
        });
      }
      setExamSession(createTakingSession(exam));
      render();
    }, { disabled: exam.questions.length === 0 });
    if (last) {
      addMenuAction("Review Last Attempt", () => {
        setExamSession({ mode: "review", exam: clone5(exam), result: clone5(last), idx: 0 });
        render();
      });
    }
    addMenuAction("Edit Exam", () => {
      openExamEditor(exam, render);
    });
    addMenuAction("Export JSON", () => {
      const ok = triggerExamDownload(exam);
      if (!ok && statusEl) {
        statusEl.textContent = "Unable to export exam.";
      } else if (ok && statusEl) {
        statusEl.textContent = "Exam exported as JSON.";
      }
    });
    addMenuAction("Export CSV", () => {
      try {
        downloadExamCsv(exam);
        if (statusEl) statusEl.textContent = "Exam exported as CSV.";
      } catch (err) {
        console.warn("Failed to export exam CSV", err);
        if (statusEl) statusEl.textContent = "Unable to export exam CSV.";
      }
    });
    addMenuAction("Delete Exam", async () => {
      const ok = await confirmModal(`Delete "${exam.examTitle}"? This will remove all attempts.`);
      if (!ok) return false;
      await deleteExamSessionProgress(exam.id).catch(() => {
      });
      await deleteExam(exam.id);
      render();
    }, { variant: "danger" });
    const details = document.createElement("div");
    details.className = "exam-card-details";
    if (!isExpanded) {
      details.setAttribute("hidden", "true");
    }
    card.appendChild(details);
    if (savedSession) {
      const banner = document.createElement("div");
      banner.className = "exam-saved-banner";
      const updated = savedSession.updatedAt ? new Date(savedSession.updatedAt).toLocaleString() : null;
      banner.textContent = updated ? `Saved attempt \u2022 ${updated}` : "Saved attempt available";
      details.appendChild(banner);
    }
    const attemptsWrap = document.createElement("div");
    attemptsWrap.className = "exam-attempts";
    const attemptsHeader = document.createElement("div");
    attemptsHeader.className = "exam-attempts-header";
    const attemptsTitle = document.createElement("h3");
    attemptsTitle.textContent = "Attempts";
    attemptsHeader.appendChild(attemptsTitle);
    const attemptsCount = document.createElement("span");
    attemptsCount.className = "exam-attempt-count";
    attemptsCount.textContent = String(exam.results.length);
    attemptsHeader.appendChild(attemptsCount);
    attemptsWrap.appendChild(attemptsHeader);
    if (!exam.results.length) {
      const none = document.createElement("p");
      none.className = "exam-attempt-empty";
      none.textContent = "No attempts yet.";
      attemptsWrap.appendChild(none);
    } else {
      const list = document.createElement("div");
      list.className = "exam-attempt-list";
      [...exam.results].sort((a, b) => b.when - a.when).forEach((result) => {
        list.appendChild(buildAttemptRow(exam, result, render));
      });
      attemptsWrap.appendChild(list);
    }
    details.appendChild(attemptsWrap);
    return card;
  }
  function buildAttemptRow(exam, result, render) {
    const row = document.createElement("div");
    row.className = "exam-attempt-row";
    const main = document.createElement("div");
    main.className = "exam-attempt-main";
    row.appendChild(main);
    const badge = createScoreBadge(result);
    badge.classList.add("exam-score-badge--pill", "exam-attempt-score");
    badge.title = formatScore(result);
    main.appendChild(badge);
    const details = document.createElement("div");
    details.className = "exam-attempt-details";
    main.appendChild(details);
    const date = document.createElement("div");
    date.className = "exam-attempt-date";
    date.textContent = new Date(result.when).toLocaleString();
    details.appendChild(date);
    const meta = document.createElement("div");
    meta.className = "exam-attempt-meta";
    const answeredText = `${result.answered}/${result.total} answered`;
    const flaggedText = `${result.flagged.length} flagged`;
    const durationText = result.durationMs ? formatDuration(result.durationMs) : "\u2014";
    meta.textContent = `${answeredText} \u2022 ${flaggedText} \u2022 ${durationText}`;
    details.appendChild(meta);
    const actions = document.createElement("div");
    actions.className = "exam-attempt-actions";
    row.appendChild(actions);
    const review = document.createElement("button");
    review.className = "btn secondary exam-attempt-review";
    review.textContent = "Review";
    review.addEventListener("click", () => {
      setExamSession({ mode: "review", exam: clone5(exam), result: clone5(result), idx: 0 });
      render();
    });
    actions.appendChild(review);
    return row;
  }
  function createStat(label, value) {
    const wrap = document.createElement("div");
    wrap.className = "exam-stat";
    const lbl = document.createElement("div");
    lbl.className = "exam-stat-label";
    lbl.textContent = label;
    const val = document.createElement("div");
    val.className = "exam-stat-value";
    val.textContent = value;
    wrap.appendChild(lbl);
    wrap.appendChild(val);
    return wrap;
  }
  function latestResult(exam) {
    if (!exam.results?.length) return null;
    return exam.results.reduce((acc, res) => acc == null || res.when > acc.when ? res : acc, null);
  }
  function bestResult(exam) {
    if (!exam.results?.length) return null;
    return exam.results.reduce((acc, res) => {
      const pct = res.total ? res.correct / res.total : 0;
      const bestPct = acc?.total ? acc.correct / acc.total : -1;
      if (!acc || pct > bestPct) return res;
      return acc;
    }, null);
  }
  function formatScore(result) {
    const pct = result.total ? Math.round(result.correct / result.total * 100) : 0;
    return `${result.correct}/${result.total} \u2022 ${pct}%`;
  }
  function formatDuration(ms) {
    if (ms == null) return "\u2014";
    const totalSeconds = Math.max(0, Math.round(ms / 1e3));
    const hours = Math.floor(totalSeconds / 3600);
    const minutes = Math.floor(totalSeconds % 3600 / 60);
    const seconds = totalSeconds % 60;
    const parts = [];
    if (hours) parts.push(`${hours}h`);
    if (minutes) parts.push(`${minutes}m`);
    parts.push(`${seconds}s`);
    return parts.join(" ");
  }
  function optionText(question, id) {
    const html = question.options.find((opt) => opt.id === id)?.text || "";
    return htmlToPlainText(html).trim();
  }
  function mediaElement(source) {
    if (!source) return null;
    const wrap = document.createElement("div");
    wrap.className = "exam-media";
    const lower = source.toLowerCase();
    if (lower.startsWith("data:video") || /\.(mp4|webm|ogg)$/i.test(lower)) {
      const video = document.createElement("video");
      video.controls = true;
      video.src = source;
      wrap.appendChild(video);
    } else if (lower.startsWith("data:audio") || /\.(mp3|wav|ogg)$/i.test(lower)) {
      const audio = document.createElement("audio");
      audio.controls = true;
      audio.src = source;
      wrap.appendChild(audio);
    } else {
      const img = document.createElement("img");
      img.src = source;
      img.alt = "Question media";
      wrap.appendChild(img);
    }
    return wrap;
  }
  function answerClass(question, selectedId, optionId) {
    const isCorrect = optionId === question.answer;
    if (selectedId == null) return isCorrect ? "correct-answer" : "";
    if (selectedId === optionId) {
      return selectedId === question.answer ? "correct-answer" : "incorrect-answer";
    }
    return isCorrect ? "correct-answer" : "";
  }
  function renderQuestionMap(sidebar, sess, render) {
    const map = document.createElement("section");
    map.className = "question-map";
    const header = document.createElement("div");
    header.className = "question-map__header";
    const title = document.createElement("h3");
    title.textContent = "Question Map";
    header.appendChild(title);
    const questionCount = sess.exam.questions.length;
    const isReview = sess.mode === "review";
    const answers = isReview ? sess.result?.answers || {} : sess.answers || {};
    const answeredCount = sess.exam.questions.reduce((count, question, idx) => {
      const answer = answers[idx];
      if (answer == null) return count;
      const matched = question.options.some((opt) => opt.id === answer);
      return matched ? count + 1 : count;
    }, 0);
    const countBadge = document.createElement("span");
    countBadge.className = "question-map__count";
    countBadge.textContent = `${answeredCount}/${questionCount} answered`;
    header.appendChild(countBadge);
    map.appendChild(header);
    const grid = document.createElement("div");
    grid.className = "question-map__grid";
    map.appendChild(grid);
    const statsList = isReview ? Array.isArray(sess.result?.questionStats) ? sess.result.questionStats : [] : Array.isArray(sess.questionStats) ? sess.questionStats : [];
    const summary = isReview ? summarizeAnswerChanges(statsList, sess.exam, answers) : null;
    if (isReview && sess.result) {
      sess.result.changeSummary = summary;
    }
    const flaggedSet = new Set(sess.mode === "review" ? sess.result.flagged || [] : Object.entries(sess.flagged || {}).filter(([_, v]) => v).map(([idx]) => Number(idx)));
    sess.exam.questions.forEach((question, idx) => {
      const item = document.createElement("button");
      item.type = "button";
      item.className = "question-map__item";
      const label = document.createElement("span");
      label.className = "question-map__label";
      label.textContent = String(idx + 1);
      item.appendChild(label);
      const flagIndicator = document.createElement("span");
      flagIndicator.className = "question-map__flag";
      flagIndicator.setAttribute("aria-hidden", "true");
      flagIndicator.textContent = "\u{1F6A9}";
      item.appendChild(flagIndicator);
      const isCurrent = sess.idx === idx;
      item.classList.toggle("is-current", isCurrent);
      item.setAttribute("aria-pressed", isCurrent ? "true" : "false");
      if (isCurrent) {
        item.setAttribute("aria-current", "true");
      } else {
        item.removeAttribute("aria-current");
      }
      const answer = answers[idx];
      const answered = answer != null && question.options.some((opt) => opt.id === answer);
      const tooltipParts = [];
      let status = "unanswered";
      const wasChecked = !isReview && Boolean(sess.checked?.[idx]);
      if (isReview) {
        if (answered) {
          const isCorrect = answer === question.answer;
          status = isCorrect ? "correct" : "incorrect";
          tooltipParts.push(isCorrect ? "Answered correctly" : "Answered incorrectly");
        } else {
          status = "review-unanswered";
          tooltipParts.push("Not answered");
        }
        const stat = statsList[idx];
        const changeDetails = analyzeAnswerChange(stat, question, answer);
        delete item.dataset.changeDirection;
        if (changeDetails.changed) {
          if (changeDetails.direction === "right-to-wrong") {
            item.dataset.changeDirection = "right-to-wrong";
            tooltipParts.push("Changed from correct to incorrect");
          } else if (changeDetails.direction === "wrong-to-right") {
            item.dataset.changeDirection = "wrong-to-right";
            tooltipParts.push("Changed from incorrect to correct");
          } else {
            item.dataset.changeDirection = "changed";
            tooltipParts.push("Changed answer");
          }
        } else if (changeDetails.switched) {
          item.dataset.changeDirection = "returned";
          tooltipParts.push("Changed answers but returned to start");
        }
      } else {
        if (wasChecked && answered) {
          const isCorrect = answer === question.answer;
          status = isCorrect ? "correct" : "incorrect";
          tooltipParts.push(isCorrect ? "Checked correct" : "Checked incorrect");
        } else if (answered) {
          status = "answered";
          tooltipParts.push("Answered");
        } else {
          tooltipParts.push(wasChecked ? "Checked without answer" : "Not answered");
        }
      }
      item.dataset.status = status;
      if (status === "correct" || status === "incorrect") {
        item.classList.add("is-graded");
      } else if (status === "answered") {
        item.classList.add("is-answered");
      } else {
        item.classList.add("is-unanswered");
      }
      if (status === "review-unanswered") {
        item.classList.add("is-review-unanswered");
      }
      const isFlagged = flaggedSet.has(idx);
      item.dataset.flagged = isFlagged ? "true" : "false";
      if (isFlagged) {
        tooltipParts.push("Flagged");
      }
      if (tooltipParts.length) {
        item.title = tooltipParts.join(" \xB7 ");
      }
      item.addEventListener("click", () => {
        navigateToQuestion(sess, idx, render);
      });
      grid.appendChild(item);
    });
    if (summary) {
      const meta = document.createElement("div");
      meta.className = "question-map__summary";
      const summaryTitle = document.createElement("div");
      summaryTitle.className = "question-map__summary-title";
      summaryTitle.textContent = "Answer changes";
      meta.appendChild(summaryTitle);
      const summaryStats = document.createElement("div");
      summaryStats.className = "question-map__summary-stats";
      summaryStats.innerHTML = `
      <span><strong>${summary.switched}</strong> switched</span>
      <span><strong>${summary.returnedToOriginal}</strong> returned</span>
      <span><strong>${summary.rightToWrong}</strong> right \u2192 wrong</span>
      <span><strong>${summary.wrongToRight}</strong> wrong \u2192 right</span>
    `;
      meta.appendChild(summaryStats);
      map.appendChild(meta);
    }
    sidebar.appendChild(map);
    return summary;
  }
  function renderExamRunner(root, render) {
    const sess = state.examSession;
    if (!sess) {
      teardownKeyboardNavigation();
      return;
    }
    const hasWindow = typeof window !== "undefined";
    const prevIdx = sess.__lastRenderedIdx;
    const prevMode = sess.__lastRenderedMode;
    const scroller = resolveScrollContainer(root);
    const prevScrollY = readScrollPosition(scroller);
    if (scroller) {
      if (typeof prevIdx === "number") {
        storeScrollPosition(sess, prevIdx, prevScrollY);
      } else if (typeof sess.idx === "number") {
        storeScrollPosition(sess, sess.idx, prevScrollY);
      }
    }
    root.innerHTML = "";
    root.className = "exam-session";
    if (sess.mode === "summary") {
      teardownKeyboardNavigation();
      renderSummary(root, render, sess);
      return;
    }
    ensureScrollPositions(sess);
    setupKeyboardNavigation(sess, render);
    if (!sess.answers) sess.answers = {};
    if (!sess.flagged) sess.flagged = {};
    if (!sess.checked) sess.checked = {};
    if (typeof sess.elapsedMs !== "number") sess.elapsedMs = 0;
    if (sess.exam.timerMode === "timed" && typeof sess.remainingMs !== "number") {
      sess.remainingMs = totalExamTimeMs(sess.exam);
    }
    if (!sess.startedAt) sess.startedAt = Date.now();
    const questionCount = sess.exam.questions.length;
    if (!questionCount) {
      const empty = document.createElement("div");
      empty.className = "exam-empty";
      empty.innerHTML = "<p>This exam does not contain any questions.</p>";
      const back = document.createElement("button");
      back.className = "btn";
      back.textContent = "Back to Exams";
      back.addEventListener("click", () => {
        teardownKeyboardNavigation();
        setExamSession(null);
        render();
      });
      empty.appendChild(back);
      root.appendChild(empty);
      return;
    }
    if (sess.mode === "taking" && sess.exam.timerMode === "timed") {
      ensureTimer(sess, render);
    }
    if (sess.idx < 0) sess.idx = 0;
    if (sess.idx >= questionCount) sess.idx = questionCount - 1;
    ensureQuestionStats(sess);
    if (sess.mode === "taking") {
      beginQuestionTiming(sess, sess.idx);
    }
    const container = document.createElement("div");
    container.className = "exam-runner";
    root.appendChild(container);
    const main = document.createElement("section");
    main.className = "exam-main";
    container.appendChild(main);
    const sidebar = document.createElement("aside");
    sidebar.className = "exam-sidebar";
    container.appendChild(sidebar);
    const question = sess.exam.questions[sess.idx];
    const answers = sess.mode === "review" ? sess.result.answers || {} : sess.answers || {};
    const selected = answers[sess.idx];
    const isInstantCheck = sess.mode === "taking" && sess.exam.timerMode !== "timed" && Boolean(sess.checked?.[sess.idx]);
    const showReview = sess.mode === "review" || isInstantCheck;
    const top = document.createElement("div");
    top.className = "exam-topbar";
    const progress = document.createElement("div");
    progress.className = "exam-progress";
    progress.textContent = `${sess.exam.examTitle} \u2022 Question ${sess.idx + 1} of ${questionCount}`;
    top.appendChild(progress);
    const flagBtn = document.createElement("button");
    flagBtn.type = "button";
    flagBtn.className = "flag-btn";
    const isFlagged = sess.mode === "review" ? (sess.result.flagged || []).includes(sess.idx) : Boolean(sess.flagged?.[sess.idx]);
    setToggleState(flagBtn, isFlagged);
    flagBtn.textContent = isFlagged ? "\u{1F6A9} Flagged" : "Flag question";
    if (sess.mode === "taking") {
      flagBtn.addEventListener("click", () => {
        if (!sess.flagged) sess.flagged = {};
        sess.flagged[sess.idx] = !isFlagged;
        render();
      });
    } else {
      flagBtn.disabled = true;
    }
    top.appendChild(flagBtn);
    if (sess.mode === "taking" && sess.exam.timerMode === "timed") {
      const timerEl = document.createElement("div");
      timerEl.className = "exam-timer";
      const remainingMs = typeof sess.remainingMs === "number" ? sess.remainingMs : totalExamTimeMs(sess.exam);
      timerEl.textContent = formatCountdown(remainingMs);
      setTimerElement(sess, timerEl);
      top.appendChild(timerEl);
    } else {
      setTimerElement(sess, null);
    }
    main.appendChild(top);
    const stem = document.createElement("div");
    stem.className = "exam-stem";
    const stemHtml = question.stem && !isEmptyHtml(question.stem) ? question.stem : "";
    stem.innerHTML = stemHtml || '<p class="exam-stem-empty">(No prompt)</p>';
    main.appendChild(stem);
    const media = mediaElement(question.media);
    if (media) main.appendChild(media);
    if (question.tags?.length) {
      const tagWrap = document.createElement("div");
      tagWrap.className = "exam-tags";
      question.tags.forEach((tag) => {
        const chip = document.createElement("span");
        chip.className = "exam-tag";
        chip.textContent = tag;
        tagWrap.appendChild(chip);
      });
      main.appendChild(tagWrap);
    }
    const optionsWrap = document.createElement("div");
    optionsWrap.className = "exam-options";
    if (!question.options.length) {
      const warn = document.createElement("p");
      warn.className = "exam-warning";
      warn.textContent = "This question has no answer options.";
      optionsWrap.appendChild(warn);
    }
    question.options.forEach((opt) => {
      const choice = document.createElement(sess.mode === "taking" ? "button" : "div");
      if (sess.mode === "taking") choice.type = "button";
      choice.className = "exam-option";
      if (sess.mode === "review") choice.classList.add("review");
      const indicator = document.createElement("span");
      indicator.className = "option-indicator";
      choice.appendChild(indicator);
      const label = document.createElement("span");
      label.className = "option-text";
      label.innerHTML = opt.text || '<span class="exam-option-empty">(Empty option)</span>';
      choice.appendChild(label);
      const isSelected = selected === opt.id;
      if (sess.mode === "taking") {
        setToggleState(choice, isSelected, "selected");
        choice.addEventListener("click", () => {
          recordAnswerChange(sess, sess.idx, question, opt.id);
          sess.answers[sess.idx] = opt.id;
          if (sess.exam.timerMode !== "timed" && sess.checked) {
            delete sess.checked[sess.idx];
          }
          render();
        });
        if (isInstantCheck) {
          const cls = answerClass(question, selected, opt.id);
          if (cls) choice.classList.add(cls);
          if (isSelected) choice.classList.add("chosen");
        }
      } else {
        const cls = answerClass(question, selected, opt.id);
        if (cls) choice.classList.add(cls);
        if (isSelected) choice.classList.add("chosen");
      }
      optionsWrap.appendChild(choice);
    });
    main.appendChild(optionsWrap);
    if (showReview) {
      const verdict = document.createElement("div");
      verdict.className = "exam-verdict";
      let verdictText = "Not answered";
      let verdictClass = "neutral";
      if (selected != null) {
        if (selected === question.answer) {
          verdictText = "Correct";
          verdictClass = "correct";
        } else {
          verdictText = "Incorrect";
          verdictClass = "incorrect";
        }
      }
      verdict.classList.add(verdictClass);
      verdict.textContent = sess.mode === "review" ? verdictText : `Checked: ${verdictText}`;
      main.appendChild(verdict);
      const answerSummary = document.createElement("div");
      answerSummary.className = "exam-answer-summary";
      const your = optionText(question, selected);
      const correct = optionText(question, question.answer);
      answerSummary.innerHTML = `<div><strong>Your answer:</strong> ${your || "\u2014"}</div><div><strong>Correct answer:</strong> ${correct || "\u2014"}</div>`;
      main.appendChild(answerSummary);
      if (sess.mode === "review") {
        const stats = sess.result?.questionStats?.[sess.idx];
        if (stats) {
          const insights = document.createElement("div");
          insights.className = "exam-review-insights";
          const timeSpent = document.createElement("div");
          timeSpent.innerHTML = `<strong>Time spent:</strong> ${formatDuration(stats.timeMs)}`;
          insights.appendChild(timeSpent);
          const finalAnswer = sess.result?.answers?.[sess.idx];
          const changeDetails = analyzeAnswerChange(stats, question, finalAnswer);
          if (changeDetails.switched) {
            const changeInfo = document.createElement("div");
            const label = document.createElement("strong");
            label.textContent = "Answer change:";
            changeInfo.appendChild(label);
            changeInfo.append(" ");
            const joinChoices = (list) => {
              if (!list.length) return "";
              if (list.length === 1) return list[0];
              return `${list.slice(0, -1).join(", ")} and ${list[list.length - 1]}`;
            };
            const formatChoice = (answerId, fallback) => {
              if (answerId == null) return fallback;
              const label2 = optionText(question, answerId);
              if (label2) return `"${label2}"`;
              return fallback;
            };
            const initialDisplay = formatChoice(changeDetails.initialAnswer, "your original choice");
            const finalDisplay = formatChoice(changeDetails.finalAnswer, "no answer");
            let message = "";
            if (changeDetails.changed) {
              if (changeDetails.direction === "right-to-wrong") {
                message = `You changed from ${initialDisplay} (correct) to ${finalDisplay} (incorrect).`;
              } else if (changeDetails.direction === "wrong-to-right") {
                message = `You changed from ${initialDisplay} (incorrect) to ${finalDisplay} (correct).`;
              } else if (changeDetails.initialCorrect === false && changeDetails.finalCorrect === false) {
                message = `You changed from ${initialDisplay} to ${finalDisplay}, but both choices were incorrect.`;
              } else {
                message = `You changed from ${initialDisplay} to ${finalDisplay}.`;
              }
            } else {
              const intermediateIds = [];
              changeDetails.sequence.slice(1, -1).forEach((id) => {
                if (id == null) return;
                if (id === changeDetails.initialAnswer) return;
                if (!intermediateIds.includes(id)) intermediateIds.push(id);
              });
              const intermediateLabels = intermediateIds.map((id) => optionText(question, id)).filter((label2) => label2 && label2.trim().length).map((label2) => `"${label2}"`);
              if (intermediateLabels.length) {
                const joined = joinChoices(intermediateLabels);
                message = `You tried ${joined} but returned to ${initialDisplay}.`;
              } else {
                message = `You briefly changed your answer but returned to ${initialDisplay}.`;
              }
            }
            changeInfo.append(message);
            insights.appendChild(changeInfo);
          }
          main.appendChild(insights);
        }
      }
      if (question.explanation && !isEmptyHtml(question.explanation)) {
        const explain = document.createElement("div");
        explain.className = "exam-explanation";
        const title = document.createElement("h3");
        title.textContent = "Explanation";
        const body = document.createElement("div");
        body.className = "exam-explanation-body";
        body.innerHTML = question.explanation;
        explain.appendChild(title);
        explain.appendChild(body);
        main.appendChild(explain);
      }
    }
    const paletteSummary = renderQuestionMap(sidebar, sess, render);
    renderSidebarMeta(sidebar, sess, paletteSummary);
    const nav = document.createElement("div");
    nav.className = "exam-nav";
    const prev = document.createElement("button");
    prev.className = "btn secondary";
    prev.textContent = "Previous";
    prev.disabled = sess.idx === 0;
    prev.addEventListener("click", () => {
      if (sess.idx > 0) {
        navigateToQuestion(sess, sess.idx - 1, render);
      }
    });
    nav.appendChild(prev);
    if (sess.mode === "taking") {
      const saveBtn = document.createElement("button");
      saveBtn.className = "btn secondary";
      saveBtn.textContent = "Save & Exit";
      saveBtn.addEventListener("click", async () => {
        await saveProgressAndExit(sess, render);
      });
      nav.appendChild(saveBtn);
      if (sess.exam.timerMode !== "timed") {
        const checkBtn = document.createElement("button");
        checkBtn.className = "btn secondary";
        checkBtn.textContent = isInstantCheck ? "Hide Check" : "Check Answer";
        checkBtn.disabled = question.options.length === 0;
        checkBtn.addEventListener("click", () => {
          if (!sess.checked) sess.checked = {};
          if (isInstantCheck) {
            delete sess.checked[sess.idx];
          } else {
            sess.checked[sess.idx] = true;
          }
          render();
        });
        nav.appendChild(checkBtn);
      }
      const nextBtn = document.createElement("button");
      nextBtn.className = "btn secondary";
      nextBtn.textContent = "Next Question";
      nextBtn.disabled = sess.idx >= questionCount - 1;
      nextBtn.addEventListener("click", () => {
        if (sess.idx < questionCount - 1) {
          navigateToQuestion(sess, sess.idx + 1, render);
        }
      });
      nav.appendChild(nextBtn);
      const submit = document.createElement("button");
      submit.className = "btn";
      submit.textContent = "Submit Exam";
      submit.addEventListener("click", async () => {
        await finalizeExam(sess, render);
      });
      nav.appendChild(submit);
    } else {
      const nextBtn = document.createElement("button");
      nextBtn.className = "btn secondary";
      nextBtn.textContent = "Next";
      nextBtn.disabled = sess.idx >= questionCount - 1;
      nextBtn.addEventListener("click", () => {
        if (sess.idx < questionCount - 1) {
          navigateToQuestion(sess, sess.idx + 1, render);
        }
      });
      nav.appendChild(nextBtn);
      const exit = document.createElement("button");
      exit.className = "btn";
      if (sess.fromSummary) {
        exit.textContent = "Back to Summary";
        exit.addEventListener("click", () => {
          setExamSession({ mode: "summary", exam: sess.exam, latestResult: sess.fromSummary });
          render();
        });
      } else {
        exit.textContent = "Back to Exams";
        exit.addEventListener("click", () => {
          teardownKeyboardNavigation();
          setExamSession(null);
          render();
        });
      }
      nav.appendChild(exit);
    }
    root.appendChild(nav);
    const sameQuestion = prevIdx === sess.idx && prevMode === sess.mode;
    sess.__lastRenderedIdx = sess.idx;
    sess.__lastRenderedMode = sess.mode;
    const queueFrame = typeof window !== "undefined" && typeof window.requestAnimationFrame === "function" ? (cb) => window.requestAnimationFrame(cb) : (cb) => setTimeout(cb, 0);
    if (scroller) {
      if (sameQuestion) {
        const targetY = typeof sess.idx === "number" ? getStoredScroll(sess, sess.idx) ?? prevScrollY : prevScrollY;
        if (typeof sess.idx === "number") {
          storeScrollPosition(sess, sess.idx, targetY);
        }
        const restore = () => {
          if (Math.abs(readScrollPosition(scroller) - targetY) > 1) {
            applyScrollPosition(scroller, targetY);
          }
        };
        queueFrame(restore);
      } else {
        const storedScroll = getStoredScroll(sess, sess.idx);
        const targetY = storedScroll ?? 0;
        if (typeof sess.idx === "number" && storedScroll == null) {
          storeScrollPosition(sess, sess.idx, targetY);
        }
        const restore = () => {
          applyScrollPosition(scroller, targetY);
        };
        queueFrame(restore);
      }
    }
  }
  function renderSidebarMeta(sidebar, sess, changeSummary) {
    const info = document.createElement("div");
    info.className = "exam-sidebar-info";
    const attempts = document.createElement("div");
    attempts.innerHTML = `<strong>Attempts:</strong> ${sess.exam.results?.length || 0}`;
    info.appendChild(attempts);
    if (sess.mode === "review") {
      if (sess.result.durationMs) {
        const duration = document.createElement("div");
        duration.innerHTML = `<strong>Duration:</strong> ${formatDuration(sess.result.durationMs)}`;
        info.appendChild(duration);
      }
      const summary = changeSummary || (sess.result ? summarizeAnswerChanges(sess.result.questionStats || [], sess.exam, sess.result.answers || {}) : null);
      if (summary) {
        const changeMeta = document.createElement("div");
        changeMeta.innerHTML = `<strong>Answer switches:</strong> ${summary.switched || 0} (Returned: ${summary.returnedToOriginal || 0}, Right \u2192 Wrong: ${summary.rightToWrong || 0}, Wrong \u2192 Right: ${summary.wrongToRight || 0})`;
        info.appendChild(changeMeta);
      }
    } else if (sess.mode === "taking") {
      if (sess.exam.timerMode === "timed") {
        const remaining = typeof sess.remainingMs === "number" ? sess.remainingMs : totalExamTimeMs(sess.exam);
        const timer = document.createElement("div");
        timer.innerHTML = `<strong>Time Remaining:</strong> ${formatCountdown(remaining)}`;
        info.appendChild(timer);
        const pace = document.createElement("div");
        pace.innerHTML = `<strong>Pace:</strong> ${sess.exam.secondsPerQuestion}s/question`;
        info.appendChild(pace);
      } else {
        const timerMode = document.createElement("div");
        timerMode.innerHTML = "<strong>Timer:</strong> Untimed";
        info.appendChild(timerMode);
        const elapsed = document.createElement("div");
        elapsed.innerHTML = `<strong>Elapsed:</strong> ${formatDuration(currentElapsedMs(sess))}`;
        info.appendChild(elapsed);
      }
    }
    sidebar.appendChild(info);
  }
  async function saveProgressAndExit(sess, render) {
    stopTimer(sess);
    const questionStats = snapshotQuestionStats(sess);
    const payload = {
      examId: sess.exam.id,
      exam: clone5(sess.exam),
      idx: sess.idx,
      answers: { ...sess.answers || {} },
      flagged: { ...sess.flagged || {} },
      checked: { ...sess.checked || {} },
      remainingMs: typeof sess.remainingMs === "number" ? Math.max(0, sess.remainingMs) : null,
      elapsedMs: sess.elapsedMs || 0,
      mode: "taking",
      questionStats
    };
    await saveExamSessionProgress(payload);
    lastExamStatusMessage = "Attempt saved. You can resume later.";
    teardownKeyboardNavigation();
    setExamSession(null);
    render();
  }
  async function finalizeExam(sess, render, options = {}) {
    const isAuto = Boolean(options.autoSubmit);
    stopTimer(sess);
    const unanswered = sess.exam.questions.map((_, idx) => sess.answers[idx] == null ? idx + 1 : null).filter(Number.isFinite);
    if (!isAuto && unanswered.length) {
      const list = unanswered.join(", ");
      const confirm2 = await confirmModal(`You have ${unanswered.length} unanswered question${unanswered.length === 1 ? "" : "s"} (Question${unanswered.length === 1 ? "" : "s"}: ${list}). Submit anyway?`);
      if (!confirm2) return;
    }
    const answers = {};
    let correct = 0;
    let answeredCount = 0;
    sess.exam.questions.forEach((question, idx) => {
      const ans = sess.answers[idx];
      if (ans != null) {
        answers[idx] = ans;
        answeredCount += 1;
        if (ans === question.answer) correct += 1;
      }
    });
    const flagged = Object.entries(sess.flagged || {}).filter(([_, val]) => Boolean(val)).map(([idx]) => Number(idx));
    const questionStats = snapshotQuestionStats(sess);
    const changeSummary = summarizeAnswerChanges(questionStats, sess.exam, answers);
    const result = {
      id: uid(),
      when: Date.now(),
      correct,
      total: sess.exam.questions.length,
      answers,
      flagged,
      durationMs: sess.elapsedMs || 0,
      answered: answeredCount,
      questionStats,
      changeSummary
    };
    const updatedExam = clone5(sess.exam);
    updatedExam.results = [...updatedExam.results || [], result];
    updatedExam.updatedAt = Date.now();
    await upsertExam(updatedExam);
    await deleteExamSessionProgress(updatedExam.id).catch(() => {
    });
    if (isAuto) {
      lastExamStatusMessage = "Time expired. Attempt submitted automatically.";
    }
    teardownKeyboardNavigation();
    setExamSession({ mode: "summary", exam: updatedExam, latestResult: result });
    render();
  }
  function renderSummary(root, render, sess) {
    const wrap = document.createElement("div");
    wrap.className = "exam-summary";
    const title = document.createElement("h2");
    title.textContent = `${sess.exam.examTitle} \u2014 Results`;
    wrap.appendChild(title);
    const score = document.createElement("div");
    score.className = "exam-summary-score";
    const pct = sess.latestResult.total ? Math.round(sess.latestResult.correct / sess.latestResult.total * 100) : 0;
    score.innerHTML = `<span class="score-number">${sess.latestResult.correct}/${sess.latestResult.total}</span><span class="score-percent">${pct}%</span>`;
    wrap.appendChild(score);
    const metrics = document.createElement("div");
    metrics.className = "exam-summary-metrics";
    metrics.appendChild(createStat("Answered", `${sess.latestResult.answered}/${sess.latestResult.total}`));
    metrics.appendChild(createStat("Flagged", String(sess.latestResult.flagged.length)));
    metrics.appendChild(createStat("Duration", formatDuration(sess.latestResult.durationMs)));
    wrap.appendChild(metrics);
    const actions = document.createElement("div");
    actions.className = "exam-summary-actions";
    const reviewBtn = document.createElement("button");
    reviewBtn.className = "btn";
    reviewBtn.textContent = "Review Attempt";
    reviewBtn.addEventListener("click", () => {
      setExamSession({
        mode: "review",
        exam: clone5(sess.exam),
        result: clone5(sess.latestResult),
        idx: 0,
        fromSummary: clone5(sess.latestResult)
      });
      render();
    });
    actions.appendChild(reviewBtn);
    const retake = document.createElement("button");
    retake.className = "btn secondary";
    retake.textContent = "Retake Exam";
    retake.addEventListener("click", () => {
      setExamSession(createTakingSession(sess.exam));
      render();
    });
    actions.appendChild(retake);
    const exit = document.createElement("button");
    exit.className = "btn";
    exit.textContent = "Back to Exams";
    exit.addEventListener("click", () => {
      setExamSession(null);
      render();
    });
    actions.appendChild(exit);
    wrap.appendChild(actions);
    root.appendChild(wrap);
  }
  function openExamEditor(existing, render) {
    const { exam } = ensureExamShape(existing || {
      id: uid(),
      examTitle: "New Exam",
      timerMode: "untimed",
      secondsPerQuestion: DEFAULT_SECONDS,
      questions: [],
      results: []
    });
    let dirty = false;
    const markDirty = () => {
      dirty = true;
    };
    const floating = createFloatingWindow({
      title: existing ? "Edit Exam" : "Create Exam",
      width: 980,
      onBeforeClose: async (reason) => {
        if (reason === "saved") return true;
        if (!dirty) return true;
        const choice = await promptSaveChoice();
        if (choice === "cancel") return false;
        if (choice === "discard") return true;
        if (choice === "save") {
          const ok = await persistExam();
          if (ok) {
            dirty = false;
            render();
          }
          return ok;
        }
        return false;
      }
    });
    const form = document.createElement("form");
    form.className = "exam-editor";
    floating.body.appendChild(form);
    const error = document.createElement("div");
    error.className = "exam-error";
    form.appendChild(error);
    const titleField = document.createElement("label");
    titleField.className = "exam-field";
    const titleLabel = document.createElement("span");
    titleLabel.className = "exam-field-label";
    titleLabel.textContent = "Title";
    const titleInput = document.createElement("input");
    titleInput.className = "input";
    titleInput.value = exam.examTitle;
    titleInput.addEventListener("input", () => {
      exam.examTitle = titleInput.value;
      markDirty();
    });
    titleField.append(titleLabel, titleInput);
    form.appendChild(titleField);
    const timerRow = document.createElement("div");
    timerRow.className = "exam-timer-row";
    form.appendChild(timerRow);
    const modeField = document.createElement("label");
    modeField.className = "exam-field";
    const modeSpan = document.createElement("span");
    modeSpan.className = "exam-field-label";
    modeSpan.textContent = "Timer Mode";
    const modeSelect = document.createElement("select");
    modeSelect.className = "input";
    ["untimed", "timed"].forEach((mode) => {
      const opt = document.createElement("option");
      opt.value = mode;
      opt.textContent = mode === "timed" ? "Timed" : "Untimed";
      modeSelect.appendChild(opt);
    });
    modeSelect.value = exam.timerMode;
    modeSelect.addEventListener("change", () => {
      exam.timerMode = modeSelect.value;
      secondsField.classList.toggle("is-hidden", exam.timerMode !== "timed");
      markDirty();
    });
    modeField.append(modeSpan, modeSelect);
    timerRow.appendChild(modeField);
    const secondsField = document.createElement("label");
    secondsField.className = "exam-field";
    const secondsSpan = document.createElement("span");
    secondsSpan.className = "exam-field-label";
    secondsSpan.textContent = "Seconds per question";
    const secondsInput = document.createElement("input");
    secondsInput.type = "number";
    secondsInput.min = "10";
    secondsInput.className = "input";
    secondsInput.value = String(exam.secondsPerQuestion);
    secondsInput.addEventListener("input", () => {
      const val = Number(secondsInput.value);
      if (!Number.isNaN(val) && val > 0) {
        exam.secondsPerQuestion = val;
        markDirty();
      }
    });
    secondsField.append(secondsSpan, secondsInput);
    if (exam.timerMode !== "timed") secondsField.classList.add("is-hidden");
    timerRow.appendChild(secondsField);
    const questionsHeader = document.createElement("div");
    questionsHeader.className = "exam-question-header";
    const qTitle = document.createElement("h3");
    qTitle.textContent = "Questions";
    const addQuestion = document.createElement("button");
    addQuestion.type = "button";
    addQuestion.className = "btn secondary";
    addQuestion.textContent = "Add Question";
    addQuestion.addEventListener("click", () => {
      exam.questions.push(createBlankQuestion());
      markDirty();
      scheduleRenderQuestions();
    });
    questionsHeader.append(qTitle, addQuestion);
    form.appendChild(questionsHeader);
    const questionSection = document.createElement("div");
    questionSection.className = "exam-question-section";
    form.appendChild(questionSection);
    function renderQuestions() {
      questionSection.innerHTML = "";
      if (!exam.questions.length) {
        const empty = document.createElement("p");
        empty.className = "exam-question-empty";
        empty.textContent = "No questions yet. Add your first question to get started.";
        questionSection.appendChild(empty);
        return;
      }
      const fragment = document.createDocumentFragment();
      exam.questions.forEach((question, idx) => {
        const card = document.createElement("div");
        card.className = "exam-question-editor";
        const header = document.createElement("div");
        header.className = "exam-question-editor-header";
        const label = document.createElement("h4");
        label.textContent = `Question ${idx + 1}`;
        header.appendChild(label);
        const remove = document.createElement("button");
        remove.type = "button";
        remove.className = "ghost-btn";
        remove.textContent = "Remove";
        remove.addEventListener("click", () => {
          exam.questions.splice(idx, 1);
          markDirty();
          scheduleRenderQuestions();
        });
        header.appendChild(remove);
        card.appendChild(header);
        const stemField = document.createElement("div");
        stemField.className = "exam-field exam-field--rich";
        const stemLabel = document.createElement("span");
        stemLabel.className = "exam-field-label";
        stemLabel.textContent = "Prompt";
        stemField.appendChild(stemLabel);
        const stemEditor = createRichTextEditor({
          value: question.stem,
          ariaLabel: `Question ${idx + 1} prompt`,
          onChange: () => {
            question.stem = stemEditor.getValue();
            markDirty();
          }
        });
        stemEditor.element.classList.add("exam-rich-input");
        stemField.appendChild(stemEditor.element);
        card.appendChild(stemField);
        const mediaField = document.createElement("div");
        mediaField.className = "exam-field exam-field--media";
        const mediaLabel = document.createElement("span");
        mediaLabel.className = "exam-field-label";
        mediaLabel.textContent = "Media (URL or upload)";
        mediaField.appendChild(mediaLabel);
        const mediaInput = document.createElement("input");
        mediaInput.className = "input";
        mediaInput.placeholder = "https://example.com/image.png";
        mediaInput.value = question.media || "";
        mediaInput.addEventListener("input", () => {
          question.media = mediaInput.value.trim();
          updatePreview();
          markDirty();
        });
        mediaField.appendChild(mediaInput);
        const mediaUpload = document.createElement("input");
        mediaUpload.type = "file";
        mediaUpload.accept = "image/*,video/*,audio/*";
        mediaUpload.addEventListener("change", () => {
          const file = mediaUpload.files?.[0];
          if (!file) return;
          markDirty();
          const reader = new FileReader();
          reader.onload = () => {
            question.media = typeof reader.result === "string" ? reader.result : "";
            mediaInput.value = question.media;
            updatePreview();
            markDirty();
          };
          reader.readAsDataURL(file);
        });
        mediaField.appendChild(mediaUpload);
        const clearMedia = document.createElement("button");
        clearMedia.type = "button";
        clearMedia.className = "ghost-btn";
        clearMedia.textContent = "Remove media";
        clearMedia.addEventListener("click", () => {
          question.media = "";
          mediaInput.value = "";
          mediaUpload.value = "";
          updatePreview();
          markDirty();
        });
        mediaField.appendChild(clearMedia);
        card.appendChild(mediaField);
        const preview = document.createElement("div");
        preview.className = "exam-media-preview";
        function updatePreview() {
          preview.innerHTML = "";
          const el = mediaElement(question.media);
          if (el) preview.appendChild(el);
        }
        updatePreview();
        card.appendChild(preview);
        const tagsField = document.createElement("label");
        tagsField.className = "exam-field";
        const tagsLabel = document.createElement("span");
        tagsLabel.className = "exam-field-label";
        tagsLabel.textContent = "Tags (comma or | separated)";
        const tagsInput = document.createElement("input");
        tagsInput.className = "input";
        tagsInput.value = question.tags.join(", ");
        tagsInput.addEventListener("input", () => {
          question.tags = parseTagString(tagsInput.value);
          markDirty();
        });
        tagsField.append(tagsLabel, tagsInput);
        card.appendChild(tagsField);
        const explanationField = document.createElement("div");
        explanationField.className = "exam-field exam-field--rich";
        const explanationLabel = document.createElement("span");
        explanationLabel.className = "exam-field-label";
        explanationLabel.textContent = "Explanation";
        explanationField.appendChild(explanationLabel);
        const explanationEditor = createRichTextEditor({
          value: question.explanation,
          ariaLabel: `Question ${idx + 1} explanation`,
          onChange: () => {
            question.explanation = explanationEditor.getValue();
            markDirty();
          }
        });
        explanationEditor.element.classList.add("exam-rich-input");
        explanationField.appendChild(explanationEditor.element);
        card.appendChild(explanationField);
        const optionsWrap = document.createElement("div");
        optionsWrap.className = "exam-option-editor-list";
        function renderOptions() {
          optionsWrap.innerHTML = "";
          question.options.forEach((opt, optIdx) => {
            const row = document.createElement("div");
            row.className = "exam-option-editor";
            const radio = document.createElement("input");
            radio.type = "radio";
            radio.name = `correct-${question.id}`;
            radio.checked = question.answer === opt.id;
            radio.addEventListener("change", () => {
              question.answer = opt.id;
              markDirty();
            });
            row.appendChild(radio);
            const editor = createRichTextEditor({
              value: opt.text,
              ariaLabel: `Option ${optIdx + 1}`,
              onChange: () => {
                opt.text = editor.getValue();
                markDirty();
              }
            });
            editor.element.classList.add("exam-option-rich");
            row.appendChild(editor.element);
            const removeBtn = document.createElement("button");
            removeBtn.type = "button";
            removeBtn.className = "ghost-btn";
            removeBtn.textContent = "Remove";
            removeBtn.disabled = question.options.length <= 2;
            removeBtn.addEventListener("click", () => {
              question.options.splice(optIdx, 1);
              if (question.answer === opt.id) {
                question.answer = question.options[0]?.id || "";
              }
              markDirty();
              renderOptions();
            });
            row.appendChild(removeBtn);
            optionsWrap.appendChild(row);
          });
        }
        renderOptions();
        const addOption = document.createElement("button");
        addOption.type = "button";
        addOption.className = "btn secondary";
        addOption.textContent = "Add Option";
        addOption.addEventListener("click", () => {
          const opt = { id: uid(), text: "" };
          question.options.push(opt);
          markDirty();
          renderOptions();
        });
        card.appendChild(optionsWrap);
        card.appendChild(addOption);
        fragment.appendChild(card);
      });
      questionSection.appendChild(fragment);
    }
    const scheduleRenderQuestions = (() => {
      let scheduled = false;
      const schedule = typeof window !== "undefined" && typeof window.requestAnimationFrame === "function" ? window.requestAnimationFrame.bind(window) : (cb) => setTimeout(cb, 0);
      return () => {
        if (scheduled) return;
        scheduled = true;
        schedule(() => {
          scheduled = false;
          renderQuestions();
        });
      };
    })();
    scheduleRenderQuestions();
    const actions = document.createElement("div");
    actions.className = "exam-editor-actions";
    const saveBtn = document.createElement("button");
    saveBtn.type = "submit";
    saveBtn.className = "btn";
    saveBtn.textContent = "Save Exam";
    actions.appendChild(saveBtn);
    const closeBtn = document.createElement("button");
    closeBtn.type = "button";
    closeBtn.className = "btn secondary";
    closeBtn.textContent = "Close";
    closeBtn.addEventListener("click", () => {
      void floating.close("cancel");
    });
    actions.appendChild(closeBtn);
    form.appendChild(actions);
    async function persistExam() {
      error.textContent = "";
      const title = titleInput.value.trim();
      if (!title) {
        error.textContent = "Exam title is required.";
        return false;
      }
      if (!exam.questions.length) {
        error.textContent = "Add at least one question.";
        return false;
      }
      for (let i = 0; i < exam.questions.length; i += 1) {
        const question = exam.questions[i];
        question.stem = sanitizeRichText(question.stem);
        question.explanation = sanitizeRichText(question.explanation);
        question.media = question.media?.trim() || "";
        question.options = question.options.map((opt) => ({
          id: opt.id || uid(),
          text: sanitizeRichText(opt.text)
        })).filter((opt) => !isEmptyHtml(opt.text));
        question.tags = ensureArrayTags(question.tags);
        if (isEmptyHtml(question.stem)) {
          error.textContent = `Question ${i + 1} needs a prompt.`;
          return false;
        }
        if (question.options.length < 2) {
          error.textContent = `Question ${i + 1} needs at least two answer options.`;
          return false;
        }
        if (!question.answer || !question.options.some((opt) => opt.id === question.answer)) {
          question.answer = question.options[0].id;
        }
      }
      const payload = {
        ...exam,
        examTitle: title,
        updatedAt: Date.now()
      };
      await upsertExam(payload);
      return true;
    }
    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      const ok = await persistExam();
      if (!ok) return;
      dirty = false;
      await floating.close("saved");
      render();
    });
    function promptSaveChoice() {
      return new Promise((resolve) => {
        const modal = document.createElement("div");
        modal.className = "modal";
        const card = document.createElement("div");
        card.className = "card";
        const message = document.createElement("p");
        message.textContent = "Save changes before closing?";
        card.appendChild(message);
        const actionsRow = document.createElement("div");
        actionsRow.className = "modal-actions";
        const saveBtn2 = document.createElement("button");
        saveBtn2.type = "button";
        saveBtn2.className = "btn";
        saveBtn2.textContent = "Save";
        saveBtn2.addEventListener("click", () => {
          cleanup();
          resolve("save");
        });
        const discardBtn = document.createElement("button");
        discardBtn.type = "button";
        discardBtn.className = "btn secondary";
        discardBtn.textContent = "Discard";
        discardBtn.addEventListener("click", () => {
          cleanup();
          resolve("discard");
        });
        const cancelBtn = document.createElement("button");
        cancelBtn.type = "button";
        cancelBtn.className = "ghost-btn";
        cancelBtn.textContent = "Keep Editing";
        cancelBtn.addEventListener("click", () => {
          cleanup();
          resolve("cancel");
        });
        actionsRow.append(saveBtn2, discardBtn, cancelBtn);
        card.appendChild(actionsRow);
        modal.appendChild(card);
        modal.addEventListener("click", (e) => {
          if (e.target === modal) {
            cleanup();
            resolve("cancel");
          }
        });
        document.body.appendChild(modal);
        saveBtn2.focus();
        function cleanup() {
          if (modal.parentNode) document.body.removeChild(modal);
        }
      });
    }
    titleInput.focus();
  }

  // js/ui/components/popup.js
  var fieldDefs2 = {
    disease: [
      ["etiology", "Etiology"],
      ["pathophys", "Pathophys"],
      ["clinical", "Clinical"],
      ["diagnosis", "Diagnosis"],
      ["treatment", "Treatment"],
      ["complications", "Complications"],
      ["mnemonic", "Mnemonic"]
    ],
    drug: [
      ["class", "Class"],
      ["source", "Source"],
      ["moa", "MOA"],
      ["uses", "Uses"],
      ["sideEffects", "Side Effects"],
      ["contraindications", "Contraindications"],
      ["mnemonic", "Mnemonic"]
    ],
    concept: [
      ["type", "Type"],
      ["definition", "Definition"],
      ["mechanism", "Mechanism"],
      ["clinicalRelevance", "Clinical Relevance"],
      ["example", "Example"],
      ["mnemonic", "Mnemonic"]
    ]
  };
  function escapeHtml7(str = "") {
    return String(str).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#39;");
  }
  function collectExtras(item) {
    if (Array.isArray(item.extras) && item.extras.length) return item.extras;
    if (item.facts && item.facts.length) {
      return [{
        id: "legacy-facts",
        title: "Highlights",
        body: `<ul>${item.facts.map((f) => `<li>${escapeHtml7(f)}</li>`).join("")}</ul>`
      }];
    }
    return [];
  }
  var FALLBACK_ACCENTS = {
    disease: "#c084fc",
    drug: "#60a5fa",
    concept: "#4ade80"
  };
  var DEFAULT_ACCENT = "#38bdf8";
  var HEX_COLOR = /^#([0-9a-f]{3}|[0-9a-f]{6})$/i;
  function resolveAccentColor(item) {
    if (item && typeof item.color === "string" && HEX_COLOR.test(item.color.trim())) {
      return normalizeHex(item.color.trim());
    }
    const fallback = FALLBACK_ACCENTS[item?.kind];
    if (typeof fallback === "string") {
      return normalizeHex(fallback);
    }
    return DEFAULT_ACCENT;
  }
  function normalizeHex(value) {
    if (typeof value !== "string") return DEFAULT_ACCENT;
    const trimmed = value.trim();
    if (!HEX_COLOR.test(trimmed)) return DEFAULT_ACCENT;
    if (trimmed.length === 4) {
      const [, r, g, b] = trimmed;
      return `#${r}${r}${g}${g}${b}${b}`.toUpperCase();
    }
    return trimmed.toUpperCase();
  }
  function showPopup(item, options = {}) {
    const { onEdit, onColorChange, onLink, onGravityChange } = options;
    const titleText = item?.name || item?.concept || "Item";
    const accent = resolveAccentColor(item);
    const win = createFloatingWindow({ title: titleText, width: 560 });
    const card = document.createElement("div");
    card.className = "card popup-card";
    card.style.borderTop = `4px solid ${accent}`;
    const header = document.createElement("div");
    header.className = "popup-card-header";
    const title = document.createElement("h2");
    title.textContent = titleText;
    header.appendChild(title);
    card.appendChild(header);
    if (typeof onColorChange === "function") {
      const meta = document.createElement("div");
      meta.className = "popup-meta";
      const colorLabel = document.createElement("label");
      colorLabel.className = "popup-color-control";
      const labelText = document.createElement("span");
      labelText.textContent = "Accent";
      colorLabel.appendChild(labelText);
      const colorInput = document.createElement("input");
      colorInput.type = "color";
      colorInput.value = accent;
      colorLabel.appendChild(colorInput);
      const colorValue = document.createElement("span");
      colorValue.className = "popup-color-value";
      colorValue.textContent = accent;
      colorLabel.appendChild(colorValue);
      meta.appendChild(colorLabel);
      card.appendChild(meta);
      let currentAccent = accent;
      const updateAccentPreview = (value, commit = false) => {
        const normalized2 = normalizeHex(value);
        card.style.borderTop = `4px solid ${normalized2}`;
        colorValue.textContent = normalized2;
        if (commit) {
          currentAccent = normalized2;
        }
      };
      colorInput.addEventListener("input", () => {
        updateAccentPreview(colorInput.value);
      });
      colorInput.addEventListener("change", async () => {
        if (typeof onColorChange === "function") {
          const next = normalizeHex(colorInput.value);
          updateAccentPreview(next);
          try {
            await onColorChange(next);
            updateAccentPreview(next, true);
          } catch (err) {
            console.error(err);
            updateAccentPreview(currentAccent, true);
            colorInput.value = currentAccent;
          }
        } else {
          updateAccentPreview(colorInput.value, true);
        }
      });
    }
    if (typeof onGravityChange === "function") {
      const gravityBox = document.createElement("div");
      gravityBox.className = "popup-gravity";
      const gravityLabel = document.createElement("label");
      gravityLabel.className = "popup-gravity-label";
      gravityLabel.textContent = "Simulated link boost";
      const gravityInput = document.createElement("input");
      gravityInput.type = "number";
      gravityInput.min = "0";
      gravityInput.step = "1";
      gravityInput.className = "input popup-gravity-input";
      const initialBoost = typeof item.mapGravityBoost === "number" ? item.mapGravityBoost : 0;
      let currentBoost = initialBoost;
      gravityInput.value = String(initialBoost);
      gravityLabel.appendChild(gravityInput);
      gravityBox.appendChild(gravityLabel);
      const gravityHint = document.createElement("p");
      gravityHint.className = "popup-gravity-hint";
      gravityHint.textContent = "Adds to link count when organizing maps.";
      gravityBox.appendChild(gravityHint);
      const applyBoost = async () => {
        if (typeof onGravityChange !== "function") return;
        const raw = gravityInput.value;
        try {
          const normalized2 = await onGravityChange(raw);
          const value = Number(normalized2);
          if (Number.isFinite(value)) {
            currentBoost = value;
            gravityInput.value = String(value);
          } else {
            gravityInput.value = String(currentBoost);
          }
        } catch (err) {
          console.error(err);
          gravityInput.value = String(currentBoost);
        }
      };
      gravityInput.addEventListener("change", applyBoost);
      gravityInput.addEventListener("blur", applyBoost);
      card.appendChild(gravityBox);
    }
    const defs = fieldDefs2[item.kind] || [];
    defs.forEach(([field, label]) => {
      const val = item[field];
      if (!val) return;
      const sec = document.createElement("div");
      sec.className = "section";
      const tl = document.createElement("div");
      tl.className = "section-title";
      tl.textContent = label;
      sec.appendChild(tl);
      const txt = document.createElement("div");
      renderRichText(txt, val);
      sec.appendChild(txt);
      card.appendChild(sec);
    });
    const extras = collectExtras(item);
    extras.forEach((extra) => {
      if (!extra || !extra.body) return;
      const sec = document.createElement("div");
      sec.className = "section section--extra";
      const tl = document.createElement("div");
      tl.className = "section-title";
      tl.textContent = extra.title || "Additional Section";
      sec.appendChild(tl);
      const txt = document.createElement("div");
      renderRichText(txt, extra.body);
      sec.appendChild(txt);
      card.appendChild(sec);
    });
    const actions = document.createElement("div");
    actions.className = "popup-actions";
    if (typeof onEdit === "function") {
      const editBtn = document.createElement("button");
      editBtn.type = "button";
      editBtn.className = "btn secondary";
      editBtn.textContent = "Edit";
      editBtn.addEventListener("click", () => {
        void win.close("edit");
        onEdit();
      });
      actions.appendChild(editBtn);
    }
    if (typeof onLink === "function") {
      const linkBtn = document.createElement("button");
      linkBtn.type = "button";
      linkBtn.className = "btn secondary";
      linkBtn.textContent = "Link";
      linkBtn.addEventListener("click", () => {
        void win.close("link");
        onLink();
      });
      actions.appendChild(linkBtn);
    }
    const closeBtn = document.createElement("button");
    closeBtn.type = "button";
    closeBtn.className = "btn";
    closeBtn.textContent = "Close";
    closeBtn.addEventListener("click", () => {
      void win.close("close");
    });
    actions.appendChild(closeBtn);
    card.appendChild(actions);
    win.setContent(card);
    win.setTitle(titleText);
    return win;
  }

  // js/ui/components/map.js
  var TOOL = {
    NAVIGATE: "navigate",
    HIDE: "hide",
    BREAK: "break-link",
    ADD_LINK: "add-link",
    AREA: "area"
  };
  function createCursor(svg, hotX = 8, hotY = 8) {
    const encoded = encodeURIComponent(svg.trim()).replace(/%0A/g, "").replace(/%20/g, " ");
    return `url("data:image/svg+xml,${encoded}") ${hotX} ${hotY}, pointer`;
  }
  var CURSOR_STYLE = {
    hide: createCursor(
      '<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32"><path d="M6 19.5l9-9a3 3 0 0 1 4.24 0l6.5 6.5a3 3 0 0 1 0 4.24l-9 9H9a3 3 0 0 1-3-3z" fill="#f97316" /><path d="M8.2 21.2l8.6 8.6" stroke="#fed7aa" stroke-width="3" stroke-linecap="round" /><path d="M11.3 24.5l4 4" stroke="#fff7ed" stroke-width="2" stroke-linecap="round" /></svg>',
      7,
      26
    ),
    break: createCursor(
      '<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32"><circle cx="11" cy="11" r="4" fill="none" stroke="#f97316" stroke-width="2.2" /><circle cx="11" cy="21" r="4" fill="none" stroke="#f97316" stroke-width="2.2" /><path d="M14.5 13L24 3.5" stroke="#fbbf24" stroke-width="2.6" stroke-linecap="round" /><path d="M14.5 19L24 28.5" stroke="#fbbf24" stroke-width="2.6" stroke-linecap="round" /><path d="M6 6l7 7" stroke="#f97316" stroke-width="2.2" stroke-linecap="round" /><path d="M6 26l7-7" stroke="#f97316" stroke-width="2.2" stroke-linecap="round" /></svg>',
      18,
      18
    ),
    link: createCursor(
      '<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32"><path d="M12 11h5a4.5 4.5 0 0 1 0 9h-3" fill="none" stroke="#38bdf8" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" /><path d="M14 15h-4a4.5 4.5 0 0 0 0 9h5" fill="none" stroke="#38bdf8" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" /><path d="M13 19h6" stroke="#bae6fd" stroke-width="2" stroke-linecap="round" /></svg>',
      9,
      23
    )
  };
  var PAN_ACCELERATION = 1.8;
  var ZOOM_INTENSITY = 41e-4;
  var NODE_DRAG_DISTANCE_THRESHOLD = 0;
  var ICONS = {
    sliders: '<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M6 7h12" stroke="currentColor" stroke-width="1.6" stroke-linecap="round" /><path d="M6 12h8" stroke="currentColor" stroke-width="1.6" stroke-linecap="round" /><path d="M6 17h14" stroke="currentColor" stroke-width="1.6" stroke-linecap="round" /><circle cx="16" cy="7" r="2.5" stroke="currentColor" stroke-width="1.6" /><circle cx="11" cy="12" r="2.5" stroke="currentColor" stroke-width="1.6" /><circle cx="19" cy="17" r="2.5" stroke="currentColor" stroke-width="1.6" /></svg>',
    close: '<svg viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M5 5l10 10M15 5L5 15" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" /></svg>',
    plus: '<svg viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M10 4v12M4 10h12" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" /></svg>',
    search: '<svg viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><circle cx="9" cy="9" r="5.2" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" /><path d="M12.8 12.8L16.5 16.5" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" /></svg>',
    arrowRight: '<svg viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M4 10h10" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round" /><path d="M10 6l4 4-4 4" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round" /></svg>',
    gear: '<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12 8.5a3.5 3.5 0 1 0 0 7 3.5 3.5 0 0 0 0-7z" stroke="currentColor" stroke-width="1.6" /><path d="M4.5 12.5l1.8.52c.26.08.46.28.54.54l.52 1.8a.9.9 0 0 0 1.47.41l1.43-1.08a.9.9 0 0 1 .99-.07l1.63.82a.9.9 0 0 0 1.22-.41l.73-1.66a.9.9 0 0 1 .73-.52l1.88-.2a.9.9 0 0 0 .78-1.07l-.39-1.85a.9.9 0 0 1 .25-.83l1.29-1.29a.9.9 0 0 0-.01-1.27l-1.29-1.29a.9.9 0 0 0-.83-.25l-1.85.39a.9.9 0 0 1-1.07-.78l-.2-1.88A.9.9 0 0 0 13.3 2h-2.6a.9.9 0 0 0-.9.78l-.2 1.88a.9.9 0 0 1-1.07.78l-1.85-.39a.9.9 0 0 0-.83.25L4.56 6.59a.9.9 0 0 0-.01 1.27l1.29 1.29c.22.22.31.54.25.83l-.39 1.85a.9.9 0 0 0 .7 1.07z" stroke="currentColor" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round" /></svg>',
    trash: '<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M6 7h12" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" /><path d="M9 7V5a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" /><path d="M18 7v11a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2V7" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round" /><path d="M10 11v6M14 11v6" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" /></svg>'
  };
  var DEFAULT_LINK_COLOR = "#888888";
  var DEFAULT_LINE_STYLE = "solid";
  var DEFAULT_LINE_DECORATION = "none";
  var DEFAULT_DECORATION_DIRECTION = "end";
  var DEFAULT_LINE_GLOW = false;
  var DEFAULT_LINE_THICKNESS = "regular";
  var DEFAULT_CURVE_ANCHOR = 0.5;
  var CURVE_HANDLE_COUNT = 1;
  var CURVE_HANDLE_MAX_OFFSET = 3.5;
  var MIN_NODE_RADIUS = 20;
  var MAX_NODE_RADIUS = 60;
  var MAX_GRAVITY_BOOST2 = 999;
  var NODE_COLLISION_MARGIN = 36;
  var DEFAULT_REORGANIZE_SPACING = 220;
  var HANDLE_STICKY_RELEASE_DELAY = 260;
  var VIEW_MEMORY_MAX_AGE = 10 * 60 * 1e3;
  var LINE_STYLE_OPTIONS = [
    { value: "solid", label: "Smooth" },
    { value: "dashed", label: "Dashed" },
    { value: "dotted", label: "Dotted" }
  ];
  var LINE_DECORATION_OPTIONS = [
    { value: "none", label: "None" },
    { value: "arrow", label: "Arrowhead" },
    { value: "inhibit", label: "Inhibitor \u22A3" },
    { value: "block", label: "Blocked \u2715" }
  ];
  var LINE_DECORATION_DIRECTION_OPTIONS = [
    { value: "end", label: "A \u2192 B" },
    { value: "start", label: "B \u2192 A" },
    { value: "both", label: "Both directions" }
  ];
  var LINE_STYLE_CLASSNAMES = ["map-edge--solid", "map-edge--dashed", "map-edge--dotted"];
  var LINE_DECORATION_CLASSNAMES = [
    "map-edge--decoration-arrow",
    "map-edge--decoration-inhibit",
    "map-edge--decoration-block"
  ];
  var LINE_STYLE_VALUE_SET = new Set(LINE_STYLE_OPTIONS.map((option) => option.value));
  var LINE_DECORATION_VALUE_SET = new Set(LINE_DECORATION_OPTIONS.map((option) => option.value));
  var LINE_DIRECTION_VALUE_SET = new Set(LINE_DECORATION_DIRECTION_OPTIONS.map((option) => option.value));
  var LINE_THICKNESS_VALUES = {
    thin: 1.8,
    regular: 3,
    bold: 4.6
  };
  var LINE_THICKNESS_OPTIONS = [
    { value: "thin", label: "Thin" },
    { value: "regular", label: "Regular" },
    { value: "bold", label: "Bold" }
  ];
  var LINE_HOVER_WIDTH_MULTIPLIER = 1.2;
  var LINE_TYPE_PRESETS = [
    { value: "line", label: "Line", style: "solid", decoration: "none", direction: DEFAULT_DECORATION_DIRECTION },
    { value: "arrow", label: "Arrow", style: "solid", decoration: "arrow", direction: "end", directional: true },
    { value: "inhibit", label: "Inhibitor \u22A3", style: "solid", decoration: "inhibit", direction: "end", directional: true },
    { value: "blocked", label: "Blocked \u2715", style: "solid", decoration: "block", direction: DEFAULT_DECORATION_DIRECTION },
    { value: "dashed", label: "Dashed", style: "dashed", decoration: "none", direction: DEFAULT_DECORATION_DIRECTION },
    { value: "dotted", label: "Dotted", style: "dotted", decoration: "none", direction: DEFAULT_DECORATION_DIRECTION }
  ];
  var LINE_TYPE_PRESET_LOOKUP = new Map(LINE_TYPE_PRESETS.map((option) => [option.value, option]));
  var LINE_GAP_STROKE_MULTIPLIER = 2.4;
  var EDGE_DRAG_HOLD_DELAY = 160;
  var EDGE_DRAG_MOVE_THRESHOLD = 3.5;
  var EDGE_CLICK_DISTANCE = 12;
  var EDGE_ANIMATION_DURATION = 120;
  var LEGACY_STYLE_MAPPINGS = {
    "arrow": { style: "solid", decoration: "arrow", decorationDirection: "end" },
    "arrow-end": { style: "solid", decoration: "arrow", decorationDirection: "end" },
    "arrow-start": { style: "solid", decoration: "arrow", decorationDirection: "start" },
    "arrow-both": { style: "solid", decoration: "arrow", decorationDirection: "both" },
    "blocked": { style: "solid", decoration: "block", decorationDirection: "end" },
    "inhibit": { style: "solid", decoration: "inhibit", decorationDirection: "end" },
    "glow": { style: "solid", glow: true }
  };
  var KIND_FALLBACK_COLORS = {
    disease: "var(--purple)",
    drug: "var(--blue)",
    concept: "var(--green)"
  };
  var mapState = {
    tool: TOOL.NAVIGATE,
    selectionIds: [],
    previewSelection: null,
    selectionPreviewSignature: "",
    pendingLink: null,
    hiddenMenuTab: "nodes",
    panelVisible: true,
    menuPinned: false,
    menuOpen: false,
    listenersAttached: false,
    draggingView: false,
    viewWasDragged: false,
    nodeDrag: null,
    areaDrag: null,
    menuDrag: null,
    edgeDrag: null,
    selectionRect: null,
    nodeWasDragged: false,
    lastPointerDownInfo: null,
    viewBox: null,
    svg: null,
    g: null,
    positions: {},
    itemMap: {},
    elements: /* @__PURE__ */ new Map(),
    root: null,
    container: null,
    updateViewBox: () => {
    },
    selectionBox: null,
    sizeLimit: 2e3,
    minView: 100,
    lastPointer: { x: 0, y: 0, mapX: 0, mapY: 0 },
    autoPan: null,
    autoPanFrame: null,
    autoPanPointer: null,
    toolboxPos: { x: 16, y: 16 },
    toolboxDrag: null,
    toolboxEl: null,
    toolboxContainer: null,
    toolboxBadges: null,
    baseCursor: "grab",
    prefersReducedMotion: null,
    motionMedia: null,
    pendingEdgeAnimations: /* @__PURE__ */ new Map(),
    cursorOverride: null,
    defaultViewSize: null,
    lastScaleSize: null,
    viewBoxFrame: null,
    pendingViewBoxOptions: null,
    svgRect: null,
    svgRectTime: 0,
    justCompletedSelection: false,
    edgeTooltip: null,
    hoveredEdge: null,
    hoveredEdgePointer: { x: 0, y: 0 },
    currentScales: { nodeScale: 1, labelScale: 1, lineScale: 1 },
    suppressNextClick: false,
    edgeDragJustCompleted: false,
    edgePress: null,
    viewPointerId: null,
    viewDragStart: null,
    mapConfig: null,
    mapConfigLoaded: false,
    blocks: [],
    visibleItems: [],
    searchValue: "",
    searchFeedback: null,
    searchInput: null,
    searchFieldEl: null,
    searchFeedbackEl: null,
    searchSuggestions: [],
    searchSuggestionsEl: null,
    searchActiveIndex: -1,
    searchSuggestionTimer: null,
    paletteSearch: "",
    nodeRadii: null,
    gravityModel: null,
    edgeLayer: null,
    nodeLayer: null,
    lineMarkers: /* @__PURE__ */ new Map(),
    markerDefs: null,
    lineMarkerCache: /* @__PURE__ */ new Map(),
    edgeRefs: /* @__PURE__ */ new Map(),
    allEdges: /* @__PURE__ */ new Set(),
    pendingNodeUpdates: /* @__PURE__ */ new Map(),
    pendingEdgeUpdates: /* @__PURE__ */ new Set(),
    nodeUpdateFrame: null,
    edgeUpdateFrame: null,
    activeLineMenu: null,
    pendingFocusId: null,
    restoredViewFromMemory: false,
    viewMemoryTimer: null,
    viewMemoryDirty: false
  };
  function normalizeMapTab(tab = {}) {
    const filter = tab.filter && typeof tab.filter === "object" ? tab.filter : {};
    const layout = {};
    if (tab.layout && typeof tab.layout === "object") {
      Object.entries(tab.layout).forEach(([id, pos]) => {
        if (!id || !pos || typeof pos !== "object") return;
        const x = Number(pos.x);
        const y = Number(pos.y);
        if (!Number.isFinite(x) || !Number.isFinite(y)) return;
        layout[id] = { x, y };
      });
    }
    const viewState = normalizeViewState(tab.viewState || tab.view || tab.viewBox);
    const normalized2 = {
      id: tab.id || uid(),
      name: tab.name || "Untitled map",
      includeLinked: tab.includeLinked !== false,
      manualMode: Boolean(tab.manualMode),
      manualIds: Array.isArray(tab.manualIds) ? Array.from(new Set(tab.manualIds.filter(Boolean))) : [],
      layout,
      layoutSeeded: tab.layoutSeeded === true,
      filter: {
        blockId: filter.blockId || "",
        weeks: getFilterWeeks(filter),
        lectureKeys: getFilterLectureKeys(filter)
      },
      viewState
    };
    return normalized2;
  }
  function normalizeViewState(view = {}) {
    if (!view || typeof view !== "object") {
      return null;
    }
    const x = Number(view.x);
    const y = Number(view.y);
    const width = Number(view.w ?? view.width);
    const height = Number(view.h ?? view.height ?? width);
    const timestamp = Number(view.timestamp ?? view.time ?? view.updatedAt);
    if (!Number.isFinite(x) || !Number.isFinite(y) || !Number.isFinite(width) || !Number.isFinite(height)) {
      return null;
    }
    if (width <= 0 || height <= 0) {
      return null;
    }
    return {
      x,
      y,
      w: width,
      h: height,
      timestamp: Number.isFinite(timestamp) ? timestamp : 0
    };
  }
  function getRestorableViewState(tab) {
    if (!tab) return null;
    const normalized2 = normalizeViewState(tab.viewState);
    if (!normalized2) {
      return null;
    }
    const lastUpdated = Number(normalized2.timestamp) || 0;
    if (lastUpdated > 0) {
      const age = Date.now() - lastUpdated;
      if (Number.isFinite(age) && age > VIEW_MEMORY_MAX_AGE) {
        return null;
      }
    }
    return normalized2;
  }
  function findNewestVisibleNode(items = []) {
    if (!Array.isArray(items) || !items.length) {
      return null;
    }
    let newest = null;
    let newestValue = -Infinity;
    items.forEach((item) => {
      if (!item || typeof item !== "object") return;
      const created = Number(item.createdAt ?? item.updatedAt);
      if (Number.isFinite(created) && created > newestValue) {
        newest = item;
        newestValue = created;
      }
    });
    return newest;
  }
  function rememberViewBox() {
    if (!mapState.viewBox) return;
    const tab = getActiveTab();
    if (!tab) return;
    const snapshot = {
      x: mapState.viewBox.x,
      y: mapState.viewBox.y,
      w: mapState.viewBox.w,
      h: mapState.viewBox.h,
      timestamp: Date.now()
    };
    tab.viewState = snapshot;
    mapState.viewMemoryDirty = true;
    scheduleViewStatePersist();
  }
  function scheduleViewStatePersist() {
    if (mapState.viewMemoryTimer) return;
    mapState.viewMemoryTimer = setTimeout(() => {
      mapState.viewMemoryTimer = null;
      if (!mapState.viewMemoryDirty) return;
      mapState.viewMemoryDirty = false;
      persistMapConfig().catch(() => {
      });
    }, 300);
  }
  async function flushViewStatePersist() {
    if (mapState.viewMemoryTimer) {
      clearTimeout(mapState.viewMemoryTimer);
      mapState.viewMemoryTimer = null;
    }
    if (!mapState.viewMemoryDirty) {
      return;
    }
    mapState.viewMemoryDirty = false;
    await persistMapConfig();
  }
  function parseWeekValue(value) {
    if (typeof value === "number" && Number.isFinite(value)) {
      return value;
    }
    if (typeof value === "string" && value.trim()) {
      const parsed = Number(value);
      if (Number.isFinite(parsed)) {
        return parsed;
      }
    }
    return null;
  }
  function normalizeWeekArray(values = []) {
    const seen = /* @__PURE__ */ new Set();
    const result = [];
    values.forEach((value) => {
      const week = parseWeekValue(value);
      if (!Number.isFinite(week) || seen.has(week)) return;
      seen.add(week);
      result.push(week);
    });
    result.sort((a, b) => a - b);
    return result;
  }
  function normalizeLectureKeyArray(values = []) {
    const seen = /* @__PURE__ */ new Set();
    const result = [];
    values.forEach((value) => {
      const key = typeof value === "string" ? value.trim() : "";
      if (!key || seen.has(key)) return;
      seen.add(key);
      result.push(key);
    });
    return result;
  }
  function getFilterWeeks(filter = {}) {
    if (!filter || typeof filter !== "object") {
      return [];
    }
    const weeks = normalizeWeekArray(filter.weeks);
    if (weeks.length) {
      return weeks;
    }
    const legacy = parseWeekValue(filter.week);
    return Number.isFinite(legacy) ? [legacy] : [];
  }
  function getFilterLectureKeys(filter = {}) {
    if (!filter || typeof filter !== "object") {
      return [];
    }
    const keys = normalizeLectureKeyArray(filter.lectureKeys);
    if (keys.length) {
      return keys;
    }
    const legacy = typeof filter.lectureKey === "string" ? filter.lectureKey.trim() : "";
    return legacy ? [legacy] : [];
  }
  function setFilterWeeks(targetFilter, weeks = []) {
    if (!targetFilter || typeof targetFilter !== "object") return;
    targetFilter.weeks = normalizeWeekArray(weeks);
    if ("week" in targetFilter) {
      targetFilter.week = "";
    }
  }
  function setFilterLectureKeys(targetFilter, keys = []) {
    if (!targetFilter || typeof targetFilter !== "object") return;
    targetFilter.lectureKeys = normalizeLectureKeyArray(keys);
    if ("lectureKey" in targetFilter) {
      targetFilter.lectureKey = "";
    }
  }
  function deriveItemGroupKeys(item) {
    const groups = [];
    const lectures = Array.isArray(item?.lectures) ? item.lectures : [];
    if (lectures.length) {
      lectures.forEach((lecture) => {
        const blockKey = lecture.blockId ? `block:${lecture.blockId}` : "block:__";
        const lectureId = lecture.id != null ? `lec:${lecture.id}` : "";
        const lectureName = lecture.name ? `name:${lecture.name}` : "";
        const week = Number.isFinite(lecture.week) ? `week:${lecture.week}` : "";
        const key = [blockKey, week, lectureId || lectureName].filter(Boolean).join("|");
        groups.push(key || blockKey);
      });
    } else if (Array.isArray(item?.blocks) && item.blocks.length) {
      item.blocks.forEach((blockId) => {
        groups.push(`block-only:${blockId}`);
      });
    }
    if (!groups.length) {
      groups.push(`kind:${item?.kind || "concept"}`);
    }
    return groups;
  }
  function parseGroupKey(key = "") {
    const info = { block: "__", week: "__", lecture: key || "__" };
    if (!key) {
      return info;
    }
    const parts = String(key).split("|");
    parts.forEach((part) => {
      if (part.startsWith("block:")) {
        const value = part.slice(6);
        info.block = value || "__";
      } else if (part.startsWith("block-only:")) {
        const value = part.slice(11);
        info.block = value || "__";
      } else if (part.startsWith("week:")) {
        const value = part.slice(5);
        info.week = value || "__";
      } else if (part.startsWith("lec:")) {
        const value = part.slice(4);
        info.lecture = value || info.lecture;
      } else if (part.startsWith("name:") && (info.lecture === key || info.lecture === "__")) {
        const value = part.slice(5);
        info.lecture = value || info.lecture;
      }
    });
    if (!info.lecture || info.lecture === "__") {
      info.lecture = key || "__";
    }
    return info;
  }
  function getPrimaryGroupKey(item, keys = deriveItemGroupKeys(item)) {
    if (Array.isArray(keys) && keys.length) {
      return keys[0];
    }
    return `kind:${item?.kind || "concept"}`;
  }
  function normalizeMapConfig(config = null) {
    const base = config && typeof config === "object" ? { ...config } : {};
    const tabs2 = Array.isArray(base.tabs) ? base.tabs.map(normalizeMapTab) : [normalizeMapTab({ id: "default", name: "All concepts", includeLinked: true, layoutSeeded: true })];
    const ids = /* @__PURE__ */ new Set();
    const deduped = [];
    tabs2.forEach((tab) => {
      if (ids.has(tab.id)) {
        const clone6 = { ...tab, id: uid() };
        ids.add(clone6.id);
        deduped.push(clone6);
      } else {
        ids.add(tab.id);
        deduped.push(tab);
      }
    });
    const active = deduped.find((tab) => tab.id === base.activeTabId) || deduped[0];
    return {
      activeTabId: active.id,
      tabs: deduped
    };
  }
  function ensureTabLayout(tab) {
    if (!tab) return {};
    if (!tab.layout || typeof tab.layout !== "object") {
      tab.layout = {};
    }
    return tab.layout;
  }
  function normalizeGravityBoost(value) {
    if (value === null || value === void 0) return 0;
    const num = Number(value);
    if (!Number.isFinite(num) || num <= 0) return 0;
    const clamped = Math.min(MAX_GRAVITY_BOOST2, num);
    return Math.round(clamped * 100) / 100;
  }
  function getItemGravityBoost(item) {
    if (!item || typeof item !== "object") return 0;
    return normalizeGravityBoost(item.mapGravityBoost);
  }
  function buildGravityModel(items = []) {
    const list = Array.isArray(items) ? items : [];
    const idSet = /* @__PURE__ */ new Set();
    list.forEach((item) => {
      if (item?.id) {
        idSet.add(item.id);
      }
    });
    const adjacency = /* @__PURE__ */ new Map();
    const weights = /* @__PURE__ */ new Map();
    const neighborWeights = /* @__PURE__ */ new Map();
    const baseCounts = /* @__PURE__ */ new Map();
    let maxWeight = 0;
    list.forEach((item) => {
      if (!item || !item.id) return;
      const seen = /* @__PURE__ */ new Set();
      const neighbors = [];
      (item.links || []).forEach((link) => {
        const targetId = link?.id;
        if (!targetId) return;
        if (link.hidden) return;
        if (!idSet.has(targetId)) return;
        if (seen.has(targetId)) return;
        seen.add(targetId);
        neighbors.push(targetId);
      });
      adjacency.set(item.id, neighbors);
      const degree = neighbors.length;
      const boost = getItemGravityBoost(item);
      const weight = degree + boost;
      weights.set(item.id, weight);
      baseCounts.set(item.id, { degree, boost });
      if (weight > maxWeight) {
        maxWeight = weight;
      }
    });
    list.forEach((item) => {
      if (!item?.id) return;
      const neighbors = adjacency.get(item.id) || [];
      const sorted = neighbors.map((id) => weights.get(id) || 0).sort((a, b) => b - a);
      neighborWeights.set(item.id, sorted);
    });
    const influence = /* @__PURE__ */ new Map();
    list.forEach((item) => {
      if (!item?.id) return;
      const neighbors = adjacency.get(item.id) || [];
      const baseWeight = weights.get(item.id) || 0;
      if (!neighbors.length) {
        influence.set(item.id, baseWeight);
        return;
      }
      let directSum = 0;
      neighbors.forEach((id) => {
        directSum += weights.get(id) || 0;
      });
      const directAvg = directSum / neighbors.length;
      let secondSum = 0;
      neighbors.forEach((id) => {
        const secondNeighbors = adjacency.get(id) || [];
        if (!secondNeighbors.length) return;
        let secondWeight = 0;
        secondNeighbors.forEach((innerId) => {
          secondWeight += weights.get(innerId) || 0;
        });
        secondSum += secondWeight / secondNeighbors.length;
      });
      const secondAvg = neighbors.length ? secondSum / neighbors.length : 0;
      const score = baseWeight + directAvg * 0.6 + secondAvg * 0.3;
      influence.set(item.id, score);
    });
    return { weights, adjacency, neighborWeights, influence, maxWeight, baseCounts };
  }
  function computeNodeRadiusFromWeight(weight, maxWeight) {
    const clampedMax = Math.max(Number(maxWeight) || 0, 1);
    const normalized2 = clamp2((Number(weight) || 0) / clampedMax, 0, 1);
    return MIN_NODE_RADIUS + (MAX_NODE_RADIUS - MIN_NODE_RADIUS) * normalized2;
  }
  function computeRadiiFromModel(model, items = mapState.visibleItems || []) {
    const radii = /* @__PURE__ */ new Map();
    if (!model) return radii;
    const { weights, maxWeight } = model;
    (Array.isArray(items) ? items : []).forEach((item) => {
      if (!item?.id) return;
      const radius = computeNodeRadiusFromWeight(weights.get(item.id) || 0, maxWeight);
      radii.set(item.id, radius);
    });
    return radii;
  }
  function refreshGravityModel() {
    const items = Array.isArray(mapState.visibleItems) ? mapState.visibleItems : [];
    const model = buildGravityModel(items);
    mapState.gravityModel = model;
    const nodeRadii = computeRadiiFromModel(model, items);
    mapState.nodeRadii = nodeRadii;
    const touched = [];
    nodeRadii.forEach((radius, id) => {
      const entry = mapState.elements?.get(id);
      if (!entry?.circle) return;
      entry.circle.dataset.radius = radius;
      updateNodeGeometry(id, entry);
      touched.push(id);
    });
    touched.forEach((id) => updateEdgesFor(id));
    return model;
  }
  function computeLayoutCenter() {
    const positions = mapState.positions || {};
    let minX = Infinity;
    let maxX = -Infinity;
    let minY = Infinity;
    let maxY = -Infinity;
    Object.values(positions).forEach((pos) => {
      if (!pos) return;
      const { x, y } = pos;
      if (!Number.isFinite(x) || !Number.isFinite(y)) return;
      if (x < minX) minX = x;
      if (x > maxX) maxX = x;
      if (y < minY) minY = y;
      if (y > maxY) maxY = y;
    });
    if (!Number.isFinite(minX) || !Number.isFinite(maxX) || !Number.isFinite(minY) || !Number.isFinite(maxY)) {
      const limit = Math.max(mapState.sizeLimit || 0, 2e3);
      const fallback = limit / 2;
      return { x: fallback, y: fallback };
    }
    return {
      x: (minX + maxX) / 2,
      y: (minY + maxY) / 2
    };
  }
  function computeSmartLayout(model, options = {}) {
    const items = Array.isArray(mapState.visibleItems) ? mapState.visibleItems.filter((it) => it && it.id) : [];
    if (!items.length) return {};
    const workingModel = model || mapState.gravityModel || buildGravityModel(items);
    const { weights, adjacency, influence } = workingModel;
    const radii = computeRadiiFromModel(workingModel, items);
    let totalRadius = 0;
    let radiusCount = 0;
    let maxRadius = MIN_NODE_RADIUS;
    const weightValues = [];
    items.forEach((item) => {
      const radius = radii.get(item.id) || MIN_NODE_RADIUS;
      totalRadius += radius;
      radiusCount += 1;
      if (radius > maxRadius) {
        maxRadius = radius;
      }
      weightValues.push(weights.get(item.id) || 0);
    });
    const avgRadius = radiusCount ? totalRadius / radiusCount : MIN_NODE_RADIUS;
    const typicalRadius = Math.max(avgRadius, maxRadius * 0.75, MIN_NODE_RADIUS);
    const sizeLimit = Math.max(mapState.sizeLimit || 0, 2600);
    const requestedCenter = options.center || computeLayoutCenter();
    const fallbackCenter = sizeLimit > 0 ? sizeLimit / 2 : typicalRadius * 20;
    const center = {
      x: Number.isFinite(requestedCenter?.x) ? clamp2(requestedCenter.x, typicalRadius, sizeLimit - typicalRadius) : fallbackCenter,
      y: Number.isFinite(requestedCenter?.y) ? clamp2(requestedCenter.y, typicalRadius, sizeLimit - typicalRadius) : fallbackCenter
    };
    const baseSpacing = Math.max(
      options.baseSpacing ?? DEFAULT_REORGANIZE_SPACING,
      typicalRadius * 3.4,
      maxRadius * 2.6
    );
    const margin = NODE_COLLISION_MARGIN + Math.max(24, typicalRadius * 0.5);
    const groupNodes = /* @__PURE__ */ new Map();
    const primaryGroupById = /* @__PURE__ */ new Map();
    items.forEach((item) => {
      if (!item?.id) return;
      const keys = deriveItemGroupKeys(item);
      const primary = getPrimaryGroupKey(item, keys);
      primaryGroupById.set(item.id, primary);
      const list = groupNodes.get(primary) || [];
      list.push(item.id);
      groupNodes.set(primary, list);
    });
    if (!groupNodes.size) {
      return {};
    }
    const groupMetrics = /* @__PURE__ */ new Map();
    groupNodes.forEach((ids2, key) => {
      let sumRadius = 0;
      let maxGroupRadius = 0;
      let totalWeight = 0;
      let totalInfluence = 0;
      ids2.forEach((id) => {
        const radius = radii.get(id) || typicalRadius;
        sumRadius += radius;
        if (radius > maxGroupRadius) {
          maxGroupRadius = radius;
        }
        totalWeight += weights.get(id) || 0;
        totalInfluence += influence.get(id) || 0;
      });
      groupMetrics.set(key, {
        count: ids2.length,
        sumRadius,
        maxRadius: maxGroupRadius || typicalRadius,
        totalWeight,
        totalInfluence
      });
    });
    const blockAggregates = /* @__PURE__ */ new Map();
    const weekAggregates = /* @__PURE__ */ new Map();
    groupMetrics.forEach((metric, key) => {
      const parsed = parseGroupKey(key);
      const blockKey = parsed.block || "__";
      const weekId = parsed.week || "__";
      const blockEntry = blockAggregates.get(blockKey) || { weight: 0, count: 0 };
      blockEntry.weight += metric.totalInfluence + metric.totalWeight;
      blockEntry.count += metric.count;
      blockAggregates.set(blockKey, blockEntry);
      const weekKey = `${blockKey}::${weekId}`;
      const weekEntry = weekAggregates.get(weekKey) || { weight: 0, count: 0 };
      weekEntry.weight += metric.totalInfluence + metric.totalWeight;
      weekEntry.count += metric.count;
      weekAggregates.set(weekKey, weekEntry);
    });
    const groupSpacingCache = /* @__PURE__ */ new Map();
    const groupSpacingBase = Math.max(baseSpacing * 0.95, typicalRadius * 3.6, maxRadius * 2.5 + 56);
    const lectureSpacingBase = Math.max(groupSpacingBase * 1.22, typicalRadius * 4.6);
    const weekSpacingBase = Math.max(lectureSpacingBase * 1.18, typicalRadius * 5.3);
    const blockSpacingBase = Math.max(weekSpacingBase * 1.22, typicalRadius * 6);
    function getGroupSpacing(key) {
      if (groupSpacingCache.has(key)) return groupSpacingCache.get(key);
      const metric = groupMetrics.get(key) || {
        count: 0,
        sumRadius: 0,
        maxRadius: typicalRadius,
        totalWeight: 0,
        totalInfluence: 0
      };
      const avgRadius2 = metric.count ? metric.sumRadius / metric.count : typicalRadius;
      const influenceBoost = Math.sqrt(Math.max(metric.totalInfluence, metric.totalWeight, 0)) * typicalRadius * 0.35;
      const spacing = Math.max(
        groupSpacingBase,
        avgRadius2 * 3 + 60,
        metric.maxRadius * 3.4 + 80,
        baseSpacing + influenceBoost
      );
      groupSpacingCache.set(key, spacing);
      return spacing;
    }
    const clampClusterPoint = (pos) => ({
      x: clamp2(pos.x, margin, sizeLimit - margin),
      y: clamp2(pos.y, margin, sizeLimit - margin)
    });
    const clampPosition = (pos, radius) => {
      const r = Math.max(radius || MIN_NODE_RADIUS, MIN_NODE_RADIUS);
      const minCoord = r + margin;
      const maxCoord = Math.max(minCoord, sizeLimit - r - margin);
      return {
        x: clamp2(pos.x, minCoord, maxCoord),
        y: clamp2(pos.y, minCoord, maxCoord)
      };
    };
    const placements = /* @__PURE__ */ new Map();
    const orbitUsage = /* @__PURE__ */ new Map();
    const groupOrbit = /* @__PURE__ */ new Map();
    const resolveCollisions = (id, initial, radiusOverride = null) => {
      const radius = radiusOverride ?? radii.get(id) ?? typicalRadius;
      let position = { x: initial.x, y: initial.y };
      for (let iter = 0; iter < 8; iter += 1) {
        let adjusted = false;
        placements.forEach((otherPos, otherId) => {
          if (otherId === id) return;
          const otherRadius = radii.get(otherId) || typicalRadius;
          const minDistance = radius + otherRadius + margin;
          const dx = position.x - otherPos.x;
          const dy = position.y - otherPos.y;
          const dist = Math.hypot(dx, dy) || 1e-4;
          if (dist < minDistance) {
            const push = (minDistance - dist) * 0.5;
            position.x += dx / dist * push;
            position.y += dy / dist * push;
            adjusted = true;
          }
        });
        position = clampPosition(position, radius);
        if (!adjusted) break;
      }
      return position;
    };
    const ensureOrbitState = (id, options2 = {}) => {
      if (orbitUsage.has(id)) {
        const existing = orbitUsage.get(id);
        if (Number.isFinite(options2.baseDistance)) {
          existing.baseDistance = options2.baseDistance;
        }
        if (Number.isFinite(options2.layerSpacing)) {
          existing.layerSpacing = options2.layerSpacing;
        }
        if (Number.isFinite(options2.slotWeight)) {
          existing.slots = Math.max(6, Math.round(options2.slotWeight * 1.5) + 6);
        }
        return existing;
      }
      const slotWeight = Number.isFinite(options2.slotWeight) ? options2.slotWeight : weights.get(id) || 0;
      const baseSlots = Math.max(6, Math.round(slotWeight * 1.5) + 6);
      const state2 = {
        layer: 0,
        index: 0,
        slots: baseSlots,
        baseDistance: Number.isFinite(options2.baseDistance) ? options2.baseDistance : baseSpacing * 0.55,
        layerSpacing: Number.isFinite(options2.layerSpacing) ? options2.layerSpacing : baseSpacing * 0.42
      };
      orbitUsage.set(id, state2);
      return state2;
    };
    const nextOrbitPosition = (anchorId, radius, opts = {}) => {
      const anchorPos = placements.get(anchorId) || center;
      const anchorRadius = radii.get(anchorId) || typicalRadius;
      const baseDistance = Number.isFinite(opts.baseDistance) ? opts.baseDistance : Math.max((opts.groupSpacing || baseSpacing) * 0.42, baseSpacing * 0.5);
      const layerSpacing = Number.isFinite(opts.layerSpacing) ? opts.layerSpacing : Math.max((opts.groupSpacing || baseSpacing) * 0.34, baseSpacing * 0.38);
      const state2 = ensureOrbitState(anchorId, {
        baseDistance,
        layerSpacing,
        slotWeight: opts.slotWeight
      });
      const slots = Math.max(6, state2.slots + state2.layer * 3);
      const angleOffset = state2.layer % 2 ? 0.5 : 0;
      const angle = (state2.index + angleOffset) / slots * Math.PI * 2;
      const distance = anchorRadius + radius + state2.baseDistance + state2.layer * state2.layerSpacing;
      state2.index += 1;
      if (state2.index >= slots) {
        state2.index = 0;
        state2.layer += 1;
      }
      return {
        x: anchorPos.x + Math.cos(angle) * distance,
        y: anchorPos.y + Math.sin(angle) * distance
      };
    };
    const ensureGroupOrbit = (key) => {
      if (groupOrbit.has(key)) return groupOrbit.get(key);
      const metric = groupMetrics.get(key);
      const spacing = Math.max(getGroupSpacing(key) * 0.5, baseSpacing * 0.55);
      const slots = Math.max(8, Math.round((metric?.totalWeight || 0) * 1.2) + 8);
      const state2 = { layer: 0, index: 0, baseSpacing: spacing, slots };
      groupOrbit.set(key, state2);
      return state2;
    };
    const nextGroupPosition = (key, radius) => {
      const origin = clusterOrigins.get(key) || { x: center.x, y: center.y, spacing: getGroupSpacing(key) };
      const state2 = ensureGroupOrbit(key);
      const slots = Math.max(state2.slots + state2.layer * 4, 8);
      const angleOffset = state2.layer % 2 ? 0.5 : 0;
      const angle = (state2.index + angleOffset) / slots * Math.PI * 2;
      const distance = origin.spacing * 0.52 + state2.baseSpacing * state2.layer + radius + typicalRadius * 0.65;
      state2.index += 1;
      if (state2.index >= slots) {
        state2.index = 0;
        state2.layer += 1;
      }
      return {
        x: origin.x + Math.cos(angle) * distance,
        y: origin.y + Math.sin(angle) * distance
      };
    };
    const blockCenters = /* @__PURE__ */ new Map();
    const blockPositionList = [];
    const weekCenters = /* @__PURE__ */ new Map();
    const weekPositionsByBlock = /* @__PURE__ */ new Map();
    const lectureCenters = /* @__PURE__ */ new Map();
    const lecturesByWeek = /* @__PURE__ */ new Map();
    function ensureBlockCenter(blockKey) {
      if (blockCenters.has(blockKey)) return blockCenters.get(blockKey);
      const agg = blockAggregates.get(blockKey) || { weight: 0, count: 0 };
      const spacing = Math.max(
        blockSpacingBase,
        baseSpacing + Math.sqrt(Math.max(agg.weight, 0)) * typicalRadius * 0.45 + agg.count * typicalRadius * 0.18
      );
      const candidate = pickClusterPosition(blockPositionList, spacing, center, {
        buffer: spacing * 0.35
      });
      const point = clampClusterPoint(candidate);
      const info = { x: point.x, y: point.y, spacing, buffer: spacing * 0.85 };
      blockCenters.set(blockKey, info);
      blockPositionList.push(info);
      return info;
    }
    function ensureWeekCenter(blockKey, weekId, blockCenter) {
      const weekKey = `${blockKey}::${weekId}`;
      if (weekCenters.has(weekKey)) return weekCenters.get(weekKey);
      const agg = weekAggregates.get(weekKey) || { weight: 0, count: 0 };
      const existing = weekPositionsByBlock.get(blockKey) || [];
      const spacing = Math.max(
        weekSpacingBase,
        blockCenter.spacing * 0.64,
        baseSpacing + Math.sqrt(Math.max(agg.weight, 0)) * typicalRadius * 0.34 + agg.count * typicalRadius * 0.16
      );
      const candidate = pickClusterPosition(existing, spacing, blockCenter, {
        buffer: spacing * 0.3,
        maxRadius: blockCenter.spacing * 0.85
      });
      const point = clampClusterPoint(candidate);
      const info = { x: point.x, y: point.y, spacing, buffer: spacing * 0.75 };
      weekCenters.set(weekKey, info);
      existing.push(info);
      weekPositionsByBlock.set(blockKey, existing);
      return info;
    }
    function ensureLectureCenter(blockKey, weekId, lectureId, weekCenter, groupKey) {
      const weekKey = `${blockKey}::${weekId}`;
      const lectureKey2 = `${weekKey}::${lectureId}`;
      if (lectureCenters.has(lectureKey2)) return lectureCenters.get(lectureKey2);
      const existing = lecturesByWeek.get(weekKey) || [];
      const spacing = Math.max(lectureSpacingBase, weekCenter.spacing * 0.62, getGroupSpacing(groupKey));
      const candidate = pickClusterPosition(existing, spacing, weekCenter, {
        buffer: spacing * 0.24,
        maxRadius: weekCenter.spacing * 0.7
      });
      const point = clampClusterPoint(candidate);
      const info = { x: point.x, y: point.y, spacing, buffer: spacing * 0.7 };
      lectureCenters.set(lectureKey2, info);
      existing.push(info);
      lecturesByWeek.set(weekKey, existing);
      return info;
    }
    const blockOrder = /* @__PURE__ */ new Map();
    Array.from(blockAggregates.entries()).sort((a, b) => {
      const scoreA = a[1].weight + a[1].count * 0.6;
      const scoreB = b[1].weight + b[1].count * 0.6;
      if (Math.abs(scoreA - scoreB) > 1e-4) return scoreB - scoreA;
      return String(a[0]).localeCompare(String(b[0]));
    }).forEach((entry, index) => {
      blockOrder.set(entry[0], index);
    });
    const weekOrder = /* @__PURE__ */ new Map();
    Array.from(weekAggregates.entries()).sort((a, b) => {
      const scoreA = a[1].weight + a[1].count * 0.5;
      const scoreB = b[1].weight + b[1].count * 0.5;
      if (Math.abs(scoreA - scoreB) > 1e-4) return scoreB - scoreA;
      return String(a[0]).localeCompare(String(b[0]));
    }).forEach((entry, index) => {
      weekOrder.set(entry[0], index);
    });
    const groupOrder = Array.from(groupNodes.keys()).sort((a, b) => {
      const parsedA = parseGroupKey(a);
      const parsedB = parseGroupKey(b);
      const blockIdxA = blockOrder.get(parsedA.block || "__") ?? Number.MAX_SAFE_INTEGER;
      const blockIdxB = blockOrder.get(parsedB.block || "__") ?? Number.MAX_SAFE_INTEGER;
      if (blockIdxA !== blockIdxB) return blockIdxA - blockIdxB;
      const weekKeyA = `${parsedA.block || "__"}::${parsedA.week || "__"}`;
      const weekKeyB = `${parsedB.block || "__"}::${parsedB.week || "__"}`;
      const weekIdxA = weekOrder.get(weekKeyA) ?? Number.MAX_SAFE_INTEGER;
      const weekIdxB = weekOrder.get(weekKeyB) ?? Number.MAX_SAFE_INTEGER;
      if (weekIdxA !== weekIdxB) return weekIdxA - weekIdxB;
      const metricA = groupMetrics.get(a) || { totalInfluence: 0, totalWeight: 0, count: 0 };
      const metricB = groupMetrics.get(b) || { totalInfluence: 0, totalWeight: 0, count: 0 };
      const scoreA = metricA.totalInfluence + metricA.totalWeight;
      const scoreB = metricB.totalInfluence + metricB.totalWeight;
      if (Math.abs(scoreA - scoreB) > 1e-4) return scoreB - scoreA;
      if (metricA.count !== metricB.count) return metricB.count - metricA.count;
      return String(a).localeCompare(String(b));
    });
    const clusterOrigins = /* @__PURE__ */ new Map();
    groupOrder.forEach((key) => {
      const parsed = parseGroupKey(key);
      const blockKey = parsed.block || "__";
      const weekId = parsed.week || "__";
      const lectureId = parsed.lecture || key;
      const blockCenter = ensureBlockCenter(blockKey);
      const weekCenter = ensureWeekCenter(blockKey, weekId, blockCenter);
      const lectureCenter = ensureLectureCenter(blockKey, weekId, lectureId, weekCenter, key);
      clusterOrigins.set(key, {
        x: lectureCenter.x,
        y: lectureCenter.y,
        spacing: Math.max(lectureCenter.spacing, getGroupSpacing(key))
      });
    });
    const heavyThreshold = (() => {
      if (!weightValues.length) return 0;
      const sorted = weightValues.slice().sort((a, b) => a - b);
      const index = Math.max(0, Math.floor(sorted.length * 0.75) - 1);
      return sorted[index];
    })();
    groupOrder.forEach((groupKey) => {
      const ids2 = groupNodes.get(groupKey) || [];
      if (!ids2.length) return;
      const nodes = ids2.slice().sort((a, b) => {
        const diffInfluence = (influence.get(b) || 0) - (influence.get(a) || 0);
        if (Math.abs(diffInfluence) > 1e-4) return diffInfluence;
        const diffWeight = (weights.get(b) || 0) - (weights.get(a) || 0);
        if (Math.abs(diffWeight) > 1e-4) return diffWeight;
        return String(a).localeCompare(String(b));
      });
      const origin = clusterOrigins.get(groupKey) || { x: center.x, y: center.y, spacing: getGroupSpacing(groupKey) };
      const primaryId = nodes[0];
      const primaryRadius = radii.get(primaryId) || typicalRadius;
      const primaryPos = clampPosition({ x: origin.x, y: origin.y }, primaryRadius);
      placements.set(primaryId, primaryPos);
      ensureOrbitState(primaryId, {
        baseDistance: origin.spacing * 0.48,
        layerSpacing: origin.spacing * 0.36,
        slotWeight: weights.get(primaryId) || 0
      });
      for (let index = 1; index < nodes.length; index += 1) {
        const id = nodes[index];
        const radius = radii.get(id) || typicalRadius;
        const neighbors = adjacency.get(id) || [];
        const placedNeighbors = neighbors.filter((n) => placements.has(n));
        let guess = null;
        if (placedNeighbors.length >= 2) {
          let sumX = 0;
          let sumY = 0;
          let totalWeight = 0;
          const neighborGroups = /* @__PURE__ */ new Set();
          placedNeighbors.forEach((neighborId) => {
            const pos = placements.get(neighborId);
            if (!pos) return;
            const weight = Math.max(0.2, weights.get(neighborId) || 0);
            sumX += pos.x * weight;
            sumY += pos.y * weight;
            totalWeight += weight;
            neighborGroups.add(primaryGroupById.get(neighborId));
          });
          if (totalWeight > 0) {
            guess = { x: sumX / totalWeight, y: sumY / totalWeight };
            if (neighborGroups.size > 1) {
              guess.x = (guess.x + origin.x) / 2;
              guess.y = (guess.y + origin.y) / 2;
            }
          }
        }
        if (!guess && placedNeighbors.length === 1) {
          const anchorId = placedNeighbors[0];
          const anchorGroup = primaryGroupById.get(anchorId);
          const anchorSpacing = clusterOrigins.get(anchorGroup || "")?.spacing || getGroupSpacing(anchorGroup || groupKey);
          guess = nextOrbitPosition(anchorId, radius, {
            groupSpacing: Math.max(anchorSpacing, origin.spacing),
            slotWeight: weights.get(anchorId) || 0
          });
        }
        if (!guess) {
          guess = nextGroupPosition(groupKey, radius);
        }
        const position = resolveCollisions(id, guess, radius);
        placements.set(id, position);
        if ((adjacency.get(id) || []).length > 1) {
          ensureOrbitState(id, {
            baseDistance: origin.spacing * 0.5,
            layerSpacing: origin.spacing * 0.4,
            slotWeight: weights.get(id) || 0
          });
        }
      }
    });
    const ids = Array.from(placements.keys());
    for (let iter = 0; iter < 5; iter += 1) {
      let changed = false;
      for (let i = 0; i < ids.length; i += 1) {
        for (let j = i + 1; j < ids.length; j += 1) {
          const aId = ids[i];
          const bId = ids[j];
          const aPos = placements.get(aId);
          const bPos = placements.get(bId);
          if (!aPos || !bPos) continue;
          const aRadius = radii.get(aId) || typicalRadius;
          const bRadius = radii.get(bId) || typicalRadius;
          let minDistance = aRadius + bRadius + margin;
          const aWeight = weights.get(aId) || 0;
          const bWeight = weights.get(bId) || 0;
          const aGroup = primaryGroupById.get(aId);
          const bGroup = primaryGroupById.get(bId);
          if (aWeight >= heavyThreshold || bWeight >= heavyThreshold) {
            minDistance += baseSpacing * 0.35;
          }
          if (aGroup && bGroup && aGroup !== bGroup) {
            minDistance += baseSpacing * 0.25;
          }
          const dx = bPos.x - aPos.x;
          const dy = bPos.y - aPos.y;
          const dist = Math.hypot(dx, dy) || 1e-4;
          if (dist < minDistance) {
            const push = (minDistance - dist) / 2;
            const nx = dx / dist;
            const ny = dy / dist;
            aPos.x -= nx * push;
            aPos.y -= ny * push;
            bPos.x += nx * push;
            bPos.y += ny * push;
            placements.set(aId, clampPosition(aPos, aRadius));
            placements.set(bId, clampPosition(bPos, bRadius));
            changed = true;
          }
        }
      }
      if (!changed) break;
    }
    for (let iter = 0; iter < 2; iter += 1) {
      const updates = [];
      ids.forEach((id) => {
        const weight = weights.get(id) || 0;
        if (weight >= heavyThreshold) return;
        const neighbors = adjacency.get(id) || [];
        if (neighbors.length < 2) return;
        const current = placements.get(id);
        if (!current) return;
        let sumX = 0;
        let sumY = 0;
        let totalWeight = 0;
        neighbors.forEach((neighborId) => {
          const pos = placements.get(neighborId);
          if (!pos) return;
          const weightValue = Math.max(0.25, weights.get(neighborId) || 0);
          sumX += pos.x * weightValue;
          sumY += pos.y * weightValue;
          totalWeight += weightValue;
        });
        if (!totalWeight) return;
        const target = {
          x: current.x + (sumX / totalWeight - current.x) * 0.32,
          y: current.y + (sumY / totalWeight - current.y) * 0.32
        };
        updates.push([id, resolveCollisions(id, target)]);
      });
      updates.forEach(([id, pos]) => {
        placements.set(id, pos);
      });
    }
    let minX = Infinity;
    let maxX = -Infinity;
    let minY = Infinity;
    let maxY = -Infinity;
    placements.forEach((pos) => {
      if (!pos) return;
      if (pos.x < minX) minX = pos.x;
      if (pos.x > maxX) maxX = pos.x;
      if (pos.y < minY) minY = pos.y;
      if (pos.y > maxY) maxY = pos.y;
    });
    if (Number.isFinite(minX) && Number.isFinite(maxX) && Number.isFinite(minY) && Number.isFinite(maxY)) {
      const offsetX = center.x - (minX + maxX) / 2;
      const offsetY = center.y - (minY + maxY) / 2;
      placements.forEach((pos, id) => {
        if (!pos) return;
        const adjusted = { x: pos.x + offsetX, y: pos.y + offsetY };
        placements.set(id, clampPosition(adjusted, radii.get(id) || typicalRadius));
      });
    }
    const layout = {};
    placements.forEach((pos, id) => {
      if (!pos) return;
      layout[id] = { x: pos.x, y: pos.y };
    });
    return layout;
  }
  async function smartReorganizeActiveMap() {
    const items = Array.isArray(mapState.visibleItems) ? mapState.visibleItems : [];
    if (!items.length) return {};
    const model = refreshGravityModel() || mapState.gravityModel || buildGravityModel(items);
    const layout = computeSmartLayout(model);
    const ids = Object.keys(layout);
    if (!ids.length) return {};
    const tab = getActiveTab();
    ids.forEach((id) => {
      mapState.positions[id] = layout[id];
      scheduleNodePositionUpdate(id, layout[id], { immediate: true });
    });
    if (tab) {
      const storedLayout = ensureTabLayout(tab);
      ids.forEach((id) => {
        storedLayout[id] = { ...layout[id] };
      });
      tab.layoutSeeded = true;
      await persistMapConfig();
    }
    flushQueuedEdgeUpdates({ force: true });
    return layout;
  }
  async function ensureMapConfig() {
    if (mapState.mapConfigLoaded && mapState.mapConfig) {
      return mapState.mapConfig;
    }
    const raw = await getMapConfig();
    const normalized2 = normalizeMapConfig(raw);
    mapState.mapConfig = normalized2;
    mapState.mapConfigLoaded = true;
    if (JSON.stringify(raw) !== JSON.stringify(normalized2)) {
      await saveMapConfig(normalized2);
    }
    return normalized2;
  }
  async function persistMapConfig() {
    if (!mapState.mapConfig) return;
    const snapshot = deepClone(mapState.mapConfig);
    await saveMapConfig(snapshot);
  }
  function getActiveTab() {
    const config = mapState.mapConfig;
    if (!config) return null;
    return config.tabs.find((tab) => tab.id === config.activeTabId) || config.tabs[0] || null;
  }
  async function setActiveTab(tabId) {
    const config = mapState.mapConfig;
    if (!config) return;
    const tab = config.tabs.find((t) => t.id === tabId);
    if (!tab) return;
    config.activeTabId = tab.id;
    mapState.searchValue = "";
    mapState.searchFeedback = null;
    mapState.paletteSearch = "";
    mapState.selectionIds = [];
    mapState.previewSelection = null;
    mapState.selectionPreviewSignature = "";
    mapState.pendingLink = null;
    await persistMapConfig();
    await renderMap(mapState.root);
  }
  async function createMapTab() {
    const config = mapState.mapConfig || normalizeMapConfig(null);
    const count = config.tabs.length + 1;
    const tab = normalizeMapTab({
      id: uid(),
      name: `Map ${count}`,
      includeLinked: true,
      manualMode: false,
      manualIds: [],
      layoutSeeded: true,
      filter: { blockId: "", weeks: [], lectureKeys: [] }
    });
    config.tabs.push(tab);
    config.activeTabId = tab.id;
    mapState.mapConfig = config;
    mapState.searchValue = "";
    mapState.searchFeedback = null;
    await persistMapConfig();
    await renderMap(mapState.root);
  }
  async function deleteActiveTab() {
    const config = mapState.mapConfig;
    if (!config) return;
    if (config.tabs.length <= 1) {
      alert("At least one map tab is required.");
      return;
    }
    const tab = getActiveTab();
    if (!tab) return;
    const confirmed = confirm(`Delete map \u201C${tab.name}\u201D?`);
    if (!confirmed) return;
    config.tabs = config.tabs.filter((t) => t.id !== tab.id);
    config.activeTabId = config.tabs[0]?.id || "";
    mapState.searchValue = "";
    mapState.searchFeedback = null;
    await persistMapConfig();
    await renderMap(mapState.root);
  }
  function updateSearchFeedback(message, type = "") {
    if (message) {
      mapState.searchFeedback = { message, type };
    } else {
      mapState.searchFeedback = null;
    }
    applyStoredSearchFeedback();
  }
  function applyStoredSearchFeedback() {
    const el = mapState.searchFeedbackEl;
    if (!el) return;
    const info = mapState.searchFeedback;
    if (info && info.message) {
      el.textContent = info.message;
      el.className = "map-search-feedback" + (info.type ? ` ${info.type}` : "");
    } else {
      el.textContent = "";
      el.className = "map-search-feedback";
    }
  }
  function updateSearchSuggestions(query) {
    const container = mapState.searchSuggestionsEl;
    if (!container) return;
    if (mapState.searchSuggestionTimer) {
      clearTimeout(mapState.searchSuggestionTimer);
      mapState.searchSuggestionTimer = null;
    }
    container.innerHTML = "";
    mapState.searchSuggestions = [];
    mapState.searchActiveIndex = -1;
    const field = mapState.searchFieldEl;
    const trimmed = (query || "").trim();
    if (!trimmed) {
      container.classList.remove("visible");
      if (field) field.classList.remove("has-suggestions");
      return;
    }
    const lower = trimmed.toLowerCase();
    const items = (mapState.visibleItems || []).map((item) => ({ id: item.id, label: titleOf4(item) || "" })).filter((entry) => entry.label && entry.label.toLowerCase().includes(lower));
    if (!items.length) {
      container.classList.remove("visible");
      if (field) field.classList.remove("has-suggestions");
      return;
    }
    const seen = /* @__PURE__ */ new Set();
    const unique = [];
    items.forEach((entry) => {
      if (!entry.id || seen.has(entry.id)) return;
      seen.add(entry.id);
      unique.push(entry);
    });
    unique.sort((a, b) => {
      const aIndex = a.label.toLowerCase().indexOf(lower);
      const bIndex = b.label.toLowerCase().indexOf(lower);
      if (aIndex !== bIndex) return aIndex - bIndex;
      return a.label.localeCompare(b.label);
    });
    const limited = unique.slice(0, 6);
    if (!limited.length) {
      container.classList.remove("visible");
      if (field) field.classList.remove("has-suggestions");
      return;
    }
    mapState.searchSuggestions = limited;
    limited.forEach((entry, index) => {
      const option = document.createElement("button");
      option.type = "button";
      option.className = "map-search-suggestion";
      option.textContent = entry.label;
      option.addEventListener("mousedown", (evt) => {
        evt.preventDefault();
      });
      option.addEventListener("click", () => {
        applySearchSuggestion(index);
      });
      container.appendChild(option);
    });
    container.classList.add("visible");
    if (field) field.classList.add("has-suggestions");
  }
  function clearSearchSuggestions() {
    const container = mapState.searchSuggestionsEl;
    if (mapState.searchSuggestionTimer) {
      clearTimeout(mapState.searchSuggestionTimer);
      mapState.searchSuggestionTimer = null;
    }
    if (container) {
      container.innerHTML = "";
      container.classList.remove("visible");
    }
    mapState.searchSuggestions = [];
    mapState.searchActiveIndex = -1;
    const field = mapState.searchFieldEl;
    if (field) {
      field.classList.remove("has-suggestions");
    }
  }
  function highlightSearchSuggestion(index) {
    const container = mapState.searchSuggestionsEl;
    if (!container) return;
    const options = Array.from(container.querySelectorAll(".map-search-suggestion"));
    if (!options.length) return;
    const clamped = (index % options.length + options.length) % options.length;
    options.forEach((option, i) => {
      option.classList.toggle("active", i === clamped);
      if (i === clamped) {
        option.scrollIntoView({ block: "nearest" });
      }
    });
    mapState.searchActiveIndex = clamped;
  }
  function applySearchSuggestion(index) {
    const suggestion = mapState.searchSuggestions?.[index];
    if (!suggestion) return;
    if (mapState.searchInput) {
      mapState.searchInput.value = suggestion.label;
      mapState.searchValue = suggestion.label;
      mapState.searchInput.focus();
    }
    clearSearchSuggestions();
    handleSearchSubmit(suggestion.label);
  }
  function setSearchInputState({ notFound = false } = {}) {
    const input = mapState.searchInput;
    if (input) {
      input.classList.toggle("not-found", Boolean(notFound));
    }
    if (mapState.searchFieldEl) {
      mapState.searchFieldEl.classList.toggle("not-found", Boolean(notFound));
    }
  }
  function createMapTabsPanel(activeTab) {
    const config = mapState.mapConfig || { tabs: [] };
    const tabsWrap = document.createElement("div");
    tabsWrap.className = "map-tabs";
    const header = document.createElement("div");
    header.className = "map-tabs-header";
    const heading = document.createElement("div");
    heading.className = "map-tabs-heading";
    const title = document.createElement("h2");
    title.className = "map-tabs-title";
    title.textContent = "Concept maps";
    heading.appendChild(title);
    const subtitle = document.createElement("p");
    subtitle.className = "map-tabs-subtitle";
    subtitle.textContent = "Jump between saved layouts or spin up a fresh canvas.";
    heading.appendChild(subtitle);
    header.appendChild(heading);
    const actions = document.createElement("div");
    actions.className = "map-tab-actions";
    const addBtn = document.createElement("button");
    addBtn.type = "button";
    addBtn.className = "map-pill-btn map-tab-add";
    addBtn.setAttribute("aria-label", "Create new map tab");
    addBtn.innerHTML = `${ICONS.plus}<span>New map</span>`;
    addBtn.addEventListener("click", () => {
      createMapTab();
    });
    actions.appendChild(addBtn);
    header.appendChild(actions);
    tabsWrap.appendChild(header);
    const tabList = document.createElement("div");
    tabList.className = "map-tab-list";
    config.tabs.forEach((tab) => {
      const btn = document.createElement("button");
      btn.type = "button";
      btn.className = "map-tab" + (activeTab && tab.id === activeTab.id ? " active" : "");
      btn.textContent = tab.name || "Untitled map";
      btn.addEventListener("click", () => {
        if (!activeTab || tab.id !== activeTab.id) {
          setActiveTab(tab.id);
        }
      });
      tabList.appendChild(btn);
    });
    tabsWrap.appendChild(tabList);
    return tabsWrap;
  }
  function createSearchOverlay() {
    const searchWrap = document.createElement("div");
    searchWrap.className = "map-search-container map-search-overlay";
    const form = document.createElement("form");
    form.className = "map-search";
    form.addEventListener("submit", (evt) => {
      evt.preventDefault();
      handleSearchSubmit(input.value);
    });
    const field = document.createElement("div");
    field.className = "map-search-field";
    const icon = document.createElement("span");
    icon.className = "map-search-icon";
    icon.innerHTML = ICONS.search;
    field.appendChild(icon);
    const input = document.createElement("input");
    input.type = "search";
    input.className = "input map-search-input";
    input.placeholder = "Search concepts\u2026";
    input.value = mapState.searchValue || "";
    input.addEventListener("input", () => {
      mapState.searchValue = input.value;
      setSearchInputState({ notFound: false });
      if (!input.value.trim()) {
        updateSearchFeedback("", "");
      }
      updateSearchSuggestions(input.value);
    });
    input.addEventListener("focus", () => {
      if (mapState.searchSuggestionTimer) {
        clearTimeout(mapState.searchSuggestionTimer);
        mapState.searchSuggestionTimer = null;
      }
      updateSearchSuggestions(input.value);
    });
    input.addEventListener("blur", () => {
      if (mapState.searchSuggestionTimer) {
        clearTimeout(mapState.searchSuggestionTimer);
      }
      mapState.searchSuggestionTimer = setTimeout(() => {
        clearSearchSuggestions();
      }, 120);
    });
    input.addEventListener("keydown", (evt) => {
      if (!mapState.searchSuggestions || mapState.searchSuggestions.length === 0) return;
      if (evt.key === "ArrowDown") {
        evt.preventDefault();
        const next = (mapState.searchActiveIndex + 1) % mapState.searchSuggestions.length;
        highlightSearchSuggestion(next);
      } else if (evt.key === "ArrowUp") {
        evt.preventDefault();
        const total = mapState.searchSuggestions.length;
        const next = (mapState.searchActiveIndex - 1 + total) % total;
        highlightSearchSuggestion(next);
      } else if (evt.key === "Enter") {
        if (mapState.searchActiveIndex >= 0 && mapState.searchActiveIndex < mapState.searchSuggestions.length) {
          evt.preventDefault();
          applySearchSuggestion(mapState.searchActiveIndex);
        }
      } else if (evt.key === "Escape") {
        clearSearchSuggestions();
      }
    });
    field.appendChild(input);
    const submit = document.createElement("button");
    submit.type = "submit";
    submit.className = "map-search-submit";
    submit.innerHTML = `${ICONS.arrowRight}<span class="sr-only">Search</span>`;
    field.appendChild(submit);
    form.appendChild(field);
    const suggestions = document.createElement("div");
    suggestions.className = "map-search-suggestions";
    form.appendChild(suggestions);
    searchWrap.appendChild(form);
    const feedback = document.createElement("div");
    feedback.className = "map-search-feedback";
    searchWrap.appendChild(feedback);
    mapState.searchInput = input;
    mapState.searchFieldEl = field;
    mapState.searchFeedbackEl = feedback;
    mapState.searchSuggestionsEl = suggestions;
    mapState.searchSuggestions = [];
    mapState.searchActiveIndex = -1;
    applyStoredSearchFeedback();
    updateSearchSuggestions(input.value);
    return searchWrap;
  }
  function createMapControlsPanel(activeTab) {
    const controls = document.createElement("div");
    controls.className = "map-controls";
    if (!activeTab) {
      return controls;
    }
    const titleRow = document.createElement("div");
    titleRow.className = "map-controls-row";
    const nameLabel = document.createElement("label");
    nameLabel.className = "map-control map-control-name";
    nameLabel.textContent = "Map name";
    const nameInput = document.createElement("input");
    nameInput.className = "input map-name-input";
    nameInput.value = activeTab.name || "";
    nameInput.addEventListener("change", async () => {
      const next = nameInput.value.trim() || "Untitled map";
      if (next === activeTab.name) return;
      activeTab.name = next;
      await persistMapConfig();
      await renderMap(mapState.root);
    });
    nameLabel.appendChild(nameInput);
    titleRow.appendChild(nameLabel);
    const deleteBtn = document.createElement("button");
    deleteBtn.type = "button";
    deleteBtn.className = "map-icon-btn danger map-delete-tab";
    deleteBtn.setAttribute("aria-label", "Delete map");
    deleteBtn.innerHTML = `${ICONS.trash}<span class="sr-only">Delete map</span>`;
    if ((mapState.mapConfig?.tabs || []).length <= 1) {
      deleteBtn.disabled = true;
    }
    deleteBtn.addEventListener("click", () => {
      deleteActiveTab();
    });
    titleRow.appendChild(deleteBtn);
    controls.appendChild(titleRow);
    const toggleRow = document.createElement("div");
    toggleRow.className = "map-controls-row";
    const manualToggle = document.createElement("label");
    manualToggle.className = "map-toggle";
    const manualInput = document.createElement("input");
    manualInput.type = "checkbox";
    manualInput.checked = Boolean(activeTab.manualMode);
    manualInput.addEventListener("change", async () => {
      activeTab.manualMode = manualInput.checked;
      if (manualInput.checked) {
        activeTab.filter.blockId = "";
        setFilterWeeks(activeTab.filter, []);
        setFilterLectureKeys(activeTab.filter, []);
        activeTab.includeLinked = false;
      } else {
        activeTab.includeLinked = true;
      }
      await persistMapConfig();
      await renderMap(mapState.root);
    });
    const manualSpan = document.createElement("span");
    manualSpan.textContent = "Manual mode";
    manualToggle.appendChild(manualInput);
    manualToggle.appendChild(manualSpan);
    toggleRow.appendChild(manualToggle);
    const linkedToggle = document.createElement("label");
    linkedToggle.className = "map-toggle";
    const linkedInput = document.createElement("input");
    linkedInput.type = "checkbox";
    linkedInput.checked = activeTab.manualMode ? false : activeTab.includeLinked !== false;
    linkedInput.addEventListener("change", async () => {
      activeTab.includeLinked = linkedInput.checked;
      await persistMapConfig();
      await renderMap(mapState.root);
    });
    const linkedSpan = document.createElement("span");
    linkedSpan.textContent = "Include linked concepts";
    linkedToggle.appendChild(linkedInput);
    linkedToggle.appendChild(linkedSpan);
    toggleRow.appendChild(linkedToggle);
    controls.appendChild(toggleRow);
    const filterRow = document.createElement("div");
    filterRow.className = "map-controls-row";
    const blockWrap = document.createElement("label");
    blockWrap.className = "map-control map-control-group";
    const blockLabel = document.createElement("span");
    blockLabel.className = "map-control-label";
    blockLabel.textContent = "Block";
    blockWrap.appendChild(blockLabel);
    const blockSelect = document.createElement("select");
    blockSelect.className = "map-select";
    const blocks = mapState.blocks || [];
    const blockDefault = document.createElement("option");
    blockDefault.value = "";
    blockDefault.textContent = "All blocks";
    blockSelect.appendChild(blockDefault);
    blocks.forEach((block) => {
      const opt = document.createElement("option");
      opt.value = block.blockId;
      opt.textContent = block.name || block.blockId;
      blockSelect.appendChild(opt);
    });
    blockSelect.value = activeTab.filter.blockId || "";
    blockSelect.disabled = Boolean(activeTab.manualMode);
    blockSelect.addEventListener("change", async () => {
      activeTab.filter.blockId = blockSelect.value;
      setFilterWeeks(activeTab.filter, []);
      setFilterLectureKeys(activeTab.filter, []);
      await persistMapConfig();
      await renderMap(mapState.root);
    });
    blockWrap.appendChild(blockSelect);
    filterRow.appendChild(blockWrap);
    const makeChip = ({ label, active = false, onToggle, disabled = false, title }) => {
      const chip = document.createElement("button");
      chip.type = "button";
      chip.className = "map-chip" + (active ? " active" : "");
      chip.textContent = label;
      chip.setAttribute("aria-pressed", active ? "true" : "false");
      if (title) {
        chip.title = title;
      }
      if (disabled) {
        chip.disabled = true;
        chip.classList.add("disabled");
      } else if (typeof onToggle === "function") {
        chip.addEventListener("click", onToggle);
      }
      return chip;
    };
    const selectedWeeks = new Set(getFilterWeeks(activeTab.filter));
    const selectedLectures = new Set(getFilterLectureKeys(activeTab.filter));
    const weekBlock = blocks.find((b) => b.blockId === blockSelect.value);
    const filtersDisabled = Boolean(activeTab.manualMode);
    const hasBlock = Boolean(blockSelect.value);
    const weekWrap = document.createElement("div");
    weekWrap.className = "map-control map-control-group";
    const weekLabel = document.createElement("div");
    weekLabel.className = "map-control-label";
    weekLabel.textContent = "Weeks";
    weekWrap.appendChild(weekLabel);
    const weekList = document.createElement("div");
    weekList.className = "map-chip-list";
    weekWrap.appendChild(weekList);
    const applyWeeks = async (nextWeeks) => {
      setFilterWeeks(activeTab.filter, nextWeeks);
      setFilterLectureKeys(activeTab.filter, []);
      await persistMapConfig();
      await renderMap(mapState.root);
    };
    if (!hasBlock || filtersDisabled) {
      const message = document.createElement("div");
      message.className = "map-chip-empty";
      message.textContent = filtersDisabled ? "Disabled in manual mode." : "Choose a block to filter weeks.";
      weekList.appendChild(message);
    } else {
      const weekNumbers = /* @__PURE__ */ new Set();
      if (weekBlock) {
        if (Number(weekBlock.weeks)) {
          for (let i = 1; i <= Number(weekBlock.weeks); i++) {
            weekNumbers.add(i);
          }
        }
        (weekBlock.lectures || []).forEach((lec) => {
          if (Number.isFinite(lec?.week)) {
            weekNumbers.add(lec.week);
          }
        });
      }
      const sortedWeeks = Array.from(weekNumbers).sort((a, b) => a - b);
      weekList.appendChild(
        makeChip({
          label: "All weeks",
          active: selectedWeeks.size === 0,
          onToggle: () => applyWeeks([])
        })
      );
      if (!sortedWeeks.length) {
        const empty = document.createElement("div");
        empty.className = "map-chip-empty";
        empty.textContent = "No weeks found for this block.";
        weekList.appendChild(empty);
      } else {
        sortedWeeks.forEach((num) => {
          weekList.appendChild(
            makeChip({
              label: `Week ${num}`,
              active: selectedWeeks.has(num),
              onToggle: () => {
                const next = new Set(selectedWeeks);
                if (next.has(num)) {
                  next.delete(num);
                } else {
                  next.add(num);
                }
                applyWeeks(Array.from(next).sort((a, b) => a - b));
              }
            })
          );
        });
      }
    }
    filterRow.appendChild(weekWrap);
    const lectureWrap = document.createElement("div");
    lectureWrap.className = "map-control map-control-group";
    const lectureLabel = document.createElement("div");
    lectureLabel.className = "map-control-label";
    lectureLabel.textContent = "Lectures";
    lectureWrap.appendChild(lectureLabel);
    const lectureList = document.createElement("div");
    lectureList.className = "map-chip-list";
    lectureWrap.appendChild(lectureList);
    const applyLectures = async (nextKeys) => {
      setFilterLectureKeys(activeTab.filter, nextKeys);
      await persistMapConfig();
      await renderMap(mapState.root);
    };
    if (!hasBlock || filtersDisabled) {
      const message = document.createElement("div");
      message.className = "map-chip-empty";
      message.textContent = filtersDisabled ? "Disabled in manual mode." : "Choose a block first.";
      lectureList.appendChild(message);
    } else {
      const lectures = Array.isArray(weekBlock?.lectures) ? weekBlock.lectures : [];
      const filteredLectures = lectures.filter((lec) => !selectedWeeks.size || selectedWeeks.has(Number(lec.week))).sort((a, b) => {
        const weekA = Number(a.week) || 0;
        const weekB = Number(b.week) || 0;
        if (weekA !== weekB) return weekA - weekB;
        const idA = Number(a.id) || 0;
        const idB = Number(b.id) || 0;
        return idA - idB;
      });
      lectureList.appendChild(
        makeChip({
          label: "All lectures",
          active: selectedLectures.size === 0,
          onToggle: () => applyLectures([])
        })
      );
      if (!filteredLectures.length) {
        const empty = document.createElement("div");
        empty.className = "map-chip-empty";
        empty.textContent = selectedWeeks.size ? "No lectures match the selected weeks." : "No lectures found for this block.";
        lectureList.appendChild(empty);
      } else {
        filteredLectures.forEach((lec) => {
          const keyParts = [`block:${weekBlock.blockId}`];
          if (lec.id != null && lec.id !== "") {
            keyParts.push(`id:${lec.id}`);
          }
          if (lec.name) {
            keyParts.push(`name:${lec.name}`);
          }
          if (Number.isFinite(Number(lec.week))) {
            keyParts.push(`week:${Number(lec.week)}`);
          }
          const key = keyParts.join("|");
          const legacyKey = `${weekBlock.blockId}|${lec.id}`;
          const isActive = selectedLectures.has(key) || selectedLectures.has(legacyKey);
          const label = lec.name ? lec.name : `Lecture ${lec.id}`;
          const weekLabel2 = Number.isFinite(lec.week) ? `Week ${lec.week}` : "";
          lectureList.appendChild(
            makeChip({
              label: weekLabel2 ? `${label} \xB7 ${weekLabel2}` : label,
              title: weekLabel2 ? `${label} (${weekLabel2})` : label,
              active: isActive,
              onToggle: () => {
                const next = new Set(selectedLectures);
                next.delete(legacyKey);
                if (isActive) {
                  next.delete(key);
                } else {
                  next.add(key);
                }
                applyLectures(Array.from(next));
              }
            })
          );
        });
      }
    }
    filterRow.appendChild(lectureWrap);
    const resetBtn = document.createElement("button");
    resetBtn.type = "button";
    resetBtn.className = "btn map-reset-filters";
    resetBtn.textContent = "Clear filters";
    resetBtn.disabled = Boolean(activeTab.manualMode);
    resetBtn.addEventListener("click", async () => {
      activeTab.filter.blockId = "";
      setFilterWeeks(activeTab.filter, []);
      setFilterLectureKeys(activeTab.filter, []);
      await persistMapConfig();
      await renderMap(mapState.root);
    });
    filterRow.appendChild(resetBtn);
    controls.appendChild(filterRow);
    const layoutRow = document.createElement("div");
    layoutRow.className = "map-controls-row map-controls-row--actions";
    const reorganizeBtn = document.createElement("button");
    reorganizeBtn.type = "button";
    reorganizeBtn.className = "btn secondary map-reorganize-btn";
    reorganizeBtn.textContent = "Smart reorganize";
    reorganizeBtn.addEventListener("click", async () => {
      if (reorganizeBtn.dataset.state === "busy") return;
      const originalText = reorganizeBtn.textContent;
      reorganizeBtn.dataset.state = "busy";
      reorganizeBtn.disabled = true;
      reorganizeBtn.textContent = "Organizing\u2026";
      try {
        await smartReorganizeActiveMap();
      } catch (err) {
        console.error(err);
      } finally {
        reorganizeBtn.disabled = false;
        reorganizeBtn.textContent = originalText;
        delete reorganizeBtn.dataset.state;
      }
    });
    layoutRow.appendChild(reorganizeBtn);
    controls.appendChild(layoutRow);
    return controls;
  }
  function createMapPalettePanel(items, activeTab) {
    if (!activeTab || !activeTab.manualMode) {
      return null;
    }
    const palette2 = document.createElement("div");
    palette2.className = "map-palette";
    const title = document.createElement("h3");
    title.textContent = "Concept library";
    palette2.appendChild(title);
    const description = document.createElement("p");
    description.className = "map-palette-hint";
    description.textContent = "Drag terms onto the canvas to add them to this map.";
    palette2.appendChild(description);
    const searchInput = document.createElement("input");
    searchInput.type = "search";
    searchInput.className = "input map-palette-search";
    searchInput.placeholder = "Filter terms";
    searchInput.value = mapState.paletteSearch || "";
    palette2.appendChild(searchInput);
    const list = document.createElement("div");
    list.className = "map-palette-list";
    palette2.appendChild(list);
    const manualSet = new Set(Array.isArray(activeTab.manualIds) ? activeTab.manualIds : []);
    const itemMap = mapState.itemMap || {};
    function renderList() {
      list.innerHTML = "";
      const query = searchInput.value.trim().toLowerCase();
      const available = items.filter((it) => !manualSet.has(it.id)).filter((it) => !query || titleOf4(it).toLowerCase().includes(query)).sort((a, b) => titleOf4(a).localeCompare(titleOf4(b)));
      if (!available.length) {
        const empty = document.createElement("div");
        empty.className = "map-palette-empty";
        empty.textContent = query ? "No matching terms." : "All terms have been added.";
        list.appendChild(empty);
        return;
      }
      available.forEach((it) => {
        const btn = document.createElement("button");
        btn.type = "button";
        btn.className = "map-palette-item";
        btn.textContent = titleOf4(it) || it.id;
        btn.addEventListener("mousedown", (evt) => {
          const sourceItem = itemMap[it.id] || it;
          startMenuDrag(sourceItem, evt, { source: "palette" });
        });
        list.appendChild(btn);
      });
    }
    searchInput.addEventListener("input", () => {
      mapState.paletteSearch = searchInput.value;
      renderList();
    });
    renderList();
    const activeWrap = document.createElement("div");
    activeWrap.className = "map-palette-active";
    const activeTitle = document.createElement("h4");
    activeTitle.textContent = `Active concepts (${manualSet.size})`;
    activeWrap.appendChild(activeTitle);
    const activeList = document.createElement("div");
    activeList.className = "map-palette-active-list";
    if (!manualSet.size) {
      const empty = document.createElement("div");
      empty.className = "map-palette-empty";
      empty.textContent = "No concepts yet. Drag from the library to begin.";
      activeList.appendChild(empty);
    } else {
      activeTab.manualIds.forEach((id) => {
        const item = itemMap[id];
        if (!item) return;
        const row = document.createElement("div");
        row.className = "map-palette-active-item";
        const label = document.createElement("span");
        label.textContent = titleOf4(item) || id;
        row.appendChild(label);
        const removeBtn = document.createElement("button");
        removeBtn.type = "button";
        removeBtn.className = "icon-btn ghost";
        removeBtn.setAttribute("aria-label", `Remove ${titleOf4(item) || "item"} from this map`);
        removeBtn.textContent = "\u2715";
        removeBtn.addEventListener("click", async () => {
          const tab = getActiveTab();
          if (!tab) return;
          tab.manualIds = (tab.manualIds || []).filter((mid) => mid !== id);
          await persistMapConfig();
          await renderMap(mapState.root);
        });
        row.appendChild(removeBtn);
        activeList.appendChild(row);
      });
    }
    activeWrap.appendChild(activeList);
    palette2.appendChild(activeWrap);
    return palette2;
  }
  function handleSearchSubmit(rawQuery) {
    clearSearchSuggestions();
    const query = (rawQuery || "").trim();
    if (!query) {
      mapState.searchValue = "";
      updateSearchFeedback("", "");
      setSearchInputState({ notFound: false });
      return;
    }
    mapState.searchValue = rawQuery;
    const items = mapState.visibleItems || [];
    const lower = query.toLowerCase();
    let match = items.find((it) => (titleOf4(it) || "").toLowerCase() === lower);
    if (!match) {
      match = items.find((it) => (titleOf4(it) || "").toLowerCase().includes(lower));
    }
    if (!match) {
      updateSearchFeedback("No matching concept on this map.", "error");
      setSearchInputState({ notFound: true });
      return;
    }
    const success = centerOnNode(match.id);
    if (success) {
      updateSearchFeedback(`Centered on ${titleOf4(match)}.`, "success");
      setSearchInputState({ notFound: false });
    } else {
      updateSearchFeedback("Could not focus on that concept.", "error");
      setSearchInputState({ notFound: true });
    }
  }
  function centerOnNode(id, options = {}) {
    if (!mapState.viewBox || !mapState.positions) return false;
    const pos = mapState.positions[id];
    if (!pos) return false;
    const width = mapState.viewBox.w;
    const height = mapState.viewBox.h;
    const limit = mapState.sizeLimit || 0;
    const maxX = Math.max(0, limit - width);
    const maxY = Math.max(0, limit - height);
    const nextX = clamp2(pos.x - width / 2, 0, maxX);
    const nextY = clamp2(pos.y - height / 2, 0, maxY);
    if (Number.isFinite(nextX)) mapState.viewBox.x = nextX;
    if (Number.isFinite(nextY)) mapState.viewBox.y = nextY;
    if (mapState.updateViewBox) {
      mapState.updateViewBox({ immediate: true });
    }
    if (options.select !== false) {
      mapState.selectionIds = [id];
      updateSelectionHighlight();
    }
    return true;
  }
  function filterHasCriteria(filter = {}) {
    if (!filter || typeof filter !== "object") {
      return false;
    }
    if (typeof filter.blockId === "string" && filter.blockId.trim()) {
      return true;
    }
    if (getFilterWeeks(filter).length) {
      return true;
    }
    if (getFilterLectureKeys(filter).length) {
      return true;
    }
    return false;
  }
  function matchesFilter(item, filter = {}) {
    if (!filter) return true;
    const normalizedBlock = typeof filter.blockId === "string" ? filter.blockId.trim() : "";
    const weekValues = getFilterWeeks(filter).map((week) => Number(week)).filter(Number.isFinite);
    const weekSet = new Set(weekValues);
    const lectureKeys = getFilterLectureKeys(filter);
    const lectureFilters = lectureKeys.map((key) => parseLectureFilterKey(key, normalizedBlock));
    const lectures = Array.isArray(item.lectures) ? item.lectures : [];
    const blocks = Array.isArray(item.blocks) ? item.blocks : [];
    if (normalizedBlock) {
      const inBlock = blocks.includes(normalizedBlock) || lectures.some((lec) => lec?.blockId === normalizedBlock);
      if (!inBlock) return false;
    }
    if (weekSet.size) {
      const satisfiesWeek = lectures.some((lec) => {
        if (!lec) return false;
        if (normalizedBlock && lec.blockId !== normalizedBlock) return false;
        const weekNumber = Number(lec.week);
        return Number.isFinite(weekNumber) && weekSet.has(weekNumber);
      }) || Array.isArray(item.weeks) && item.weeks.some((week) => weekSet.has(Number(week)));
      if (!satisfiesWeek) return false;
    }
    if (lectureFilters.length) {
      const satisfiesLecture = lectureFilters.some((spec) => {
        const blockMatch = (spec.block || normalizedBlock || "").trim();
        const idMatch = (spec.id || "").trim().toLowerCase();
        const nameMatch = (spec.name || "").trim().toLowerCase();
        const weekMatch = Number.isFinite(Number(spec.week)) ? Number(spec.week) : null;
        return lectures.some((lec) => {
          if (!lec) return false;
          if (blockMatch && lec.blockId !== blockMatch) return false;
          if (weekMatch !== null) {
            const lecWeek = Number(lec.week);
            if (!Number.isFinite(lecWeek) || lecWeek !== weekMatch) {
              return false;
            }
          }
          const values = /* @__PURE__ */ new Set();
          if (lec.id != null) {
            const idValue = String(lec.id).trim().toLowerCase();
            if (idValue) {
              values.add(idValue);
            }
          }
          if (lec.uid != null) {
            const uidValue = String(lec.uid).trim().toLowerCase();
            if (uidValue) {
              values.add(uidValue);
            }
          }
          if (lec.name) {
            values.add(lec.name.trim().toLowerCase());
          }
          if (idMatch && values.has(idMatch)) return true;
          if (nameMatch && values.has(nameMatch)) return true;
          return !idMatch && !nameMatch;
        });
      });
      if (!satisfiesLecture) return false;
    }
    return true;
  }
  function applyTabFilters(items, tab) {
    if (!tab) {
      return items.filter((it) => !it.mapHidden);
    }
    const manualSet = new Set(Array.isArray(tab.manualIds) ? tab.manualIds : []);
    let base;
    if (tab.manualMode) {
      base = items.filter((it) => manualSet.has(it.id));
    } else {
      base = items.filter((it) => !it.mapHidden && matchesFilter(it, tab.filter));
    }
    const allowed = new Set(base.map((it) => it.id));
    const filterActive = !tab.manualMode && filterHasCriteria(tab.filter);
    if (tab.includeLinked !== false) {
      const queue = [...allowed];
      while (queue.length) {
        const id = queue.pop();
        const item = mapState.itemMap?.[id];
        if (!item) continue;
        (item.links || []).forEach((link) => {
          const other = mapState.itemMap?.[link.id];
          if (!other) return;
          if (other.mapHidden && !manualSet.has(other.id)) return;
          if (!allowed.has(other.id) && (!filterActive || matchesFilter(other, tab.filter))) {
            allowed.add(other.id);
            queue.push(other.id);
          }
        });
      }
    }
    return items.filter((it) => {
      if (!allowed.has(it.id)) return false;
      if (tab.manualMode) {
        if (manualSet.has(it.id)) return true;
        return !it.mapHidden;
      }
      return !it.mapHidden || manualSet.has(it.id);
    });
  }
  function openItemPopup(itemId) {
    const item = mapState.itemMap?.[itemId];
    if (!item) return;
    showPopup(item, {
      onEdit: () => openItemEditor(itemId),
      onColorChange: (color) => updateItemColor(itemId, color),
      onLink: () => openLinkAssistant(itemId),
      onGravityChange: (value) => updateItemGravityBoost(itemId, value)
    });
  }
  function openItemEditor(itemId) {
    const item = mapState.itemMap?.[itemId];
    if (!item) return;
    openEditor(item.kind, async () => {
      await renderMap(mapState.root);
    }, item);
  }
  async function updateItemColor(itemId, color) {
    const item = await getItem(itemId);
    if (!item) return;
    const normalized2 = typeof color === "string" && color ? color : "";
    if (normalized2) {
      item.color = normalized2;
    } else if (item.color) {
      delete item.color;
    }
    await upsertItem(item);
    if (!mapState.itemMap) {
      mapState.itemMap = {};
    }
    const cached = mapState.itemMap[itemId];
    if (cached) {
      if (normalized2) {
        cached.color = normalized2;
      } else {
        delete cached.color;
      }
    }
    if (Array.isArray(mapState.visibleItems)) {
      const visible = mapState.visibleItems.find((it) => it.id === itemId);
      if (visible) {
        if (normalized2) {
          visible.color = normalized2;
        } else {
          delete visible.color;
        }
      }
    }
    refreshNodeColor(itemId);
  }
  async function updateItemGravityBoost(itemId, boost) {
    const item = await getItem(itemId);
    if (!item) return 0;
    const normalized2 = normalizeGravityBoost(boost);
    item.mapGravityBoost = normalized2;
    await upsertItem(item);
    integrateItemUpdates(item);
    refreshGravityModel();
    return normalized2;
  }
  function parseLectureFilterKey(rawKey, fallbackBlock = "") {
    const info = {
      block: fallbackBlock || "",
      id: "",
      name: "",
      week: ""
    };
    if (!rawKey) {
      return info;
    }
    const parts = String(rawKey).split("|").map((part) => part.trim()).filter(Boolean);
    parts.forEach((part, index) => {
      if (part.startsWith("block:")) {
        info.block = part.slice(6) || info.block;
      } else if (part.startsWith("id:")) {
        info.id = part.slice(3) || info.id;
      } else if (part.startsWith("name:")) {
        info.name = part.slice(5) || info.name;
      } else if (part.startsWith("week:")) {
        info.week = part.slice(5) || info.week;
      } else if (index === 0 && !info.block) {
        info.block = part;
      } else if (!info.id) {
        info.id = part;
      }
    });
    return info;
  }
  function setAreaInteracting(active) {
    if (!mapState.root) return;
    mapState.root.classList.toggle("map-area-interacting", Boolean(active));
  }
  async function renderMap(root) {
    if (mapState.root && mapState.root !== root) {
      mapState.root.classList.remove("map-area-interacting");
    }
    mapState.root = root;
    closeLineMenu();
    await flushViewStatePersist();
    const fragment = document.createDocumentFragment();
    mapState.nodeDrag = null;
    mapState.areaDrag = null;
    mapState.draggingView = false;
    mapState.menuDrag = null;
    mapState.edgeDrag = null;
    if (mapState.pendingEdgeUpdates) {
      mapState.pendingEdgeUpdates.clear();
    }
    if (mapState.pendingEdgeAnimations) {
      mapState.pendingEdgeAnimations.clear();
    }
    mapState.edgeUpdateFrame = null;
    mapState.selectionRect = null;
    mapState.previewSelection = null;
    mapState.selectionPreviewSignature = "";
    mapState.nodeWasDragged = false;
    mapState.justCompletedSelection = false;
    mapState.edgeDragJustCompleted = false;
    mapState.viewPointerId = null;
    mapState.searchInput = null;
    mapState.searchFieldEl = null;
    mapState.searchFeedbackEl = null;
    mapState.searchSuggestions = [];
    mapState.searchSuggestionsEl = null;
    mapState.searchActiveIndex = -1;
    if (mapState.searchSuggestionTimer) {
      clearTimeout(mapState.searchSuggestionTimer);
      mapState.searchSuggestionTimer = null;
    }
    stopToolboxDrag();
    mapState.toolboxEl = null;
    mapState.toolboxContainer = null;
    mapState.toolboxBadges = null;
    mapState.cursorOverride = null;
    mapState.hoveredEdge = null;
    mapState.hoveredEdgePointer = { x: 0, y: 0 };
    if (mapState.lineMarkers) {
      mapState.lineMarkers.clear();
    } else {
      mapState.lineMarkers = /* @__PURE__ */ new Map();
    }
    if (mapState.edgeRefs) {
      mapState.edgeRefs.clear();
    } else {
      mapState.edgeRefs = /* @__PURE__ */ new Map();
    }
    if (mapState.allEdges) {
      mapState.allEdges.clear();
    } else {
      mapState.allEdges = /* @__PURE__ */ new Set();
    }
    stopAutoPan();
    setAreaInteracting(false);
    mapState.edgeLayer = null;
    mapState.nodeLayer = null;
    flushNodePositionUpdates({ cancelFrame: true });
    if (mapState.pendingNodeUpdates) {
      mapState.pendingNodeUpdates.clear();
    }
    ensureListeners();
    await ensureMapConfig();
    const catalog = await loadBlockCatalog();
    mapState.blocks = (catalog.blocks || []).map((block) => ({
      ...block,
      lectures: (catalog.lectureLists?.[block.blockId] || []).map((lecture) => ({ ...lecture }))
    }));
    const items = [
      ...await listItemsByKind("disease"),
      ...await listItemsByKind("drug"),
      ...await listItemsByKind("concept")
    ];
    const hiddenNodes = items.filter((it) => it.mapHidden);
    const itemMap = Object.fromEntries(items.map((it) => [it.id, it]));
    mapState.itemMap = itemMap;
    const activeTab = getActiveTab();
    const visibleItems = applyTabFilters(items, activeTab);
    mapState.visibleItems = visibleItems;
    const itemGroupCache = /* @__PURE__ */ new Map();
    visibleItems.forEach((it) => {
      itemGroupCache.set(it.id, deriveItemGroupKeys(it));
    });
    const base = 1e3;
    const size = Math.max(base, visibleItems.length * 150);
    const viewport = base;
    mapState.sizeLimit = size * 2;
    mapState.minView = 100;
    const wrapper = document.createElement("div");
    wrapper.className = "map-wrapper";
    fragment.appendChild(wrapper);
    const stage = document.createElement("div");
    stage.className = "map-stage";
    wrapper.appendChild(stage);
    const container = document.createElement("div");
    container.className = "map-container";
    stage.appendChild(container);
    mapState.container = container;
    container.addEventListener("pointerdown", (e) => {
      if (mapState.tool === TOOL.AREA) return;
      if (e.button !== 0) return;
      if (e.target !== container) return;
      closeLineMenu();
      if (beginViewDrag(e)) {
        e.preventDefault();
      }
    });
    const overlay = document.createElement("div");
    overlay.className = "map-overlay";
    stage.appendChild(overlay);
    const menu = document.createElement("div");
    menu.className = "map-menu";
    overlay.appendChild(menu);
    const toggle = document.createElement("button");
    toggle.type = "button";
    toggle.className = "map-menu-toggle";
    toggle.setAttribute("aria-haspopup", "true");
    toggle.setAttribute("aria-expanded", "false");
    toggle.setAttribute("aria-label", "Open map controls");
    toggle.innerHTML = `<span class="map-menu-icon" aria-hidden="true">${ICONS.sliders}</span><span class="sr-only">Open map controls</span>`;
    menu.appendChild(toggle);
    const panel = document.createElement("div");
    panel.className = "map-menu-panel";
    panel.setAttribute("aria-label", "Map controls");
    menu.appendChild(panel);
    const closeBtn = document.createElement("button");
    closeBtn.type = "button";
    closeBtn.className = "map-menu-close";
    closeBtn.setAttribute("aria-label", "Hide map controls");
    closeBtn.innerHTML = `<span class="sr-only">Hide map controls</span>${ICONS.close}`;
    const panelHeader = document.createElement("div");
    panelHeader.className = "map-menu-header";
    const panelTitle = document.createElement("div");
    panelTitle.className = "map-menu-title";
    panelTitle.textContent = "Map controls";
    panelHeader.appendChild(panelTitle);
    panelHeader.appendChild(closeBtn);
    panel.appendChild(panelHeader);
    const tabsPanel = createMapTabsPanel(activeTab);
    panel.appendChild(tabsPanel);
    const controlsPanel = createMapControlsPanel(activeTab);
    if (controlsPanel) {
      panel.appendChild(controlsPanel);
    }
    const palettePanel = createMapPalettePanel(items, activeTab);
    if (palettePanel) {
      panel.appendChild(palettePanel);
    }
    const searchOverlay = createSearchOverlay();
    overlay.appendChild(searchOverlay);
    let menuHoverOpen = Boolean(mapState.menuPinned) || Boolean(mapState.menuOpen);
    let menuHoverCloseTimer = null;
    const clearMenuHoverClose = () => {
      if (menuHoverCloseTimer !== null) {
        clearTimeout(menuHoverCloseTimer);
        menuHoverCloseTimer = null;
      }
    };
    const applyMenuState = () => {
      const open = Boolean(mapState.menuPinned) || menuHoverOpen;
      mapState.menuOpen = open;
      menu.classList.toggle("open", open);
      menu.classList.toggle("pinned", Boolean(mapState.menuPinned));
      toggle.setAttribute("aria-expanded", open ? "true" : "false");
      toggle.setAttribute("aria-pressed", mapState.menuPinned ? "true" : "false");
      toggle.setAttribute("aria-label", open ? "Hide map controls" : "Open map controls");
    };
    const openMenu = ({ pinned = false } = {}) => {
      if (pinned) {
        mapState.menuPinned = true;
      }
      menuHoverOpen = true;
      mapState.menuOpen = true;
      clearMenuHoverClose();
      applyMenuState();
    };
    const closeMenu = ({ unpin = false } = {}) => {
      if (unpin) {
        mapState.menuPinned = false;
      }
      menuHoverOpen = false;
      if (!mapState.menuPinned) {
        mapState.menuOpen = false;
      }
      clearMenuHoverClose();
      applyMenuState();
    };
    const scheduleMenuClose = () => {
      if (mapState.menuPinned) {
        return;
      }
      clearMenuHoverClose();
      menuHoverCloseTimer = setTimeout(() => {
        menuHoverCloseTimer = null;
        closeMenu();
      }, 140);
    };
    applyMenuState();
    toggle.addEventListener("click", (evt) => {
      evt.preventDefault();
      if (mapState.menuPinned) {
        closeMenu({ unpin: true });
      } else {
        openMenu({ pinned: true });
      }
    });
    const handleHoverOpen = () => openMenu();
    menu.addEventListener("mouseenter", handleHoverOpen);
    toggle.addEventListener("mouseenter", handleHoverOpen);
    panel.addEventListener("mouseenter", handleHoverOpen);
    toggle.addEventListener("focusin", handleHoverOpen);
    panel.addEventListener("focusin", handleHoverOpen);
    menu.addEventListener("mouseleave", scheduleMenuClose);
    menu.addEventListener("focusout", (evt) => {
      if (!menu.contains(evt.relatedTarget) && !mapState.menuPinned) {
        closeMenu();
      }
    });
    closeBtn.addEventListener("click", () => {
      closeMenu({ unpin: true });
    });
    const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.classList.add("map-svg");
    const defaultView = {
      x: (size - viewport) / 2,
      y: (size - viewport) / 2,
      w: viewport,
      h: viewport
    };
    const minSize = mapState.minView || defaultView.w;
    const maxSize = mapState.sizeLimit || defaultView.w;
    const storedView = getRestorableViewState(activeTab);
    let viewBox;
    let restoredFromMemory = false;
    let pendingFocusId = null;
    if (mapState.viewBox) {
      const current = mapState.viewBox;
      const cx = Number.isFinite(current.x) && Number.isFinite(current.w) ? current.x + current.w / 2 : defaultView.x + defaultView.w / 2;
      const cy = Number.isFinite(current.y) && Number.isFinite(current.h) ? current.y + current.h / 2 : defaultView.y + defaultView.h / 2;
      const desiredSize = Number.isFinite(current.w) ? current.w : defaultView.w;
      const clamped = clamp2(desiredSize, minSize, maxSize);
      viewBox = {
        x: cx - clamped / 2,
        y: cy - clamped / 2,
        w: clamped,
        h: clamped
      };
      restoredFromMemory = true;
    } else if (storedView) {
      const desiredSize = Number.isFinite(storedView.w) ? storedView.w : defaultView.w;
      const clamped = clamp2(desiredSize, minSize, maxSize);
      const limit = Math.max(mapState.sizeLimit || 0, clamped);
      const maxX = limit - clamped;
      const maxY = limit - clamped;
      const sx = Number.isFinite(storedView.x) ? storedView.x : defaultView.x;
      const sy = Number.isFinite(storedView.y) ? storedView.y : defaultView.y;
      viewBox = {
        x: clamp2(sx, 0, maxX),
        y: clamp2(sy, 0, maxY),
        w: clamped,
        h: clamped
      };
      restoredFromMemory = true;
    } else {
      viewBox = { ...defaultView };
      const newest = findNewestVisibleNode(visibleItems);
      if (newest) {
        pendingFocusId = newest.id;
      }
    }
    mapState.pendingFocusId = pendingFocusId;
    mapState.restoredViewFromMemory = restoredFromMemory;
    mapState.svg = svg;
    mapState.viewBox = viewBox;
    if (!Number.isFinite(mapState.defaultViewSize)) {
      mapState.defaultViewSize = viewBox.w;
    }
    const commitViewBox = (options = {}) => {
      svg.setAttribute("viewBox", `${viewBox.x} ${viewBox.y} ${viewBox.w} ${viewBox.h}`);
      const { forceScale = false } = options;
      if (forceScale) {
        mapState.lastScaleSize = { w: viewBox.w, h: viewBox.h };
        adjustScale();
        rememberViewBox();
        return;
      }
      const prev = mapState.lastScaleSize;
      const sizeChanged = !prev || Math.abs(prev.w - viewBox.w) > 0.5 || Math.abs(prev.h - viewBox.h) > 0.5;
      if (sizeChanged) {
        mapState.lastScaleSize = { w: viewBox.w, h: viewBox.h };
        adjustScale();
      }
      rememberViewBox();
    };
    const updateViewBox = (options = {}) => {
      const pending2 = {
        ...mapState.pendingViewBoxOptions || {},
        forceScale: Boolean(options.forceScale) || Boolean(mapState.pendingViewBoxOptions?.forceScale)
      };
      mapState.pendingViewBoxOptions = pending2;
      const immediate = Boolean(options.immediate) || typeof window === "undefined";
      if (immediate) {
        if (mapState.viewBoxFrame && typeof window !== "undefined" && typeof window.cancelAnimationFrame === "function") {
          window.cancelAnimationFrame(mapState.viewBoxFrame);
        }
        mapState.viewBoxFrame = null;
        const commitOptions = mapState.pendingViewBoxOptions;
        mapState.pendingViewBoxOptions = null;
        commitViewBox(commitOptions || {});
        return;
      }
      if (mapState.viewBoxFrame) {
        return;
      }
      if (typeof window === "undefined" || typeof window.requestAnimationFrame !== "function") {
        const commitOptions = mapState.pendingViewBoxOptions;
        mapState.pendingViewBoxOptions = null;
        commitViewBox(commitOptions || {});
        return;
      }
      mapState.viewBoxFrame = window.requestAnimationFrame(() => {
        const commitOptions = mapState.pendingViewBoxOptions;
        mapState.pendingViewBoxOptions = null;
        mapState.viewBoxFrame = null;
        commitViewBox(commitOptions || {});
      });
    };
    mapState.updateViewBox = updateViewBox;
    const g = document.createElementNS("http://www.w3.org/2000/svg", "g");
    const edgeLayer = document.createElementNS("http://www.w3.org/2000/svg", "g");
    edgeLayer.classList.add("map-layer", "map-layer--edges");
    const nodeLayer = document.createElementNS("http://www.w3.org/2000/svg", "g");
    nodeLayer.classList.add("map-layer", "map-layer--nodes");
    const defs = document.createElementNS("http://www.w3.org/2000/svg", "defs");
    buildLineMarkers(defs);
    g.appendChild(edgeLayer);
    g.appendChild(nodeLayer);
    svg.appendChild(defs);
    svg.appendChild(g);
    mapState.g = g;
    mapState.edgeLayer = edgeLayer;
    mapState.nodeLayer = nodeLayer;
    container.appendChild(svg);
    const tooltip = document.createElement("div");
    tooltip.className = "map-edge-tooltip hidden";
    container.appendChild(tooltip);
    mapState.edgeTooltip = tooltip;
    const selectionBox = document.createElement("div");
    selectionBox.className = "map-selection hidden";
    container.appendChild(selectionBox);
    mapState.selectionBox = selectionBox;
    attachSvgEvents(svg);
    const positions = {};
    mapState.positions = positions;
    mapState.elements = /* @__PURE__ */ new Map();
    const gravityModel = buildGravityModel(visibleItems);
    mapState.gravityModel = gravityModel;
    const nodeRadii = computeRadiiFromModel(gravityModel, visibleItems);
    mapState.nodeRadii = nodeRadii;
    let totalRadius = 0;
    let radiusCount = 0;
    let maxRadius = MIN_NODE_RADIUS;
    visibleItems.forEach((it) => {
      const radius = nodeRadii.get(it.id) || MIN_NODE_RADIUS;
      if (!Number.isFinite(radius)) return;
      totalRadius += radius;
      radiusCount += 1;
      if (radius > maxRadius) {
        maxRadius = radius;
      }
    });
    const avgRadius = radiusCount ? totalRadius / radiusCount : MIN_NODE_RADIUS;
    const typicalRadius = Math.max(avgRadius, maxRadius * 0.75, MIN_NODE_RADIUS);
    const nodeLength = Math.max(70, typicalRadius * 2);
    const groupSpacingBase = Math.max(nodeLength * 1.05, maxRadius * 2.2 + 30);
    const lectureSpacingBase = Math.max(nodeLength * 2.5, maxRadius * 3.6);
    const weekSpacingBase = Math.max(lectureSpacingBase * 1.18, nodeLength * 3.8);
    const blockSpacingBase = Math.max(weekSpacingBase * 1.22, nodeLength * 5);
    const groupMetrics = /* @__PURE__ */ new Map();
    const groupSpacingCache = /* @__PURE__ */ new Map();
    function touchGroupMetric(key, radius, bucket) {
      if (!key) return;
      const metric = groupMetrics.get(key) || {
        existingCount: 0,
        pendingCount: 0,
        sumRadius: 0,
        maxRadius: 0
      };
      if (bucket === "existing") {
        metric.existingCount += 1;
      } else if (bucket === "pending") {
        metric.pendingCount += 1;
      }
      metric.sumRadius += radius;
      if (radius > metric.maxRadius) {
        metric.maxRadius = radius;
      }
      groupMetrics.set(key, metric);
    }
    function getGroupSpacing(key) {
      if (groupSpacingCache.has(key)) {
        return groupSpacingCache.get(key);
      }
      const metric = groupMetrics.get(key) || {
        existingCount: 0,
        pendingCount: 0,
        sumRadius: 0,
        maxRadius: 0
      };
      const totalCount = (metric.existingCount || 0) + (metric.pendingCount || 0);
      const maxR = metric.maxRadius || typicalRadius;
      const avgR = totalCount ? metric.sumRadius / totalCount : typicalRadius;
      const spacing = Math.max(groupSpacingBase, avgR * 2 + 20, maxR * 2.4 + 32);
      groupSpacingCache.set(key, spacing);
      return spacing;
    }
    const center = size / 2;
    const newItems = [];
    const layout = activeTab ? ensureTabLayout(activeTab) : null;
    const allowLegacyPositions = Boolean(activeTab && activeTab.layoutSeeded !== true);
    let layoutDirty = false;
    let legacyImported = false;
    visibleItems.forEach((it) => {
      if (layout && layout[it.id]) {
        positions[it.id] = { ...layout[it.id] };
        return;
      }
      const legacy = it.mapPos;
      if (allowLegacyPositions && legacy && typeof legacy === "object" && Number.isFinite(Number(legacy.x)) && Number.isFinite(Number(legacy.y))) {
        const x = Number(legacy.x);
        const y = Number(legacy.y);
        positions[it.id] = { x, y };
        if (layout) {
          layout[it.id] = { x, y };
          layoutDirty = true;
          legacyImported = true;
        }
        return;
      }
      const groups = itemGroupCache.get(it.id) || deriveItemGroupKeys(it);
      const primaryGroup = getPrimaryGroupKey(it, groups);
      const weight = gravityModel.weights?.get(it.id) || 0;
      newItems.push({ item: it, primaryGroup, degree: weight });
    });
    const existingGroupInfo = /* @__PURE__ */ new Map();
    Object.entries(positions).forEach(([id, pos]) => {
      if (!pos) return;
      const groups = itemGroupCache.get(id) || [];
      const radius = nodeRadii.get(id) || MIN_NODE_RADIUS;
      groups.forEach((key) => {
        const info = existingGroupInfo.get(key) || {
          minX: pos.x,
          maxX: pos.x,
          minY: pos.y,
          maxY: pos.y,
          count: 0,
          maxRadius: radius,
          sumRadius: 0
        };
        info.count += 1;
        info.minX = Math.min(info.minX, pos.x);
        info.maxX = Math.max(info.maxX, pos.x);
        info.minY = Math.min(info.minY, pos.y);
        info.maxY = Math.max(info.maxY, pos.y);
        info.maxRadius = Math.max(info.maxRadius ?? radius, radius);
        info.sumRadius = (info.sumRadius || 0) + radius;
        existingGroupInfo.set(key, info);
        touchGroupMetric(key, radius, "existing");
      });
    });
    const pendingCounts = /* @__PURE__ */ new Map();
    newItems.forEach((entry) => {
      pendingCounts.set(entry.primaryGroup, (pendingCounts.get(entry.primaryGroup) || 0) + 1);
      const radius = nodeRadii.get(entry.item.id) || MIN_NODE_RADIUS;
      touchGroupMetric(entry.primaryGroup, radius, "pending");
    });
    const clusterOrigins = /* @__PURE__ */ new Map();
    const seenGroups = /* @__PURE__ */ new Set();
    const newGroupOrder = [];
    newItems.forEach((entry) => {
      const key = entry.primaryGroup;
      if (existingGroupInfo.has(key)) return;
      if (seenGroups.has(key)) return;
      seenGroups.add(key);
      newGroupOrder.push(key);
    });
    const blockAggregates = /* @__PURE__ */ new Map();
    const weekAggregates = /* @__PURE__ */ new Map();
    const lecturesByWeek = /* @__PURE__ */ new Map();
    const lectureCenters = /* @__PURE__ */ new Map();
    existingGroupInfo.forEach((info, key) => {
      const parsed = parseGroupKey(key);
      const blockKey = parsed.block || "__";
      const weekId = parsed.week || "__";
      const weekKey = `${blockKey}::${weekId}`;
      const centerX = (info.minX + info.maxX) / 2;
      const centerY = (info.minY + info.maxY) / 2;
      const blockAgg = blockAggregates.get(blockKey) || { x: 0, y: 0, count: 0 };
      blockAgg.x += centerX;
      blockAgg.y += centerY;
      blockAgg.count += 1;
      blockAggregates.set(blockKey, blockAgg);
      const weekAgg = weekAggregates.get(weekKey) || { x: 0, y: 0, count: 0 };
      weekAgg.x += centerX;
      weekAgg.y += centerY;
      weekAgg.count += 1;
      weekAggregates.set(weekKey, weekAgg);
      const lectureList = lecturesByWeek.get(weekKey) || [];
      lectureList.push({ x: centerX, y: centerY, spacing: lectureSpacingBase });
      lecturesByWeek.set(weekKey, lectureList);
      const lectureKey2 = `${weekKey}::${parsed.lecture || key}`;
      if (!lectureCenters.has(lectureKey2)) {
        lectureCenters.set(lectureKey2, { x: centerX, y: centerY, spacing: getGroupSpacing(key) });
      }
    });
    const blockCenters = /* @__PURE__ */ new Map();
    const blockPositionList = [];
    blockAggregates.forEach((agg, blockKey) => {
      if (!agg.count) return;
      const point = {
        x: agg.x / agg.count,
        y: agg.y / agg.count,
        spacing: blockSpacingBase,
        buffer: blockSpacingBase
      };
      blockCenters.set(blockKey, point);
      blockPositionList.push(point);
    });
    const weekCenters = /* @__PURE__ */ new Map();
    const weekPositionsByBlock = /* @__PURE__ */ new Map();
    weekAggregates.forEach((agg, weekKey) => {
      if (!agg.count) return;
      const point = {
        x: agg.x / agg.count,
        y: agg.y / agg.count,
        spacing: weekSpacingBase,
        buffer: weekSpacingBase
      };
      weekCenters.set(weekKey, point);
      const [blockKey] = weekKey.split("::");
      const list = weekPositionsByBlock.get(blockKey) || [];
      list.push(point);
      weekPositionsByBlock.set(blockKey, list);
    });
    const BLOCK_SPACING = blockSpacingBase;
    const WEEK_SPACING = weekSpacingBase;
    const LECTURE_SPACING = lectureSpacingBase;
    function ensureBlockCenter(blockKey) {
      if (blockCenters.has(blockKey)) return blockCenters.get(blockKey);
      const base2 = { x: center, y: center };
      const candidate = pickClusterPosition(blockPositionList, BLOCK_SPACING, base2, {
        buffer: BLOCK_SPACING * 0.3
      });
      const enriched = {
        x: candidate.x,
        y: candidate.y,
        spacing: BLOCK_SPACING,
        buffer: BLOCK_SPACING
      };
      blockCenters.set(blockKey, enriched);
      blockPositionList.push(enriched);
      return enriched;
    }
    function ensureWeekCenter(blockKey, weekId, blockCenter) {
      const weekKey = `${blockKey}::${weekId}`;
      if (weekCenters.has(weekKey)) return weekCenters.get(weekKey);
      const existing = weekPositionsByBlock.get(blockKey) || [];
      const candidate = pickClusterPosition(existing, WEEK_SPACING, blockCenter, {
        buffer: WEEK_SPACING * 0.25
      });
      const enriched = {
        x: candidate.x,
        y: candidate.y,
        spacing: WEEK_SPACING,
        buffer: WEEK_SPACING
      };
      weekCenters.set(weekKey, enriched);
      existing.push(enriched);
      weekPositionsByBlock.set(blockKey, existing);
      return enriched;
    }
    function ensureLectureCenter(blockKey, weekId, lectureId, weekCenter) {
      const weekKey = `${blockKey}::${weekId}`;
      const lectureKey2 = `${weekKey}::${lectureId}`;
      if (lectureCenters.has(lectureKey2)) return lectureCenters.get(lectureKey2);
      const existing = lecturesByWeek.get(weekKey) || [];
      const spacing = Math.max(LECTURE_SPACING, getGroupSpacing(lectureKey2));
      const candidate = pickClusterPosition(existing, spacing, weekCenter, {
        buffer: spacing * 0.25
      });
      const enriched = {
        x: candidate.x,
        y: candidate.y,
        spacing,
        buffer: spacing
      };
      lectureCenters.set(lectureKey2, enriched);
      existing.push(enriched);
      lecturesByWeek.set(weekKey, existing);
      return enriched;
    }
    newGroupOrder.forEach((key) => {
      const parsed = parseGroupKey(key);
      const blockKey = parsed.block || "__";
      const weekId = parsed.week || "__";
      const lectureId = parsed.lecture || key;
      const blockCenter = ensureBlockCenter(blockKey);
      const weekCenter = ensureWeekCenter(blockKey, weekId, blockCenter);
      const lectureCenter = ensureLectureCenter(blockKey, weekId, lectureId, weekCenter);
      clusterOrigins.set(key, {
        x: lectureCenter.x,
        y: lectureCenter.y,
        spacing: Math.max(getGroupSpacing(key), lectureCenter.spacing || 0)
      });
    });
    const groupPlacement = /* @__PURE__ */ new Map();
    function ensureGroupPlacement(key) {
      if (groupPlacement.has(key)) {
        return groupPlacement.get(key);
      }
      const existing = existingGroupInfo.get(key);
      const pending2 = pendingCounts.get(key) || 0;
      const total = (existing?.count || 0) + pending2;
      const columns = Math.max(2, Math.ceil(Math.sqrt(Math.max(total, 1))));
      const rows = Math.max(1, Math.ceil(Math.max(total, 1) / columns));
      const originSource = clusterOrigins.get(key);
      const origin = existing ? {
        x: (existing.minX + existing.maxX) / 2,
        y: (existing.minY + existing.maxY) / 2
      } : originSource ? { x: originSource.x, y: originSource.y } : { x: center, y: center };
      let spacing = Math.max(getGroupSpacing(key), originSource?.spacing || 0);
      if (existing?.count > 1) {
        const spread = Math.max(existing.maxX - existing.minX, existing.maxY - existing.minY);
        const averageRadius = (existing.sumRadius || 0) / Math.max(existing.count, 1);
        spacing = Math.max(
          spacing,
          spread / Math.max(1, existing.count - 1) + Math.max(averageRadius * 1.8, typicalRadius * 1.6)
        );
      } else if (existing?.count === 1) {
        spacing = Math.max(spacing, (existing.maxRadius || typicalRadius) * 2.6);
      } else {
        spacing = Math.max(spacing, groupSpacingBase);
      }
      const info = { origin, columns, rows, spacing, index: existing?.count || 0 };
      groupPlacement.set(key, info);
      return info;
    }
    function allocateGroupPosition(key, entry) {
      const info = ensureGroupPlacement(key);
      const itemRadius = entry ? nodeRadii.get(entry.item.id) || typicalRadius : typicalRadius;
      const maxAttempts = 400;
      for (let offset = 0; offset < maxAttempts; offset += 1) {
        const idx = info.index + offset;
        const col = idx % info.columns;
        const row = Math.floor(idx / info.columns);
        const neededRows = Math.max(info.rows, row + 1);
        const colCenter = (info.columns - 1) / 2;
        const rowCenter = (neededRows - 1) / 2;
        const x = info.origin.x + (col - colCenter) * info.spacing;
        const y = info.origin.y + (row - rowCenter) * info.spacing;
        let collision = false;
        for (const existingId in positions) {
          const other = positions[existingId];
          if (!other) continue;
          const otherRadius = nodeRadii.get(existingId) || typicalRadius;
          const minDistance = itemRadius + otherRadius + Math.max(30, info.spacing * 0.35);
          if (Math.hypot(other.x - x, other.y - y) < minDistance) {
            collision = true;
            break;
          }
        }
        if (!collision) {
          info.index = idx + 1;
          info.rows = Math.max(info.rows, neededRows);
          groupPlacement.set(key, info);
          return { x, y };
        }
      }
      info.index += maxAttempts;
      groupPlacement.set(key, info);
      return {
        x: info.origin.x + (Math.random() - 0.5) * info.spacing,
        y: info.origin.y + (Math.random() - 0.5) * info.spacing
      };
    }
    newItems.sort((a, b) => b.degree - a.degree);
    newItems.forEach((entry) => {
      const pos = allocateGroupPosition(entry.primaryGroup, entry);
      positions[entry.item.id] = pos;
      if (layout) {
        layout[entry.item.id] = { ...pos };
        layoutDirty = true;
      }
    });
    if (activeTab && legacyImported && activeTab.layoutSeeded !== true) {
      activeTab.layoutSeeded = true;
      layoutDirty = true;
    }
    if (layoutDirty) {
      await persistMapConfig();
    }
    mapState.selectionIds = mapState.selectionIds.filter((id) => positions[id]);
    const hiddenLinks = gatherHiddenLinks(items, itemMap);
    buildToolbox(container, hiddenNodes.length, hiddenLinks.length);
    buildHiddenPanel(container, hiddenNodes, hiddenLinks);
    const drawn = /* @__PURE__ */ new Set();
    const nodeLayerRef = mapState.nodeLayer || g;
    visibleItems.forEach((it) => {
      (it.links || []).forEach((link) => {
        const targetId = link?.id;
        if (!targetId) return;
        if (link.hidden) return;
        if (!positions[targetId]) return;
        const key = it.id < targetId ? `${it.id}|${targetId}` : `${targetId}|${it.id}`;
        if (drawn.has(key)) return;
        drawn.add(key);
        const info = { ...link, id: targetId };
        applyLinkVisibility(it.id, targetId, info);
      });
    });
    visibleItems.forEach((it) => {
      const pos = positions[it.id];
      if (!pos) return;
      const circle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
      circle.setAttribute("cx", pos.x);
      circle.setAttribute("cy", pos.y);
      const cachedRadius = mapState.nodeRadii?.get(it.id);
      const baseR = typeof cachedRadius === "number" ? cachedRadius : computeNodeRadiusFromWeight(
        gravityModel.weights?.get(it.id) || 0,
        gravityModel.maxWeight || 1
      );
      circle.setAttribute("r", baseR);
      circle.dataset.radius = baseR;
      circle.setAttribute("class", "map-node");
      circle.dataset.id = it.id;
      circle.setAttribute("fill", getNodeFill(it));
      const handleNodePointerDown = (e) => {
        if (e.button !== 0) return;
        const isNavigateTool = mapState.tool === TOOL.NAVIGATE;
        const isAreaDrag = mapState.tool === TOOL.AREA && mapState.selectionIds.includes(it.id);
        if (!isNavigateTool && !isAreaDrag) return;
        e.stopPropagation();
        e.preventDefault();
        mapState.suppressNextClick = false;
        mapState.lastPointerDownInfo = null;
        getSvgRect({ force: true });
        const pointer = clientToMap(e.clientX, e.clientY);
        const current = mapState.positions[it.id] || pos;
        const { x, y } = pointer;
        if (isNavigateTool) {
          const selectionSet = new Set(
            mapState.selectionIds.filter((id) => mapState.positions[id] || positions[id])
          );
          const wasSelected = selectionSet.has(it.id);
          const hadMultipleBefore = selectionSet.size > 1;
          let addedToSelection = false;
          if (e.shiftKey) {
            if (!wasSelected) {
              selectionSet.add(it.id);
              addedToSelection = true;
            }
          } else {
            if (!wasSelected || hadMultipleBefore) {
              selectionSet.clear();
              selectionSet.add(it.id);
              addedToSelection = !wasSelected;
            }
          }
          if (!selectionSet.size) {
            selectionSet.add(it.id);
            addedToSelection = !wasSelected;
          }
          const uniqueSelection = Array.from(selectionSet);
          mapState.selectionIds = uniqueSelection;
          mapState.previewSelection = null;
          mapState.selectionPreviewSignature = "";
          updateSelectionHighlight();
          mapState.lastPointerDownInfo = { id: it.id, shift: e.shiftKey, added: addedToSelection };
          const dragNodes = [];
          uniqueSelection.forEach((id) => {
            const source = mapState.positions[id] || positions[id] || (id === it.id ? current : null);
            if (!source) return;
            dragNodes.push({
              id,
              start: { x: source.x, y: source.y },
              offset: {
                dx: pointer.x - source.x,
                dy: pointer.y - source.y
              }
            });
          });
          if (!dragNodes.length) {
            mapState.nodeDrag = null;
            mapState.nodeWasDragged = false;
            refreshCursor({ keepOverride: true });
            return;
          }
          mapState.nodeDrag = {
            pointerId: e.pointerId,
            captureTarget: e.currentTarget || circle,
            client: { x: e.clientX, y: e.clientY },
            startPointer: { x: pointer.x, y: pointer.y },
            lastPointer: { x: pointer.x, y: pointer.y },
            nodes: dragNodes,
            moved: false,
            primaryId: it.id
          };
          if (mapState.nodeDrag.captureTarget?.setPointerCapture) {
            try {
              mapState.nodeDrag.captureTarget.setPointerCapture(e.pointerId);
            } catch {
            }
          }
          mapState.nodeWasDragged = false;
          setAreaInteracting(true);
        } else {
          const selectionIds = [...mapState.selectionIds];
          mapState.areaDrag = {
            ids: selectionIds,
            start: { x, y },
            origin: selectionIds.map((id) => {
              const source = mapState.positions[id] || positions[id] || { x: 0, y: 0 };
              return { id, pos: { ...source } };
            }),
            moved: false,
            pointerId: e.pointerId,
            captureTarget: e.currentTarget || circle,
            client: { x: e.clientX, y: e.clientY }
          };
          if (mapState.areaDrag.captureTarget?.setPointerCapture) {
            try {
              mapState.areaDrag.captureTarget.setPointerCapture(e.pointerId);
            } catch {
            }
          }
          mapState.nodeWasDragged = false;
          setAreaInteracting(true);
        }
        refreshCursor({ keepOverride: false });
      };
      circle.addEventListener("pointerdown", handleNodePointerDown);
      circle.addEventListener("click", async (e) => {
        e.stopPropagation();
        if (mapState.tool === TOOL.NAVIGATE && e.shiftKey) {
          mapState.nodeWasDragged = false;
          mapState.suppressNextClick = false;
          const info = mapState.lastPointerDownInfo;
          const skipToggle = info && info.id === it.id && info.shift && info.added;
          if (!skipToggle) {
            const set = new Set(mapState.selectionIds);
            if (set.has(it.id)) {
              set.delete(it.id);
            } else {
              set.add(it.id);
            }
            mapState.selectionIds = Array.from(set);
            mapState.previewSelection = null;
            mapState.selectionPreviewSignature = "";
            updateSelectionHighlight();
          }
          mapState.lastPointerDownInfo = null;
          return;
        }
        if (mapState.suppressNextClick) {
          mapState.suppressNextClick = false;
          mapState.nodeWasDragged = false;
          mapState.lastPointerDownInfo = null;
          return;
        }
        if (mapState.tool === TOOL.NAVIGATE) {
          if (!mapState.nodeWasDragged) {
            openItemPopup(it.id);
          }
          mapState.nodeWasDragged = false;
          mapState.lastPointerDownInfo = null;
        } else if (mapState.tool === TOOL.HIDE) {
          if (confirm(`Remove ${titleOf4(it)} from the map?`)) {
            applyLocalNodeHidden(it.id, true);
            refreshToolboxBadges();
            setNodeHidden(it.id, true).then(() => renderMap(root)).catch((err) => {
              console.error(err);
            });
          }
        } else if (mapState.tool === TOOL.ADD_LINK) {
          await handleAddLinkClick(it.id);
        }
      });
      circle.addEventListener("mouseenter", () => {
        if (mapState.tool === TOOL.HIDE) {
          applyCursorOverride("hide");
        } else if (mapState.tool === TOOL.ADD_LINK) {
          applyCursorOverride("link");
        }
      });
      circle.addEventListener("mouseleave", () => {
        if (mapState.tool === TOOL.HIDE) {
          clearCursorOverride("hide");
        }
        if (mapState.tool === TOOL.ADD_LINK) {
          clearCursorOverride("link");
        }
      });
      nodeLayerRef.appendChild(circle);
      const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
      text.setAttribute("x", pos.x);
      text.setAttribute("y", pos.y - (baseR + 12));
      text.setAttribute("class", "map-label");
      text.setAttribute("font-size", "16");
      text.dataset.id = it.id;
      text.textContent = it.name || it.concept || "?";
      text.addEventListener("pointerdown", handleNodePointerDown);
      text.addEventListener("click", async (e) => {
        e.stopPropagation();
        if (mapState.tool === TOOL.NAVIGATE && e.shiftKey) {
          mapState.nodeWasDragged = false;
          mapState.suppressNextClick = false;
          const info = mapState.lastPointerDownInfo;
          const skipToggle = info && info.id === it.id && info.shift && info.added;
          if (!skipToggle) {
            const set = new Set(mapState.selectionIds);
            if (set.has(it.id)) {
              set.delete(it.id);
            } else {
              set.add(it.id);
            }
            mapState.selectionIds = Array.from(set);
            mapState.previewSelection = null;
            mapState.selectionPreviewSignature = "";
            updateSelectionHighlight();
          }
          mapState.lastPointerDownInfo = null;
          return;
        }
        if (mapState.suppressNextClick) {
          mapState.suppressNextClick = false;
          mapState.nodeWasDragged = false;
          mapState.lastPointerDownInfo = null;
          return;
        }
        if (mapState.tool === TOOL.NAVIGATE && !mapState.nodeWasDragged) {
          openItemPopup(it.id);
          mapState.lastPointerDownInfo = null;
        } else if (mapState.tool === TOOL.HIDE) {
          if (confirm(`Remove ${titleOf4(it)} from the map?`)) {
            applyLocalNodeHidden(it.id, true);
            refreshToolboxBadges();
            setNodeHidden(it.id, true).then(() => renderMap(root)).catch((err) => {
              console.error(err);
            });
          }
        } else if (mapState.tool === TOOL.ADD_LINK) {
          await handleAddLinkClick(it.id);
        }
        mapState.nodeWasDragged = false;
      });
      nodeLayerRef.appendChild(text);
      mapState.elements.set(it.id, { circle, label: text });
    });
    updateSelectionHighlight();
    updatePendingHighlight();
    if (mapState.pendingFocusId && !mapState.restoredViewFromMemory) {
      const success = centerOnNode(mapState.pendingFocusId, { select: false });
      if (success) {
        mapState.restoredViewFromMemory = true;
      }
    }
    mapState.pendingFocusId = null;
    updateViewBox({ forceScale: true, immediate: true });
    refreshCursor();
    root.replaceChildren(fragment);
  }
  function ensureListeners() {
    if (mapState.listenersAttached || typeof window === "undefined") return;
    window.addEventListener("pointermove", handlePointerMove);
    window.addEventListener("pointerup", handlePointerUp);
    window.addEventListener("pointercancel", handlePointerUp);
    mapState.listenersAttached = true;
    if (!window._mapResizeAttached) {
      window.addEventListener("resize", () => {
        invalidateSvgRect();
        adjustScale();
      });
      window._mapResizeAttached = true;
    }
    if (!window._mapToolboxResizeAttached) {
      window.addEventListener("resize", ensureToolboxWithinBounds);
      window._mapToolboxResizeAttached = true;
    }
  }
  function buildLineMarkers(defs) {
    const svgNS = "http://www.w3.org/2000/svg";
    const configs = [
      {
        id: "arrow-end",
        viewBox: "0 0 16 16",
        refX: 14,
        refY: 8,
        markerWidth: 9,
        markerHeight: 9,
        path: "M2 2 L14 8 L2 14 L6 8 Z",
        units: "strokeWidth",
        scaleMode: "stroke"
      },
      {
        id: "arrow-start",
        viewBox: "0 0 16 16",
        refX: 2,
        refY: 8,
        markerWidth: 9,
        markerHeight: 9,
        path: "M14 2 L2 8 L14 14 L10 8 Z",
        units: "strokeWidth",
        scaleMode: "stroke"
      }
    ];
    mapState.markerDefs = defs;
    mapState.lineMarkers = /* @__PURE__ */ new Map();
    if (!mapState.lineMarkerCache) {
      mapState.lineMarkerCache = /* @__PURE__ */ new Map();
    } else {
      mapState.lineMarkerCache.clear();
    }
    configs.forEach((cfg) => {
      const marker = document.createElementNS(svgNS, "marker");
      marker.setAttribute("id", cfg.id);
      marker.setAttribute("viewBox", cfg.viewBox);
      marker.dataset.baseRefX = String(cfg.refX);
      marker.dataset.baseRefY = String(cfg.refY);
      marker.dataset.baseWidth = String(cfg.markerWidth);
      marker.dataset.baseHeight = String(cfg.markerHeight);
      marker.dataset.scaleMode = cfg.scaleMode || "absolute";
      marker.setAttribute("refX", String(cfg.refX));
      marker.setAttribute("refY", String(cfg.refY));
      marker.setAttribute("markerWidth", String(cfg.markerWidth));
      marker.setAttribute("markerHeight", String(cfg.markerHeight));
      marker.setAttribute("orient", "auto");
      marker.setAttribute("markerUnits", cfg.units || "userSpaceOnUse");
      marker.setAttribute("class", "map-marker");
      const path = document.createElementNS(svgNS, "path");
      path.setAttribute("d", cfg.path);
      path.setAttribute("fill", "context-stroke");
      path.setAttribute("stroke", "context-stroke");
      path.setAttribute("stroke-linejoin", "round");
      marker.appendChild(path);
      defs.appendChild(marker);
      mapState.lineMarkers.set(cfg.id, marker);
    });
    updateMarkerSizes();
  }
  function updateMarkerSizes() {
    const markers = mapState.lineMarkers;
    if (!markers || markers.size === 0) return;
    const { zoomRatio = 1, lineScale = 1 } = getCurrentScales();
    const ratio = Number.isFinite(zoomRatio) && zoomRatio > 0 ? zoomRatio : 1;
    const strokeScale = Number.isFinite(lineScale) && lineScale > 0 ? lineScale : 1;
    markers.forEach((marker) => {
      const baseWidth = Number(marker.dataset.baseWidth) || 12;
      const baseHeight = Number(marker.dataset.baseHeight) || 12;
      const baseRefX = Number(marker.dataset.baseRefX) || 0;
      const baseRefY = Number(marker.dataset.baseRefY) || 0;
      const scaleMode = marker.dataset.scaleMode || "absolute";
      if (scaleMode === "stroke") {
        marker.setAttribute("markerWidth", String(baseWidth));
        marker.setAttribute("markerHeight", String(baseHeight));
        marker.setAttribute("refX", String(baseRefX));
        marker.setAttribute("refY", String(baseRefY));
      } else {
        const width = baseWidth * ratio * strokeScale;
        const height = baseHeight * ratio * strokeScale;
        marker.setAttribute("markerWidth", String(width));
        marker.setAttribute("markerHeight", String(height));
        marker.setAttribute("refX", String(baseRefX * ratio * strokeScale));
        marker.setAttribute("refY", String(baseRefY * ratio * strokeScale));
      }
    });
  }
  function beginViewDrag(e) {
    if (!mapState.svg || !mapState.viewBox) return false;
    if (e.button !== 0) return false;
    mapState.justCompletedSelection = false;
    getSvgRect({ force: true });
    const startMap = clientToMap(e.clientX, e.clientY);
    mapState.draggingView = true;
    mapState.viewWasDragged = false;
    mapState.viewPointerId = e.pointerId;
    mapState.lastPointer = {
      x: e.clientX,
      y: e.clientY,
      mapX: startMap.x,
      mapY: startMap.y
    };
    mapState.viewDragStart = {
      clientX: e.clientX,
      clientY: e.clientY,
      viewX: mapState.viewBox.x,
      viewY: mapState.viewBox.y
    };
    if (e.currentTarget?.setPointerCapture) {
      try {
        e.currentTarget.setPointerCapture(e.pointerId);
      } catch {
      }
    }
    setAreaInteracting(true);
    refreshCursor({ keepOverride: false });
    return true;
  }
  function attachSvgEvents(svg) {
    svg.addEventListener("pointerdown", (e) => {
      if (e.button !== 0) return;
      if (e.target !== svg) return;
      closeLineMenu();
      mapState.justCompletedSelection = false;
      getSvgRect({ force: true });
      mapState.lastPointerDownInfo = null;
      if (mapState.tool !== TOOL.AREA) {
        e.preventDefault();
        beginViewDrag(e);
      } else {
        e.preventDefault();
        startSelectionDrag(e.pointerId, e.clientX, e.clientY);
        if (svg.setPointerCapture) {
          try {
            svg.setPointerCapture(e.pointerId);
          } catch {
          }
        }
        setAreaInteracting(true);
      }
    });
    svg.addEventListener("click", (e) => {
      if (mapState.tool !== TOOL.AREA) return;
      if (e.target !== svg) return;
      if (mapState.justCompletedSelection) {
        mapState.justCompletedSelection = false;
        return;
      }
      if (mapState.selectionIds.length || mapState.previewSelection) {
        mapState.selectionIds = [];
        mapState.previewSelection = null;
        mapState.selectionPreviewSignature = "";
        updateSelectionHighlight();
      }
      setAreaInteracting(false);
    });
    svg.addEventListener("wheel", (e) => {
      e.preventDefault();
      if (!mapState.viewBox) return;
      const rect = getSvgRect({ force: true });
      if (!rect || !rect.width || !rect.height) return;
      const pixelMode = e.deltaMode === 0;
      const wantsZoom = e.ctrlKey || e.metaKey || e.altKey || !pixelMode;
      if (!wantsZoom) {
        const scaleX = rect.width ? mapState.viewBox.w / rect.width : 0;
        const scaleY = rect.height ? mapState.viewBox.h / rect.height : 0;
        mapState.viewBox.x += e.deltaX * scaleX * PAN_ACCELERATION;
        mapState.viewBox.y += e.deltaY * scaleY * PAN_ACCELERATION;
        constrainViewBox();
        mapState.updateViewBox({ immediate: true });
        return;
      }
      const ratioX = (e.clientX - rect.left) / rect.width;
      const ratioY = (e.clientY - rect.top) / rect.height;
      const mx = mapState.viewBox.x + ratioX * mapState.viewBox.w;
      const my = mapState.viewBox.y + ratioY * mapState.viewBox.h;
      let deltaY = e.deltaY;
      if (e.deltaMode === 1) {
        deltaY *= 16;
      } else if (e.deltaMode === 2) {
        deltaY *= rect.height;
      }
      const rawFactor = Math.exp(deltaY * ZOOM_INTENSITY);
      const factor = Number.isFinite(rawFactor) && rawFactor > 0 ? rawFactor : 1;
      const maxSize = mapState.sizeLimit || 2e3;
      const minSize = mapState.minView || 100;
      const nextW = clamp2(mapState.viewBox.w * factor, minSize, maxSize);
      mapState.viewBox.w = nextW;
      mapState.viewBox.h = nextW;
      mapState.viewBox.x = mx - ratioX * nextW;
      mapState.viewBox.y = my - ratioY * nextW;
      constrainViewBox();
      mapState.updateViewBox();
    }, { passive: false });
  }
  function getNodeDragTargets() {
    const drag = mapState.nodeDrag;
    if (!drag) return [];
    if (Array.isArray(drag.nodes) && drag.nodes.length) {
      return drag.nodes;
    }
    if (Array.isArray(drag.targets) && drag.targets.length) {
      return drag.targets;
    }
    if (drag.id) {
      return [{ id: drag.id }];
    }
    return [];
  }
  function applyNodeDragFromPointer(pointer, options = {}) {
    if (!pointer) return false;
    const drag = mapState.nodeDrag;
    if (!drag) return false;
    const lastPointer = drag.lastPointer;
    if (lastPointer && Math.abs(lastPointer.x - pointer.x) < 1e-4 && Math.abs(lastPointer.y - pointer.y) < 1e-4) {
      return false;
    }
    const targets = Array.isArray(drag.nodes) ? drag.nodes : [];
    if (!targets.length) return false;
    let applied = false;
    let moved = drag.moved === true;
    const startPointer = drag.startPointer || null;
    targets.forEach((target) => {
      if (!target) return;
      const { id, offset = { dx: 0, dy: 0 }, start } = target;
      if (!id) return;
      const nx = pointer.x - offset.dx;
      const ny = pointer.y - offset.dy;
      scheduleNodePositionUpdate(id, { x: nx, y: ny }, { immediate: true, animate: true });
      if (!moved && start) {
        const dx = nx - start.x;
        const dy = ny - start.y;
        if (Math.hypot(dx, dy) > NODE_DRAG_DISTANCE_THRESHOLD) {
          moved = true;
        }
      }
      applied = true;
    });
    drag.lastPointer = { x: pointer.x, y: pointer.y };
    drag.moved = moved;
    if (applied && moved && options.markDragged !== false) {
      mapState.nodeWasDragged = true;
    }
    return applied;
  }
  function handlePointerMove(e) {
    if (!mapState.svg) return;
    const pendingPress = mapState.edgePress;
    if (pendingPress && pendingPress.pointerId === e.pointerId && !pendingPress.activated) {
      const dx = e.clientX - pendingPress.startClient.x;
      const dy = e.clientY - pendingPress.startClient.y;
      if (Math.hypot(dx, dy) > EDGE_DRAG_MOVE_THRESHOLD) {
        const pointer = clientToMap(e.clientX, e.clientY);
        activateEdgePress(pendingPress, pointer, { fromMove: true });
      }
    }
    if (mapState.toolboxDrag) {
      moveToolboxDrag(e.clientX, e.clientY);
      return;
    }
    if (mapState.menuDrag) {
      updateMenuDragPosition(e.clientX, e.clientY);
      return;
    }
    if (mapState.edgeDrag && mapState.edgeDrag.pointerId === e.pointerId) {
      const drag = mapState.edgeDrag;
      if (!drag.line || typeof drag.handleIndex !== "number") return;
      const distance = Math.hypot(e.clientX - drag.clientStart.x, e.clientY - drag.clientStart.y);
      if (!drag.hasDragged && distance < 2.4) {
        return;
      }
      if (!drag.hasDragged) {
        drag.hasDragged = true;
      }
      const pointer = clientToMap(e.clientX, e.clientY);
      const base = drag.base;
      if (!pointer || !base) return;
      const dx = base.endX - base.startX;
      const dy = base.endY - base.startY;
      const length = base.trimmedLength || Math.hypot(dx, dy) || 1;
      if (!length) return;
      const nx = -base.uy;
      const ny = base.ux;
      let handles = drag.handles || [];
      const index = clamp2(drag.handleIndex, 0, handles.length - 1);
      const handle = handles[index];
      if (!handle) return;
      const projectionAlong = ((pointer.x - base.startX) * dx + (pointer.y - base.startY) * dy) / (length * length);
      const nextPosition = clampHandlePosition(projectionAlong);
      const baseX = base.startX + dx * nextPosition;
      const baseY = base.startY + dy * nextPosition;
      const weight = getHandleWeight(nextPosition);
      const rawOffset = ((pointer.x - baseX) * nx + (pointer.y - baseY) * ny) / length;
      const normalized2 = clampHandleOffset(rawOffset / (weight || 1));
      handle.position = nextPosition;
      handle.offset = normalized2;
      handle.weight = weight;
      drag.offsetChanged = drag.offsetChanged || Math.abs((handle.startOffset ?? handle.offset) - handle.offset) > 5e-4 || Math.abs((handle.startPosition ?? handle.position) - handle.position) > 5e-4;
      const sortedHandles = handles.slice().sort((a, b) => a.position - b.position);
      const newIndex = sortedHandles.indexOf(handle);
      handles = sortedHandles;
      drag.handles = handles;
      if (newIndex >= 0) {
        drag.handleIndex = newIndex;
      }
      if (drag.createdHandle) {
        drag.createdIndex = handles.indexOf(drag.createdHandle);
      }
      const patchHandles = handles.map((h) => ({ position: h.position, offset: h.offset }));
      applyLineStyle(drag.line, { curveHandles: patchHandles });
      return;
    }
    if (mapState.nodeDrag && mapState.nodeDrag.pointerId === e.pointerId) {
      mapState.nodeDrag.client = { x: e.clientX, y: e.clientY };
      updateAutoPanFromPointer(e.clientX, e.clientY, { allowDuringDrag: true });
      const pointer = clientToMap(e.clientX, e.clientY);
      applyNodeDragFromPointer(pointer);
      return;
    }
    if (mapState.areaDrag && mapState.areaDrag.pointerId === e.pointerId) {
      mapState.areaDrag.client = { x: e.clientX, y: e.clientY };
      updateAutoPanFromPointer(e.clientX, e.clientY, { allowDuringDrag: true });
      const { x, y } = clientToMap(e.clientX, e.clientY);
      const dx = x - mapState.areaDrag.start.x;
      const dy = y - mapState.areaDrag.start.y;
      mapState.areaDrag.moved = Math.abs(dx) > 0.5 || Math.abs(dy) > 0.5;
      mapState.areaDrag.origin.forEach(({ id, pos }) => {
        const nx = pos.x + dx;
        const ny = pos.y + dy;
        scheduleNodePositionUpdate(id, { x: nx, y: ny }, { immediate: true, animate: true });
      });
      mapState.nodeWasDragged = true;
      return;
    }
    if (mapState.draggingView && mapState.viewPointerId === e.pointerId) {
      const start = mapState.viewDragStart;
      if (!start) return;
      const rect = getSvgRect();
      if (!rect || !rect.width || !rect.height) return;
      if (typeof e.preventDefault === "function") {
        e.preventDefault();
      }
      const movedDistance = Math.hypot(e.clientX - start.clientX, e.clientY - start.clientY);
      if (!mapState.viewWasDragged && movedDistance > 1.5) {
        mapState.viewWasDragged = true;
      }
      const scaleX = mapState.viewBox.w / rect.width;
      const scaleY = mapState.viewBox.h / rect.height;
      const deltaX = (e.clientX - start.clientX) * PAN_ACCELERATION;
      const deltaY = (e.clientY - start.clientY) * PAN_ACCELERATION;
      mapState.viewBox.x = start.viewX - deltaX * scaleX;
      mapState.viewBox.y = start.viewY - deltaY * scaleY;
      constrainViewBox();
      mapState.lastPointer = { x: e.clientX, y: e.clientY };
      mapState.updateViewBox({ immediate: true });
      if (mapState.selectionRect) {
        refreshSelectionMaps();
      }
      return;
    }
    if (mapState.selectionRect && mapState.selectionRect.pointerId === e.pointerId) {
      updateAutoPanFromPointer(e.clientX, e.clientY);
      updateSelectionDragPosition(e.clientX, e.clientY);
    }
  }
  async function handlePointerUp(e) {
    if (!mapState.svg) return;
    flushNodePositionUpdates({ cancelFrame: true });
    stopAutoPan();
    if (mapState.toolboxDrag) {
      stopToolboxDrag();
    }
    if (mapState.menuDrag) {
      await finishMenuDrag(e.clientX, e.clientY);
      return;
    }
    const edgePress = mapState.edgePress;
    if (edgePress && edgePress.pointerId === e.pointerId) {
      clearEdgePressTimer(edgePress);
      mapState.edgePress = null;
      if (!edgePress.activated && edgePress.type === "handle") {
        const dx = e.clientX - edgePress.startClient.x;
        const dy = e.clientY - edgePress.startClient.y;
        if (Math.hypot(dx, dy) <= EDGE_CLICK_DISTANCE) {
          const line = edgePress.line;
          if (line && confirm("Remove this anchor point?")) {
            await removeHandleAt(line, edgePress.handleIndex);
          } else if (line) {
            showLineHandles(line);
            applyLineHover(line);
          }
        }
      }
    }
    let cursorNeedsRefresh = false;
    if (mapState.edgeDrag && mapState.edgeDrag.pointerId === e.pointerId) {
      const drag = mapState.edgeDrag;
      mapState.edgeDrag = null;
      if (drag.captureTarget?.releasePointerCapture) {
        try {
          drag.captureTarget.releasePointerCapture(e.pointerId);
        } catch {
        }
      }
      const handles = drag.handles || [];
      const createdIndex = Number.isInteger(drag.createdIndex) ? drag.createdIndex : -1;
      const createdHandle = drag.createdHandle || (createdIndex >= 0 ? handles[createdIndex] : null);
      const changed = drag.offsetChanged || handles.some((handle) => {
        const startOffset = handle.startOffset ?? handle.offset;
        const startPosition = handle.startPosition ?? handle.position;
        return Math.abs(handle.offset - startOffset) > 5e-4 || Math.abs(handle.position - startPosition) > 5e-4;
      });
      const shouldAutoRemove = drag.insertedHandle && !drag.hasDragged;
      if (shouldAutoRemove && createdHandle) {
        const trimmed = handles.filter((handle) => handle !== createdHandle);
        const patch = buildCurvePatchFromHandles(trimmed);
        await updateLink(drag.aId, drag.bId, patch);
        applyLineStyle(drag.line, patch);
        applyLinkPatchToState(drag.aId, drag.bId, patch);
        mapState.edgeDragJustCompleted = true;
        setTimeout(() => {
          mapState.edgeDragJustCompleted = false;
        }, 0);
      } else if (changed) {
        const payloadHandles = handles.map((handle) => ({ position: handle.position, offset: handle.offset }));
        const patch = buildCurvePatchFromHandles(payloadHandles);
        await updateLink(drag.aId, drag.bId, patch);
        applyLineStyle(drag.line, patch);
        applyLinkPatchToState(drag.aId, drag.bId, patch);
        mapState.edgeDragJustCompleted = true;
        setTimeout(() => {
          mapState.edgeDragJustCompleted = false;
        }, 0);
      }
      if (drag.line) {
        drag.line._handleSticky = false;
        const hovered = typeof drag.line.matches === "function" && drag.line.matches(":hover");
        if (hovered) {
          showLineHandles(drag.line);
        } else {
          hideLineHandles(drag.line, { force: true });
        }
      }
      cursorNeedsRefresh = true;
    }
    if (mapState.nodeDrag && mapState.nodeDrag.pointerId === e.pointerId) {
      const drag = mapState.nodeDrag;
      const dragTargets = getNodeDragTargets();
      if (drag.captureTarget?.releasePointerCapture) {
        try {
          drag.captureTarget.releasePointerCapture(e.pointerId);
        } catch {
        }
      }
      const wasDragged = mapState.nodeWasDragged || drag.moved;
      if (wasDragged && mapState.lastPointerDownInfo?.id === drag.primaryId) {
        mapState.lastPointerDownInfo = null;
      }
      mapState.nodeDrag = null;
      flushQueuedEdgeUpdates({ force: true });
      cursorNeedsRefresh = true;
      if (wasDragged) {
        const ids = dragTargets.map((target) => target.id).filter(Boolean);
        if (!ids.length && drag.id) {
          ids.push(drag.id);
        }
        const uniqueIds = Array.from(new Set(ids));
        if (uniqueIds.length) {
          for (const nodeId of uniqueIds) {
            await persistNodePosition(nodeId, { persist: false });
          }
          await persistMapConfig();
        }
        mapState.suppressNextClick = true;
      } else {
        mapState.suppressNextClick = false;
      }
      mapState.nodeWasDragged = false;
      setAreaInteracting(false);
    }
    if (mapState.areaDrag && mapState.areaDrag.pointerId === e.pointerId) {
      const currentDrag = mapState.areaDrag;
      const moved = currentDrag.moved;
      const ids = currentDrag.ids;
      if (currentDrag.captureTarget?.releasePointerCapture) {
        try {
          currentDrag.captureTarget.releasePointerCapture(e.pointerId);
        } catch {
        }
      }
      mapState.areaDrag = null;
      flushQueuedEdgeUpdates({ force: true });
      cursorNeedsRefresh = true;
      if (moved) {
        for (const id of ids) {
          await persistNodePosition(id, { persist: false });
        }
        await persistMapConfig();
        mapState.suppressNextClick = true;
      } else {
        mapState.suppressNextClick = false;
      }
      mapState.nodeWasDragged = false;
      stopAutoPan();
      setAreaInteracting(false);
    }
    if (mapState.draggingView && mapState.viewPointerId === e.pointerId) {
      const wasDragged = mapState.viewWasDragged;
      mapState.draggingView = false;
      mapState.viewPointerId = null;
      mapState.viewDragStart = null;
      mapState.viewWasDragged = false;
      if (mapState.svg?.releasePointerCapture) {
        try {
          mapState.svg.releasePointerCapture(e.pointerId);
        } catch {
        }
      }
      cursorNeedsRefresh = true;
      setAreaInteracting(false);
      if (!wasDragged && (mapState.selectionIds.length || mapState.previewSelection)) {
        mapState.selectionIds = [];
        mapState.previewSelection = null;
        mapState.selectionPreviewSignature = "";
        updateSelectionHighlight();
      }
    }
    if (mapState.selectionRect && mapState.selectionRect.pointerId === e.pointerId) {
      finalizeSelectionDrag();
      stopAutoPan();
      setAreaInteracting(false);
      mapState.justCompletedSelection = true;
      if (mapState.svg?.releasePointerCapture) {
        try {
          mapState.svg.releasePointerCapture(e.pointerId);
        } catch {
        }
      }
    }
    if (cursorNeedsRefresh) {
      refreshCursor({ keepOverride: true });
    }
  }
  function buildCurvePatchFromHandles(handles = []) {
    const sanitized = Array.isArray(handles) ? handles.map((handle) => ({
      position: clampHandlePosition(handle.position),
      offset: clampHandleOffset(handle.offset)
    })).filter((handle) => Number.isFinite(handle.position) && Number.isFinite(handle.offset)) : [];
    if (!sanitized.length) {
      return {
        curveHandles: [],
        curve: 0,
        curveAnchor: DEFAULT_CURVE_ANCHOR
      };
    }
    let dominant = { position: DEFAULT_CURVE_ANCHOR, offset: 0 };
    sanitized.forEach((handle) => {
      if (Math.abs(handle.offset) > Math.abs(dominant.offset)) {
        dominant = handle;
      }
    });
    return {
      curveHandles: sanitized,
      curve: clampHandleOffset(dominant.offset),
      curveAnchor: clampHandlePosition(dominant.position)
    };
  }
  function queueEdgeUpdate(id, options = {}) {
    if (!id) return;
    if (!mapState.pendingEdgeUpdates) {
      mapState.pendingEdgeUpdates = /* @__PURE__ */ new Set();
    }
    mapState.pendingEdgeUpdates.add(String(id));
    const { immediate = false, animate = false } = options;
    if (animate) {
      if (!mapState.pendingEdgeAnimations) {
        mapState.pendingEdgeAnimations = /* @__PURE__ */ new Map();
      }
      mapState.pendingEdgeAnimations.set(String(id), true);
    }
    const needsImmediateFlush = immediate || typeof window === "undefined" || typeof window.requestAnimationFrame !== "function";
    if (needsImmediateFlush) {
      flushQueuedEdgeUpdates({ force: true });
      return;
    }
    if (mapState.edgeUpdateFrame) {
      return;
    }
    mapState.edgeUpdateFrame = window.requestAnimationFrame(() => {
      mapState.edgeUpdateFrame = null;
      flushQueuedEdgeUpdates();
    });
  }
  function flushQueuedEdgeUpdates({ force = false } = {}) {
    const pending2 = mapState.pendingEdgeUpdates;
    if (!pending2 || !pending2.size) return;
    if (mapState.edgeUpdateFrame && typeof window !== "undefined") {
      if (force && typeof window.cancelAnimationFrame === "function") {
        window.cancelAnimationFrame(mapState.edgeUpdateFrame);
        mapState.edgeUpdateFrame = null;
      } else if (!force) {
        return;
      }
    }
    const ids = Array.from(pending2);
    pending2.clear();
    mapState.edgeUpdateFrame = null;
    const animateMap = mapState.pendingEdgeAnimations;
    ids.forEach((id) => {
      const key = String(id);
      const shouldAnimate = Boolean(animateMap?.get(key));
      if (animateMap) {
        animateMap.delete(key);
      }
      updateEdgesFor(key, { animate: shouldAnimate });
    });
  }
  function scheduleNodePositionUpdate(id, pos, options = {}) {
    if (!id || !pos) return;
    const { immediate = false, animate = false } = options;
    mapState.positions[id] = pos;
    if (immediate) {
      if (mapState.pendingNodeUpdates && typeof mapState.pendingNodeUpdates.delete === "function") {
        mapState.pendingNodeUpdates.delete(id);
      }
      const entry = mapState.elements.get(id);
      let hadRegisteredEdges = false;
      if (entry) {
        updateNodeGeometry(id, entry);
        const registered = mapState.edgeRefs?.get(String(id));
        hadRegisteredEdges = Boolean(registered && registered.size);
        updateEdgesFor(id, { animate });
      }
      if (!hadRegisteredEdges) {
        queueEdgeUpdate(id, { immediate: true, animate });
      }
      return;
    }
    if (!mapState.pendingNodeUpdates) {
      mapState.pendingNodeUpdates = /* @__PURE__ */ new Map();
    }
    const existing = mapState.pendingNodeUpdates.get(id);
    const nextAnimate = animate || Boolean(existing?.animate);
    mapState.pendingNodeUpdates.set(id, { pos, animate: nextAnimate });
    queueEdgeUpdate(id, { animate: nextAnimate });
    if (typeof window === "undefined" || typeof window.requestAnimationFrame !== "function") {
      flushNodePositionUpdates();
      return;
    }
    if (mapState.nodeUpdateFrame) {
      return;
    }
    mapState.nodeUpdateFrame = window.requestAnimationFrame(() => {
      mapState.nodeUpdateFrame = null;
      flushNodePositionUpdates();
    });
  }
  function flushNodePositionUpdates({ cancelFrame = false } = {}) {
    if (cancelFrame && mapState.nodeUpdateFrame && typeof window !== "undefined" && typeof window.cancelAnimationFrame === "function") {
      window.cancelAnimationFrame(mapState.nodeUpdateFrame);
      mapState.nodeUpdateFrame = null;
    }
    const updates = mapState.pendingNodeUpdates;
    if (!updates || !updates.size) return;
    const touched = [];
    updates.forEach((value, id) => {
      const info = value && typeof value === "object" && Object.prototype.hasOwnProperty.call(value, "pos") ? value : { pos: value };
      const entry = mapState.elements.get(id);
      if (!entry) return;
      updateNodeGeometry(id, entry);
      touched.push({ id, animate: Boolean(info.animate) });
    });
    updates.clear();
    touched.forEach(({ id, animate }) => {
      updateEdgesFor(id, { animate });
    });
  }
  function getNow() {
    if (typeof performance !== "undefined" && typeof performance.now === "function") {
      return performance.now();
    }
    return Date.now();
  }
  function invalidateSvgRect() {
    mapState.svgRect = null;
    mapState.svgRectTime = 0;
  }
  function getSvgRect(options = {}) {
    const svg = mapState.svg;
    if (!svg) return null;
    const { force = false } = options;
    if (force) {
      mapState.svgRect = svg.getBoundingClientRect();
      mapState.svgRectTime = getNow();
      return mapState.svgRect;
    }
    const now = getNow();
    if (!mapState.svgRect || !mapState.svgRectTime || now - mapState.svgRectTime > 100) {
      mapState.svgRect = svg.getBoundingClientRect();
      mapState.svgRectTime = now;
    }
    return mapState.svgRect;
  }
  function constrainViewBox() {
    const viewBox = mapState.viewBox;
    if (!viewBox) return;
    const maxSize = mapState.sizeLimit || 0;
    if (maxSize > 0) {
      const maxX = Math.max(0, maxSize - viewBox.w);
      const maxY = Math.max(0, maxSize - viewBox.h);
      viewBox.x = clamp2(viewBox.x, 0, maxX);
      viewBox.y = clamp2(viewBox.y, 0, maxY);
    }
  }
  function clientToMap(clientX, clientY) {
    const viewBox = mapState.viewBox;
    if (!mapState.svg || !viewBox) return { x: 0, y: 0 };
    const rect = getSvgRect();
    if (!rect || !rect.width || !rect.height) {
      return { x: viewBox.x, y: viewBox.y };
    }
    const ratioX = (clientX - rect.left) / rect.width;
    const ratioY = (clientY - rect.top) / rect.height;
    return {
      x: viewBox.x + ratioX * viewBox.w,
      y: viewBox.y + ratioY * viewBox.h
    };
  }
  function getElementPosition(entry, id) {
    if (entry?.circle) {
      const cx = Number(entry.circle.getAttribute("cx"));
      const cy = Number(entry.circle.getAttribute("cy"));
      if (Number.isFinite(cx) && Number.isFinite(cy)) {
        return { x: cx, y: cy };
      }
    }
    return mapState.positions?.[id] || null;
  }
  function getElementRadius(entry, id) {
    if (entry?.circle) {
      const r = Number(entry.circle.getAttribute("r"));
      if (Number.isFinite(r) && r > 0) {
        return r;
      }
    }
    return getNodeRadius(id);
  }
  function collectNodesInRect(minX, maxX, minY, maxY) {
    const preview = [];
    const seen = /* @__PURE__ */ new Set();
    mapState.elements.forEach((entry, id) => {
      const pos = getElementPosition(entry, id);
      if (!pos) return;
      const radius = getElementRadius(entry, id);
      if (!Number.isFinite(radius) || radius < 0) return;
      const label = entry?.label || null;
      const labelHeight = label ? (Number(label.getAttribute("font-size")) || 16) * 0.7 : 0;
      const verticalRadius = radius + labelHeight + 10;
      const expandedRadius = radius + 6;
      const insideBox = pos.x >= minX && pos.x <= maxX && pos.y >= minY && pos.y <= maxY;
      const intersectsBox = !insideBox ? pos.x + expandedRadius >= minX && pos.x - expandedRadius <= maxX && pos.y + radius >= minY && pos.y - verticalRadius <= maxY : true;
      if (insideBox || intersectsBox) {
        if (!seen.has(id)) {
          preview.push(id);
          seen.add(id);
        }
      }
    });
    return preview;
  }
  function startSelectionDrag(pointerId, clientX, clientY) {
    const originClient = { x: clientX, y: clientY };
    const originMap = clientToMap(clientX, clientY);
    mapState.selectionRect = {
      pointerId,
      originClient,
      originMap,
      currentClient: { ...originClient },
      currentMap: { ...originMap },
      changed: false
    };
    if (mapState.selectionBox) {
      mapState.selectionBox.classList.remove("hidden");
    }
    mapState.previewSelection = [];
    mapState.selectionPreviewSignature = "";
    syncSelectionOverlay();
  }
  function updateSelectionDragPosition(clientX, clientY) {
    const rect = mapState.selectionRect;
    if (!rect) return;
    rect.currentClient = { x: clientX, y: clientY };
    rect.currentMap = clientToMap(clientX, clientY);
    syncSelectionOverlay();
  }
  function refreshSelectionMaps({ updateOrigin = false } = {}) {
    const rect = mapState.selectionRect;
    if (!rect) return;
    if (updateOrigin && rect.originClient) {
      rect.originMap = clientToMap(rect.originClient.x, rect.originClient.y);
    }
    if (rect.currentClient) {
      rect.currentMap = clientToMap(rect.currentClient.x, rect.currentClient.y);
    }
    syncSelectionOverlay();
  }
  function syncSelectionOverlay() {
    const rect = mapState.selectionRect;
    if (!rect || !mapState.selectionBox) return;
    const { originClient, currentClient, originMap, currentMap } = rect;
    if (!originClient || !currentClient) return;
    const svgRect = getSvgRect();
    if (!svgRect) return;
    const left = Math.min(originClient.x, currentClient.x) - svgRect.left;
    const top = Math.min(originClient.y, currentClient.y) - svgRect.top;
    const width = Math.abs(originClient.x - currentClient.x);
    const height = Math.abs(originClient.y - currentClient.y);
    mapState.selectionBox.style.left = `${left}px`;
    mapState.selectionBox.style.top = `${top}px`;
    mapState.selectionBox.style.width = `${width}px`;
    mapState.selectionBox.style.height = `${height}px`;
    rect.changed = width > 3 || height > 3;
    if (!originMap || !currentMap) return;
    const minX = Math.min(originMap.x, currentMap.x);
    const maxX = Math.max(originMap.x, currentMap.x);
    const minY = Math.min(originMap.y, currentMap.y);
    const maxY = Math.max(originMap.y, currentMap.y);
    const preview = collectNodesInRect(minX, maxX, minY, maxY);
    const signature = preview.length ? preview.slice().sort().join("|") : "";
    if (signature !== mapState.selectionPreviewSignature) {
      mapState.previewSelection = preview;
      mapState.selectionPreviewSignature = signature;
      updateSelectionHighlight();
    }
  }
  function finalizeSelectionDrag({ commit = true } = {}) {
    if (mapState.selectionBox) {
      mapState.selectionBox.classList.add("hidden");
      mapState.selectionBox.style.width = "0px";
      mapState.selectionBox.style.height = "0px";
    }
    const shouldCommit = commit !== false && (mapState.selectionRect?.changed || (mapState.previewSelection?.length ?? 0) > 0);
    if (shouldCommit) {
      const ids = mapState.previewSelection ? mapState.previewSelection.slice() : [];
      mapState.selectionIds = ids;
    }
    mapState.selectionRect = null;
    mapState.previewSelection = null;
    mapState.selectionPreviewSignature = "";
    updateSelectionHighlight();
  }
  function pickClusterPosition(existing = [], spacing = 200, base = { x: 0, y: 0 }, options = {}) {
    const baseX = Number.isFinite(base?.x) ? base.x : 0;
    const baseY = Number.isFinite(base?.y) ? base.y : 0;
    const minDistanceBase = Math.max(spacing * 0.82, spacing - 80);
    const buffer = Number.isFinite(options?.buffer) ? options.buffer : 0;
    const maxRadius = Number.isFinite(options?.maxRadius) ? options.maxRadius : 0;
    const targetDistance = Math.max(minDistanceBase + buffer, spacing * 0.75, maxRadius);
    for (let radius = 0; radius <= 6; radius += 1) {
      for (let dx = -radius; dx <= radius; dx += 1) {
        for (let dy = -radius; dy <= radius; dy += 1) {
          if (Math.max(Math.abs(dx), Math.abs(dy)) !== radius) continue;
          const candidate = {
            x: baseX + dx * spacing,
            y: baseY + dy * spacing
          };
          let collision = false;
          for (const pos of existing) {
            if (!pos) continue;
            const px = Number.isFinite(pos?.x) ? pos.x : 0;
            const py = Number.isFinite(pos?.y) ? pos.y : 0;
            const dist = Math.hypot(px - candidate.x, py - candidate.y);
            const existingSpacing = Number.isFinite(pos?.spacing) ? pos.spacing : spacing;
            const existingBuffer = Number.isFinite(pos?.buffer) ? pos.buffer : 0;
            const required = Math.max(targetDistance, (existingSpacing + spacing) * 0.5, existingBuffer);
            if (dist < required) {
              collision = true;
              break;
            }
          }
          if (!collision) {
            return candidate;
          }
        }
      }
    }
    return {
      x: baseX + (Math.random() - 0.5) * spacing,
      y: baseY + (Math.random() - 0.5) * spacing
    };
  }
  function updateAutoPanFromPointer(clientX, clientY, options = {}) {
    if (!mapState.svg) return;
    const { allowDuringDrag = false, force = false } = options;
    const dragging = allowDuringDrag && (mapState.nodeDrag || mapState.areaDrag);
    const shouldAutoPan = force || mapState.tool === TOOL.AREA || dragging;
    if (!shouldAutoPan) {
      stopAutoPan();
      return;
    }
    mapState.autoPanPointer = { x: clientX, y: clientY };
    const vector = computeAutoPanVector(clientX, clientY);
    if (vector) {
      startAutoPan(vector);
    } else {
      stopAutoPan();
    }
  }
  function computeAutoPanVector(clientX, clientY) {
    const rect = getSvgRect();
    if (!rect) return null;
    const threshold = 40;
    const baseSpeed = 25;
    let dx = 0;
    let dy = 0;
    const leftDist = clientX - rect.left;
    const rightDist = rect.right - clientX;
    const topDist = clientY - rect.top;
    const bottomDist = rect.bottom - clientY;
    if (leftDist < threshold) {
      const intensity = Math.min(1, Math.max(0, threshold - leftDist) / threshold);
      dx -= intensity * baseSpeed;
    } else if (rightDist < threshold) {
      const intensity = Math.min(1, Math.max(0, threshold - rightDist) / threshold);
      dx += intensity * baseSpeed;
    }
    if (topDist < threshold) {
      const intensity = Math.min(1, Math.max(0, threshold - topDist) / threshold);
      dy -= intensity * baseSpeed;
    } else if (bottomDist < threshold) {
      const intensity = Math.min(1, Math.max(0, threshold - bottomDist) / threshold);
      dy += intensity * baseSpeed;
    }
    if (dx || dy) {
      return { dx, dy };
    }
    return null;
  }
  function startAutoPan(vector) {
    if (!vector) return;
    mapState.autoPan = { dx: vector.dx, dy: vector.dy };
    applyAutoPan(mapState.autoPan);
    if (typeof window === "undefined") return;
    if (mapState.autoPanFrame) return;
    const step = () => {
      if (!mapState.autoPan) {
        mapState.autoPanFrame = null;
        return;
      }
      if (mapState.autoPanPointer) {
        const nextVector = computeAutoPanVector(mapState.autoPanPointer.x, mapState.autoPanPointer.y);
        if (!nextVector) {
          stopAutoPan();
          return;
        }
        mapState.autoPan.dx = nextVector.dx;
        mapState.autoPan.dy = nextVector.dy;
      }
      applyAutoPan(mapState.autoPan);
      mapState.autoPanFrame = window.requestAnimationFrame(step);
    };
    mapState.autoPanFrame = window.requestAnimationFrame(step);
  }
  function applyAutoPan(vector) {
    if (!mapState.svg || !mapState.viewBox || !mapState.updateViewBox) return;
    const rect = getSvgRect();
    if (!rect || !rect.width || !rect.height) return;
    const scaleX = mapState.viewBox.w / rect.width;
    const scaleY = mapState.viewBox.h / rect.height;
    mapState.viewBox.x += vector.dx * scaleX;
    mapState.viewBox.y += vector.dy * scaleY;
    constrainViewBox();
    mapState.updateViewBox({ immediate: true });
    if (mapState.selectionRect) {
      refreshSelectionMaps({ updateOrigin: true });
    }
    if (mapState.nodeDrag?.client) {
      const pointer = clientToMap(mapState.nodeDrag.client.x, mapState.nodeDrag.client.y);
      applyNodeDragFromPointer(pointer);
    }
    if (mapState.areaDrag?.client) {
      const pointer = clientToMap(mapState.areaDrag.client.x, mapState.areaDrag.client.y);
      const dx = pointer.x - mapState.areaDrag.start.x;
      const dy = pointer.y - mapState.areaDrag.start.y;
      mapState.areaDrag.moved = mapState.areaDrag.moved || Math.abs(dx) > 0.5 || Math.abs(dy) > 0.5;
      mapState.areaDrag.origin.forEach(({ id, pos }) => {
        const nx = pos.x + dx;
        const ny = pos.y + dy;
        scheduleNodePositionUpdate(id, { x: nx, y: ny }, { immediate: true, animate: true });
      });
      mapState.nodeWasDragged = true;
    }
  }
  function stopAutoPan() {
    mapState.autoPan = null;
    mapState.autoPanPointer = null;
    if (mapState.autoPanFrame && typeof window !== "undefined") {
      window.cancelAnimationFrame(mapState.autoPanFrame);
    }
    mapState.autoPanFrame = null;
  }
  function getCurrentScales() {
    return mapState.currentScales || { nodeScale: 1, labelScale: 1, lineScale: 1 };
  }
  function getLineThicknessValue(key) {
    return LINE_THICKNESS_VALUES[key] || LINE_THICKNESS_VALUES[DEFAULT_LINE_THICKNESS];
  }
  function normalizeLineStyle(style) {
    if (LINE_STYLE_VALUE_SET.has(style)) {
      return style;
    }
    if (style && LEGACY_STYLE_MAPPINGS[style]?.style && LINE_STYLE_VALUE_SET.has(LEGACY_STYLE_MAPPINGS[style].style)) {
      return LEGACY_STYLE_MAPPINGS[style].style;
    }
    return DEFAULT_LINE_STYLE;
  }
  function normalizeLineDecoration(decoration, styleHint) {
    if (LINE_DECORATION_VALUE_SET.has(decoration)) {
      return decoration;
    }
    if (styleHint && LEGACY_STYLE_MAPPINGS[styleHint]?.decoration) {
      const mapped = LEGACY_STYLE_MAPPINGS[styleHint].decoration;
      if (LINE_DECORATION_VALUE_SET.has(mapped)) {
        return mapped;
      }
    }
    return DEFAULT_LINE_DECORATION;
  }
  function normalizeDecorationDirection(direction, decoration, styleHint) {
    if (decoration === "none") {
      return DEFAULT_DECORATION_DIRECTION;
    }
    if (LINE_DIRECTION_VALUE_SET.has(direction)) {
      return direction;
    }
    if (styleHint && LEGACY_STYLE_MAPPINGS[styleHint]?.decorationDirection) {
      const mapped = LEGACY_STYLE_MAPPINGS[styleHint].decorationDirection;
      if (LINE_DIRECTION_VALUE_SET.has(mapped)) {
        return mapped;
      }
    }
    return DEFAULT_DECORATION_DIRECTION;
  }
  function normalizeLineGlow(glow, styleHint) {
    if (typeof glow === "string") {
      if (glow === "true" || glow === "1") return true;
      if (glow === "false" || glow === "0") return false;
    }
    if (typeof glow === "number") {
      return glow !== 0;
    }
    if (typeof glow === "boolean") {
      return glow;
    }
    if (styleHint && LEGACY_STYLE_MAPPINGS[styleHint]?.glow) {
      return true;
    }
    return DEFAULT_LINE_GLOW;
  }
  function normalizeLinkAppearance(info = {}) {
    const styleHint = info.style ?? info.linkStyle;
    const style = normalizeLineStyle(styleHint);
    const decoration = normalizeLineDecoration(info.decoration, styleHint);
    const decorationDirection = normalizeDecorationDirection(
      info.decorationDirection,
      decoration,
      styleHint
    );
    const glow = normalizeLineGlow(info.glow, styleHint);
    return { style, decoration, decorationDirection, glow };
  }
  function getLineTypePreset(value) {
    return LINE_TYPE_PRESET_LOOKUP.get(value) || LINE_TYPE_PRESET_LOOKUP.get("line");
  }
  function inferLineTypePreset(style, decoration) {
    const normalizedStyle = normalizeLineStyle(style);
    const normalizedDecoration = normalizeLineDecoration(decoration, style);
    for (const option of LINE_TYPE_PRESETS) {
      if (option.style === normalizedStyle && option.decoration === normalizedDecoration) {
        return option.value;
      }
    }
    if (normalizedDecoration === "block") {
      return "blocked";
    }
    if (normalizedStyle === "dashed") {
      return "dashed";
    }
    if (normalizedStyle === "dotted") {
      return "dotted";
    }
    return "line";
  }
  function isDirectionalPreset(preset) {
    return Boolean(preset && preset.directional);
  }
  function flipDecorationDirection(direction) {
    if (direction === "start") return "end";
    if (direction === "end") return "start";
    return direction || DEFAULT_DECORATION_DIRECTION;
  }
  function updateNodeGeometry(id, entry = mapState.elements.get(id)) {
    if (!entry) return;
    const { circle, label } = entry;
    const pos = mapState.positions[id];
    if (!circle || !pos) return;
    const baseR = Number(circle.dataset.radius) || 20;
    const scales = getCurrentScales();
    const nodeScale = scales.nodeScale || 1;
    const labelScale = scales.labelScale || 1;
    circle.setAttribute("cx", pos.x);
    circle.setAttribute("cy", pos.y);
    circle.setAttribute("r", baseR * nodeScale);
    if (label) {
      label.setAttribute("x", pos.x);
      const offset = (baseR + 12) * nodeScale;
      label.setAttribute("y", pos.y - offset);
      const fontSize = Math.max(14, 16 * labelScale);
      label.setAttribute("font-size", fontSize);
    }
  }
  function updateSelectionHighlight() {
    const ids = mapState.previewSelection || mapState.selectionIds;
    const set = new Set(ids);
    mapState.elements.forEach(({ circle, label }, id) => {
      if (set.has(id)) {
        circle.classList.add("selected");
        label.classList.add("selected");
      } else {
        circle.classList.remove("selected");
        label.classList.remove("selected");
      }
    });
  }
  var EDGE_NODE_KEY = Symbol("edgeNodes");
  function ensureEdgeRegistry() {
    if (!mapState.edgeRefs) {
      mapState.edgeRefs = /* @__PURE__ */ new Map();
    }
    if (!mapState.allEdges) {
      mapState.allEdges = /* @__PURE__ */ new Set();
    }
  }
  function registerEdgeElement(edge, aId, bId) {
    if (!edge) return;
    ensureEdgeRegistry();
    mapState.allEdges.add(edge);
    const keyA = String(aId);
    const keyB = String(bId);
    edge[EDGE_NODE_KEY] = { aId: keyA, bId: keyB };
    [keyA, keyB].forEach((id) => {
      if (!id) return;
      let set = mapState.edgeRefs.get(id);
      if (!set) {
        set = /* @__PURE__ */ new Set();
        mapState.edgeRefs.set(id, set);
      }
      set.add(edge);
    });
  }
  function unregisterEdgeElement(edge) {
    if (!edge) return;
    const info = edge[EDGE_NODE_KEY];
    if (info) {
      [info.aId, info.bId].forEach((id) => {
        const key = String(id);
        const set = mapState.edgeRefs?.get(key);
        if (!set) return;
        set.delete(edge);
        if (!set.size) {
          mapState.edgeRefs.delete(key);
        }
      });
      delete edge[EDGE_NODE_KEY];
    }
    if (mapState.allEdges) {
      mapState.allEdges.delete(edge);
    }
  }
  function getLinkInfo(aId, bId) {
    if (!mapState.itemMap) return null;
    const key = String(aId);
    const source = mapState.itemMap[key] || mapState.itemMap[aId];
    if (!source || !Array.isArray(source.links)) return null;
    const otherKey = String(bId);
    return source.links.find((link) => String(link?.id) === otherKey) || null;
  }
  function integrateItemUpdates(...items) {
    if (!items || !items.length) return;
    items.forEach((item) => {
      if (!item || !item.id) return;
      if (!mapState.itemMap) {
        mapState.itemMap = {};
      }
      mapState.itemMap[item.id] = item;
      if (Array.isArray(mapState.visibleItems)) {
        const idx = mapState.visibleItems.findIndex((it) => it && it.id === item.id);
        if (idx >= 0) {
          mapState.visibleItems[idx] = item;
        }
      }
    });
  }
  function getEdgeElement(aId, bId) {
    ensureEdgeRegistry();
    const keyA = String(aId);
    const keyB = String(bId);
    const set = mapState.edgeRefs?.get(keyA);
    if (set) {
      for (const edge of set) {
        if (!edge?.dataset) continue;
        const da = String(edge.dataset.a);
        const db = String(edge.dataset.b);
        if (da === keyA && db === keyB || da === keyB && db === keyA) {
          return edge;
        }
      }
    }
    if (mapState.allEdges) {
      for (const edge of mapState.allEdges) {
        if (!edge?.dataset) continue;
        const da = String(edge.dataset.a);
        const db = String(edge.dataset.b);
        if (da === keyA && db === keyB || da === keyB && db === keyA) {
          return edge;
        }
      }
    }
    return null;
  }
  function beginEdgeHandleDrag(line, handleIndex, evt, options = {}) {
    if (!line || !line.dataset) return;
    const aId = line.dataset.a;
    const bId = line.dataset.b;
    if (!aId || !bId) return;
    const pointerId = evt.pointerId;
    const geometry = options.geometry || getLineGeometry(aId, bId, { line });
    if (!geometry) return;
    const pointer = options.pointer || clientToMap(evt.clientX, evt.clientY);
    const prepared = prepareHandlesForDrag(geometry, pointer, handleIndex, {
      forceCreate: options.trigger === "line"
    });
    const handles = prepared.handles.map((handle) => {
      const weight = handle.weight ?? getHandleWeight(handle.position);
      return {
        position: handle.position,
        offset: handle.offset,
        weight,
        startOffset: handle.offset,
        startPosition: handle.position
      };
    });
    if (!handles.length) return;
    const index = clamp2(prepared.index, 0, handles.length - 1);
    const createdIndex = Number.isInteger(prepared.createdIndex) ? prepared.createdIndex : -1;
    const insertedHandle = Number.isFinite(prepared.originalLength) ? handles.length > prepared.originalLength : createdIndex >= 0;
    const createdHandle = insertedHandle ? handles[index] : null;
    const captureTarget = evt.currentTarget || line;
    const baseLength = geometry.trimmedLength || Math.hypot(geometry.endX - geometry.startX, geometry.endY - geometry.startY) || 1;
    mapState.edgeDrag = {
      pointerId,
      line,
      aId,
      bId,
      captureTarget,
      handleIndex: index,
      handles,
      base: {
        startX: geometry.startX,
        startY: geometry.startY,
        endX: geometry.endX,
        endY: geometry.endY,
        ux: geometry.ux,
        uy: geometry.uy,
        trimmedLength: baseLength
      },
      offsetChanged: false,
      hasDragged: false,
      geometry,
      fromHandle: Boolean(evt?.target && evt.target !== line),
      clientStart: { x: evt.clientX, y: evt.clientY },
      createdIndex,
      createdHandle,
      insertedHandle,
      trigger: options.trigger || "handle",
      activatedByHold: options.activatedByHold === true
    };
    setLineHandlesVisible(line, true, { force: true, sticky: true });
    if (mapState.edgeDrag.captureTarget?.setPointerCapture) {
      try {
        mapState.edgeDrag.captureTarget.setPointerCapture(pointerId);
      } catch {
      }
    }
  }
  function clearEdgePressTimer(press) {
    if (!press) return;
    if (press.holdTimer) {
      clearTimeout(press.holdTimer);
      press.holdTimer = null;
    }
  }
  function resetEdgePress() {
    if (mapState.edgePress) {
      clearEdgePressTimer(mapState.edgePress);
    }
    mapState.edgePress = null;
  }
  function activateEdgePress(press, pointer, options = {}) {
    if (!press || press.activated) return;
    clearEdgePressTimer(press);
    press.activated = true;
    const line = press.line;
    const aId = press.aId;
    const bId = press.bId;
    if (!line || !aId || !bId) {
      resetEdgePress();
      return;
    }
    const geometry = getLineGeometry(aId, bId, { line });
    if (!geometry) {
      resetEdgePress();
      return;
    }
    const evt = press.originalEvent || press.event;
    if (!evt) {
      resetEdgePress();
      return;
    }
    const pointerMeta = pointer || press.pointerStart || clientToMap(evt.clientX, evt.clientY);
    beginEdgeHandleDrag(line, press.type === "handle" ? press.handleIndex : press.handleIndex ?? 0, evt, {
      geometry,
      pointer: pointerMeta,
      trigger: press.type,
      activatedByHold: options.fromHold === true || options.fromTimer === true
    });
    mapState.edgePress = null;
  }
  function startLinePress(line, aId, bId, evt) {
    resetEdgePress();
    const pointer = clientToMap(evt.clientX, evt.clientY);
    const press = {
      type: "line",
      pointerId: evt.pointerId,
      line,
      aId,
      bId,
      event: evt,
      originalEvent: evt,
      pointerStart: pointer,
      startClient: { x: evt.clientX, y: evt.clientY },
      holdTimer: null,
      activated: false,
      handleIndex: 0
    };
    if (typeof window !== "undefined") {
      press.holdTimer = window.setTimeout(() => {
        activateEdgePress(press, press.pointerStart, { fromTimer: true, fromHold: true });
      }, EDGE_DRAG_HOLD_DELAY);
    }
    mapState.edgePress = press;
  }
  function startHandlePress(line, handleIndex, evt) {
    resetEdgePress();
    const pointer = clientToMap(evt.clientX, evt.clientY);
    const press = {
      type: "handle",
      pointerId: evt.pointerId,
      line,
      aId: line?.dataset?.a,
      bId: line?.dataset?.b,
      handleIndex,
      event: evt,
      originalEvent: evt,
      pointerStart: pointer,
      startClient: { x: evt.clientX, y: evt.clientY },
      holdTimer: null,
      activated: false,
      handleElement: evt.currentTarget || null,
      hoveredAtPress: Boolean(
        evt.currentTarget?.classList?.contains("is-hovered") || evt.currentTarget?.parentNode?.classList?.contains("is-hovered")
      )
    };
    if (typeof window !== "undefined") {
      press.holdTimer = window.setTimeout(() => {
        activateEdgePress(press, press.pointerStart, { fromTimer: true, fromHold: true });
      }, EDGE_DRAG_HOLD_DELAY);
    }
    mapState.edgePress = press;
  }
  async function removeHandleAt(line, handleIndex) {
    if (!line || !line.dataset) return;
    const aId = line.dataset.a;
    const bId = line.dataset.b;
    if (!aId || !bId) return;
    const handles = parseCurveHandles(line.dataset.handles) || [];
    if (handleIndex < 0 || handleIndex >= handles.length) return;
    const nextHandles = handles.filter((_, idx) => idx !== handleIndex);
    const patch = buildCurvePatchFromHandles(nextHandles);
    await updateLink(aId, bId, patch);
    applyLineStyle(line, patch);
    applyLinkPatchToState(aId, bId, patch);
    mapState.edgeDragJustCompleted = true;
    setTimeout(() => {
      mapState.edgeDragJustCompleted = false;
    }, 0);
  }
  async function straightenLine(line) {
    if (!line || !line.dataset) return;
    const aId = line.dataset.a;
    const bId = line.dataset.b;
    if (!aId || !bId) return;
    const patch = buildCurvePatchFromHandles([]);
    await updateLink(aId, bId, patch);
    applyLineStyle(line, patch);
    applyLinkPatchToState(aId, bId, patch);
    mapState.edgeDragJustCompleted = true;
    setTimeout(() => {
      mapState.edgeDragJustCompleted = false;
    }, 0);
  }
  function attachEdgeInteraction(path, aId, bId) {
    if (!path || path.dataset.interactive === "1") return;
    path.dataset.interactive = "1";
    path.addEventListener("pointerdown", (evt) => {
      if (evt.button !== 0) return;
      if (mapState.tool !== TOOL.NAVIGATE) return;
      mapState.suppressNextClick = false;
      evt.stopPropagation();
      if (typeof evt.preventDefault === "function") {
        evt.preventDefault();
      }
      startLinePress(path, aId, bId, evt);
    });
    path.addEventListener("click", (e) => {
      e.stopPropagation();
      handleEdgeClick(path, aId, bId, e);
    });
    path.addEventListener("mouseenter", (evt) => {
      if (mapState.tool === TOOL.HIDE) {
        applyCursorOverride("hide");
      } else if (mapState.tool === TOOL.BREAK) {
        applyCursorOverride("break");
      }
      const geometry = getLineGeometry(aId, bId, { line: path });
      showLineHandles(path, geometry);
      showEdgeTooltip(path, evt);
      applyLineHover(path);
    });
    path.addEventListener("mouseleave", () => {
      if (mapState.tool === TOOL.HIDE) {
        clearCursorOverride("hide");
      }
      if (mapState.tool === TOOL.BREAK) {
        clearCursorOverride("break");
      }
      hideLineHandles(path);
      hideEdgeTooltip(path);
      clearLineHover(path);
    });
    path.addEventListener("mousemove", (evt) => moveEdgeTooltip(path, evt));
  }
  function ensureEdgeBetween(aId, bId, linkInfo = {}) {
    if (!mapState.positions?.[aId] || !mapState.positions?.[bId]) {
      return null;
    }
    const info = linkInfo || {};
    if (info.hidden) {
      removeEdgeBetween(aId, bId);
      return null;
    }
    let path = getEdgeElement(aId, bId);
    if (!path) {
      const container = mapState.edgeLayer || mapState.g || mapState.svg;
      if (!container) return null;
      path = document.createElementNS("http://www.w3.org/2000/svg", "path");
      path.setAttribute("fill", "none");
      path.setAttribute("class", "map-edge");
      path.setAttribute("vector-effect", "non-scaling-stroke");
      path.dataset.a = String(aId);
      path.dataset.b = String(bId);
      container.appendChild(path);
      registerEdgeElement(path, String(aId), String(bId));
      attachEdgeInteraction(path, String(aId), String(bId));
    }
    path.dataset.label = info.name || "";
    applyLineStyle(path, info);
    return path;
  }
  function removeEdgeBetween(aId, bId) {
    const edge = getEdgeElement(aId, bId);
    if (!edge) return;
    hideEdgeTooltip(edge);
    clearLineHover(edge, { force: true });
    removeLineOverlay(edge);
    removeLineHandles(edge);
    removeLineGap(edge);
    removeEdgeAnimation(edge);
    unregisterEdgeElement(edge);
    edge.remove();
  }
  function applyLinkVisibility(aId, bId, info = {}) {
    if (info.hidden) {
      removeEdgeBetween(aId, bId);
      return null;
    }
    return ensureEdgeBetween(aId, bId, info);
  }
  function normalizeLinkEntry(targetId, info = {}) {
    const appearance = normalizeLinkAppearance({
      style: info.style ?? info.linkStyle ?? DEFAULT_LINE_STYLE,
      decoration: info.decoration,
      decorationDirection: info.decorationDirection ?? info.direction,
      glow: info.glow
    });
    const entry = {
      id: targetId,
      style: appearance.style,
      decoration: appearance.decoration,
      decorationDirection: appearance.decorationDirection,
      glow: Boolean(appearance.glow),
      thickness: info.thickness || DEFAULT_LINE_THICKNESS,
      color: info.color || DEFAULT_LINK_COLOR,
      name: typeof info.name === "string" ? info.name : "",
      hidden: Boolean(info.hidden)
    };
    if (Object.prototype.hasOwnProperty.call(info, "curve")) {
      const curve = Number(info.curve);
      if (Number.isFinite(curve)) entry.curve = curve;
    }
    if (Object.prototype.hasOwnProperty.call(info, "curveAnchor")) {
      const anchor = normalizeAnchorValue(info.curveAnchor);
      if (Number.isFinite(anchor)) entry.curveAnchor = anchor;
    }
    const handles = parseCurveHandles(
      info.curveHandles ?? info.curvePoints ?? info.curveOffsets ?? info.handles
    );
    if (handles && handles.length) {
      entry.curveHandles = handles.map((handle) => ({
        position: clampHandlePosition(handle.position),
        offset: clampHandleOffset(handle.offset)
      }));
    }
    return entry;
  }
  function updatePendingHighlight() {
    mapState.elements.forEach(({ circle, label }, id) => {
      if (mapState.pendingLink === id) {
        circle.classList.add("pending");
        label.classList.add("pending");
      } else {
        circle.classList.remove("pending");
        label.classList.remove("pending");
      }
    });
  }
  function edgeAnimationAllowed() {
    if (typeof window === "undefined" || typeof document === "undefined") {
      return false;
    }
    if (mapState.prefersReducedMotion == null && typeof window.matchMedia === "function") {
      try {
        const query = window.matchMedia("(prefers-reduced-motion: reduce)");
        mapState.prefersReducedMotion = query.matches;
        if (!mapState.motionMedia) {
          const listener = (event) => {
            mapState.prefersReducedMotion = event.matches;
          };
          if (typeof query.addEventListener === "function") {
            query.addEventListener("change", listener);
          } else if (typeof query.addListener === "function") {
            query.addListener(listener);
          }
          mapState.motionMedia = { query, listener };
        }
      } catch {
        mapState.prefersReducedMotion = false;
      }
    }
    return !mapState.prefersReducedMotion;
  }
  function removeEdgeAnimation(line) {
    const animation = line?._pathAnimation;
    if (!animation) return;
    if (animation._timer && typeof window !== "undefined") {
      window.clearTimeout(animation._timer);
    }
    try {
      animation.remove();
    } catch {
    }
    if (line) {
      line._pathAnimation = null;
    }
  }
  function animatePathTransition(line, from, to, options = {}) {
    if (!line || !from || !to || from === to) return;
    if (!edgeAnimationAllowed()) return;
    if (typeof document === "undefined") return;
    const duration = Math.max(16, Number(options.duration) || EDGE_ANIMATION_DURATION);
    const animateEl = document.createElementNS("http://www.w3.org/2000/svg", "animate");
    animateEl.setAttribute("attributeName", "d");
    animateEl.setAttribute("from", from);
    animateEl.setAttribute("to", to);
    animateEl.setAttribute("dur", `${duration}ms`);
    animateEl.setAttribute("fill", "freeze");
    animateEl.setAttribute("repeatCount", "1");
    animateEl.setAttribute("calcMode", "linear");
    const cleanup = () => {
      if (typeof window !== "undefined" && animateEl._timer) {
        window.clearTimeout(animateEl._timer);
      }
      if (animateEl.parentNode === line) {
        animateEl.remove();
      }
      if (line._pathAnimation === animateEl) {
        line._pathAnimation = null;
      }
    };
    animateEl.addEventListener("endEvent", cleanup);
    animateEl.addEventListener("repeatEvent", cleanup);
    removeEdgeAnimation(line);
    line._pathAnimation = animateEl;
    line.appendChild(animateEl);
    if (typeof window !== "undefined") {
      animateEl._timer = window.setTimeout(cleanup, duration + 40);
    }
    if (typeof animateEl.beginElement === "function") {
      try {
        animateEl.beginElement();
      } catch {
      }
    }
  }
  function refreshEdgeGeometry(line, options = {}) {
    if (!line) return;
    const aId = line.dataset?.a;
    const bId = line.dataset?.b;
    if (!aId || !bId) return;
    const geometry = options.geometry || getLineGeometry(aId, bId, { line });
    if (geometry?.pathData) {
      const previousPath = line.getAttribute("d") || "";
      line.setAttribute("d", geometry.pathData);
      if (options.animate && previousPath && previousPath !== geometry.pathData) {
        animatePathTransition(line, previousPath, geometry.pathData, options);
      } else {
        removeEdgeAnimation(line);
      }
      line._geometry = geometry;
      syncLineHandles(line, geometry);
      updateLineStrokeWidth(line);
    } else {
      removeEdgeAnimation(line);
      removeLineHandles(line);
    }
    syncLineDecoration(line, geometry);
  }
  function updateEdgesFor(id, options = {}) {
    ensureEdgeRegistry();
    if (!mapState.edgeRefs) return;
    const key = String(id);
    let edges = mapState.edgeRefs.get(key);
    let list = edges && edges.size ? Array.from(edges) : [];
    if (!list.length && mapState.allEdges && mapState.allEdges.size) {
      list = Array.from(mapState.allEdges).filter((edge) => {
        const da = edge?.dataset?.a;
        const db = edge?.dataset?.b;
        return da === key || db === key;
      });
    }
    if (!list.length) return;
    const stale = [];
    list.forEach((edge) => {
      if (!edge || !edge.isConnected || !edge.ownerSVGElement) {
        stale.push(edge);
        return;
      }
      refreshEdgeGeometry(edge, options);
    });
    if (stale.length) {
      stale.forEach((edge) => {
        unregisterEdgeElement(edge);
      });
    }
  }
  function buildToolbox(container, hiddenNodeCount, hiddenLinkCount) {
    const tools = [
      { id: TOOL.NAVIGATE, icon: "\u{1F9ED}", label: "Navigate" },
      { id: TOOL.HIDE, icon: "\u{1FA84}", label: "Hide" },
      { id: TOOL.BREAK, icon: "\u2702\uFE0F", label: "Break link" },
      { id: TOOL.ADD_LINK, icon: "\u{1F517}", label: "Add link" },
      { id: TOOL.AREA, icon: "\u{1F4E6}", label: "Select area" }
    ];
    const box = document.createElement("div");
    box.className = "map-toolbox";
    box.style.left = `${mapState.toolboxPos.x}px`;
    box.style.top = `${mapState.toolboxPos.y}px`;
    mapState.toolboxEl = box;
    mapState.toolboxContainer = container;
    box.addEventListener("mousedown", (event) => {
      if (event.button !== 0) return;
      if (event.target.closest(".map-tool") || event.target.closest(".map-toolbox-drag")) return;
      startToolboxDrag(event);
    });
    const handle = document.createElement("button");
    handle.type = "button";
    handle.className = "map-toolbox-drag";
    handle.setAttribute("aria-label", "Drag toolbar");
    handle.innerHTML = "<span>\u22EE</span>";
    handle.addEventListener("mousedown", startToolboxDrag);
    box.appendChild(handle);
    const list = document.createElement("div");
    list.className = "map-tool-list";
    tools.forEach((tool) => {
      const btn = document.createElement("button");
      btn.type = "button";
      btn.className = "map-tool" + (mapState.tool === tool.id ? " active" : "");
      btn.textContent = tool.icon;
      btn.title = tool.label;
      btn.addEventListener("click", () => {
        if (mapState.tool !== tool.id) {
          mapState.tool = tool.id;
          if (tool.id !== TOOL.AREA) {
            mapState.selectionIds = [];
            mapState.previewSelection = null;
            mapState.selectionPreviewSignature = "";
          }
          if (tool.id !== TOOL.ADD_LINK) {
            mapState.pendingLink = null;
          }
          if (tool.id === TOOL.HIDE) {
            mapState.hiddenMenuTab = mapState.hiddenMenuTab === "links" ? "links" : "nodes";
            mapState.panelVisible = true;
          }
          mapState.cursorOverride = null;
          renderMap(mapState.root);
        }
      });
      list.appendChild(btn);
    });
    box.appendChild(list);
    const badges = document.createElement("div");
    badges.className = "map-tool-badges";
    const nodeBadge = document.createElement("span");
    nodeBadge.className = "map-tool-badge";
    nodeBadge.setAttribute("title", `${hiddenNodeCount} hidden node${hiddenNodeCount === 1 ? "" : "s"}`);
    const nodeIcon = document.createElement("span");
    nodeIcon.textContent = "\u{1F648}";
    const nodeCountEl = document.createElement("strong");
    nodeCountEl.textContent = hiddenNodeCount;
    nodeBadge.append(nodeIcon, nodeCountEl);
    badges.appendChild(nodeBadge);
    const linkBadge = document.createElement("span");
    linkBadge.className = "map-tool-badge";
    linkBadge.setAttribute("title", `${hiddenLinkCount} hidden link${hiddenLinkCount === 1 ? "" : "s"}`);
    const linkIcon = document.createElement("span");
    linkIcon.textContent = "\u{1F578}\uFE0F";
    const linkCountEl = document.createElement("strong");
    linkCountEl.textContent = hiddenLinkCount;
    linkBadge.append(linkIcon, linkCountEl);
    badges.appendChild(linkBadge);
    box.appendChild(badges);
    container.appendChild(box);
    ensureToolboxWithinBounds();
    mapState.toolboxBadges = {
      nodeBadge,
      linkBadge,
      nodeCountEl,
      linkCountEl
    };
  }
  function computeHiddenNodeCount() {
    if (!mapState.itemMap) return 0;
    return Object.values(mapState.itemMap).reduce((total, item) => total + (item?.mapHidden ? 1 : 0), 0);
  }
  function computeHiddenLinkCount() {
    if (!mapState.itemMap) return 0;
    const seen = /* @__PURE__ */ new Set();
    let count = 0;
    Object.values(mapState.itemMap).forEach((item) => {
      const id = item?.id;
      if (!id) return;
      (item.links || []).forEach((link) => {
        if (!link?.hidden) return;
        const otherId = link.id;
        if (!otherId) return;
        const key = id < otherId ? `${id}|${otherId}` : `${otherId}|${id}`;
        if (seen.has(key)) return;
        seen.add(key);
        count += 1;
      });
    });
    return count;
  }
  function refreshToolboxBadges() {
    const badges = mapState.toolboxBadges;
    if (!badges) return;
    const hiddenNodeCount = computeHiddenNodeCount();
    const hiddenLinkCount = computeHiddenLinkCount();
    if (badges.nodeCountEl) {
      badges.nodeCountEl.textContent = hiddenNodeCount;
    }
    if (badges.linkCountEl) {
      badges.linkCountEl.textContent = hiddenLinkCount;
    }
    if (badges.nodeBadge) {
      badges.nodeBadge.setAttribute("title", `${hiddenNodeCount} hidden node${hiddenNodeCount === 1 ? "" : "s"}`);
    }
    if (badges.linkBadge) {
      badges.linkBadge.setAttribute("title", `${hiddenLinkCount} hidden link${hiddenLinkCount === 1 ? "" : "s"}`);
    }
  }
  function buildHiddenPanel(container, hiddenNodes, hiddenLinks) {
    const allowPanel = mapState.tool === TOOL.HIDE;
    const panel = document.createElement("div");
    panel.className = "map-hidden-panel";
    if (!(allowPanel && mapState.panelVisible)) {
      panel.classList.add("hidden");
    }
    const header = document.createElement("div");
    header.className = "map-hidden-header";
    const tabs2 = document.createElement("div");
    tabs2.className = "map-hidden-tabs";
    const nodeTab = document.createElement("button");
    nodeTab.type = "button";
    nodeTab.textContent = `Nodes (${hiddenNodes.length})`;
    nodeTab.className = mapState.hiddenMenuTab === "nodes" ? "active" : "";
    nodeTab.addEventListener("click", () => {
      mapState.hiddenMenuTab = "nodes";
      renderMap(mapState.root);
    });
    tabs2.appendChild(nodeTab);
    const linkTab = document.createElement("button");
    linkTab.type = "button";
    linkTab.textContent = `Links (${hiddenLinks.length})`;
    linkTab.className = mapState.hiddenMenuTab === "links" ? "active" : "";
    linkTab.addEventListener("click", () => {
      mapState.hiddenMenuTab = "links";
      renderMap(mapState.root);
    });
    tabs2.appendChild(linkTab);
    header.appendChild(tabs2);
    const closeBtn = document.createElement("button");
    closeBtn.type = "button";
    closeBtn.className = "map-hidden-close";
    closeBtn.textContent = mapState.panelVisible ? "Hide" : "Show";
    closeBtn.addEventListener("click", () => {
      mapState.panelVisible = !mapState.panelVisible;
      renderMap(mapState.root);
    });
    header.appendChild(closeBtn);
    panel.appendChild(header);
    const body = document.createElement("div");
    body.className = "map-hidden-body";
    if (mapState.hiddenMenuTab === "nodes") {
      const list = document.createElement("div");
      list.className = "map-hidden-list";
      if (hiddenNodes.length === 0) {
        const empty = document.createElement("div");
        empty.className = "map-hidden-empty";
        empty.textContent = "No hidden nodes.";
        list.appendChild(empty);
      } else {
        hiddenNodes.slice().sort((a, b) => titleOf4(a).localeCompare(titleOf4(b))).forEach((it) => {
          const item = document.createElement("div");
          item.className = "map-hidden-item";
          item.classList.add("draggable");
          item.textContent = titleOf4(it) || it.id;
          item.addEventListener("mousedown", (e) => {
            if (mapState.tool !== TOOL.HIDE) return;
            startMenuDrag(it, e, { source: "hidden" });
          });
          list.appendChild(item);
        });
      }
      body.appendChild(list);
    } else {
      const list = document.createElement("div");
      list.className = "map-hidden-list";
      if (hiddenLinks.length === 0) {
        const empty = document.createElement("div");
        empty.className = "map-hidden-empty";
        empty.textContent = "No hidden links.";
        list.appendChild(empty);
      } else {
        hiddenLinks.forEach((link) => {
          const item = document.createElement("div");
          item.className = "map-hidden-item";
          const label = document.createElement("span");
          label.textContent = `${titleOf4(link.a)} \u2194 ${titleOf4(link.b)}`;
          item.appendChild(label);
          const btn = document.createElement("button");
          btn.type = "button";
          btn.textContent = "Unhide";
          btn.addEventListener("click", () => {
            applyLocalLinkHidden(link.a.id, link.b.id, false);
            const forward = getLinkInfo(link.a.id, link.b.id);
            if (forward) {
              forward.hidden = false;
              applyLinkVisibility(link.a.id, link.b.id, forward);
            }
            item.remove();
            refreshToolboxBadges();
            setLinkHidden(link.a.id, link.b.id, false).then((result) => {
              if (result) {
                integrateItemUpdates(result.source, result.target);
              } else {
                return renderMap(mapState.root);
              }
              return null;
            }).catch((err) => {
              console.error(err);
            });
          });
          item.appendChild(btn);
          list.appendChild(item);
        });
      }
      body.appendChild(list);
    }
    panel.appendChild(body);
    container.appendChild(panel);
    if (allowPanel && !mapState.panelVisible) {
      const toggle = document.createElement("button");
      toggle.type = "button";
      toggle.className = "map-hidden-toggle";
      toggle.textContent = "Show menu";
      toggle.addEventListener("click", () => {
        mapState.panelVisible = true;
        renderMap(mapState.root);
      });
      container.appendChild(toggle);
    }
  }
  function startMenuDrag(item, event, options = {}) {
    event.preventDefault();
    const ghost = document.createElement("div");
    ghost.className = "map-drag-ghost";
    ghost.textContent = titleOf4(item) || item.id;
    document.body.appendChild(ghost);
    mapState.menuDrag = {
      id: item.id,
      ghost,
      source: options.source || "hidden",
      tabId: options.tabId || (getActiveTab()?.id || null)
    };
    updateMenuDragPosition(event.clientX, event.clientY);
  }
  async function finishMenuDrag(clientX, clientY) {
    const drag = mapState.menuDrag;
    mapState.menuDrag = null;
    if (drag?.ghost) drag.ghost.remove();
    if (!drag || !mapState.svg) return;
    const rect = getSvgRect({ force: true });
    if (!rect) return;
    if (clientX < rect.left || clientX > rect.right || clientY < rect.top || clientY > rect.bottom) {
      return;
    }
    const { x, y } = clientToMap(clientX, clientY);
    const item = await getItem(drag.id);
    if (!item) return;
    if (drag.source === "palette") {
      const tab2 = getActiveTab();
      if (!tab2 || !tab2.manualMode) return;
      if (drag.tabId && tab2.id !== drag.tabId) return;
      if (!Array.isArray(tab2.manualIds)) {
        tab2.manualIds = [];
      }
      let shouldPersist = false;
      if (!tab2.manualIds.includes(item.id)) {
        tab2.manualIds.push(item.id);
        shouldPersist = true;
      }
      item.mapHidden = false;
      await upsertItem(item);
      const layout = ensureTabLayout(tab2);
      const prev = layout[item.id];
      layout[item.id] = { x, y };
      if (!prev || prev.x !== x || prev.y !== y) {
        shouldPersist = true;
      }
      if (shouldPersist) {
        await persistMapConfig();
      }
      await renderMap(mapState.root);
      return;
    }
    item.mapHidden = false;
    await upsertItem(item);
    const tab = getActiveTab();
    if (tab) {
      const layout = ensureTabLayout(tab);
      const prev = layout[item.id];
      layout[item.id] = { x, y };
      if (!prev || prev.x !== x || prev.y !== y) {
        await persistMapConfig();
      }
    }
    await renderMap(mapState.root);
  }
  function updateMenuDragPosition(clientX, clientY) {
    if (!mapState.menuDrag?.ghost) return;
    mapState.menuDrag.ghost.style.left = `${clientX + 12}px`;
    mapState.menuDrag.ghost.style.top = `${clientY + 12}px`;
  }
  function startToolboxDrag(event) {
    if (event.button !== 0) return;
    if (!mapState.toolboxEl || !mapState.toolboxContainer) return;
    if (event.target.closest(".map-toolbox-toggle")) return;
    event.preventDefault();
    const boxRect = mapState.toolboxEl.getBoundingClientRect();
    const containerRect = mapState.toolboxContainer.getBoundingClientRect();
    mapState.toolboxDrag = {
      offsetX: event.clientX - boxRect.left,
      offsetY: event.clientY - boxRect.top,
      boxWidth: boxRect.width,
      boxHeight: boxRect.height,
      containerRect
    };
    if (typeof document !== "undefined") {
      document.body.classList.add("map-toolbox-dragging");
    }
  }
  function moveToolboxDrag(clientX, clientY) {
    const drag = mapState.toolboxDrag;
    if (!drag || !mapState.toolboxEl) return;
    const { containerRect, offsetX, offsetY, boxWidth, boxHeight } = drag;
    const width = containerRect.width;
    const height = containerRect.height;
    if (!width || !height) return;
    let x = clientX - containerRect.left - offsetX;
    let y = clientY - containerRect.top - offsetY;
    const maxX = Math.max(0, width - boxWidth);
    const maxY = Math.max(0, height - boxHeight);
    x = clamp2(x, 0, maxX);
    y = clamp2(y, 0, maxY);
    mapState.toolboxPos = { x, y };
    mapState.toolboxEl.style.left = `${x}px`;
    mapState.toolboxEl.style.top = `${y}px`;
  }
  function stopToolboxDrag() {
    if (typeof document !== "undefined") {
      document.body.classList.remove("map-toolbox-dragging");
    }
    if (!mapState.toolboxDrag) {
      ensureToolboxWithinBounds();
      return;
    }
    mapState.toolboxDrag = null;
    ensureToolboxWithinBounds();
  }
  function ensureToolboxWithinBounds() {
    const box = mapState.toolboxEl;
    const container = mapState.toolboxContainer;
    if (!box || !container || !box.isConnected || !container.isConnected) return;
    const containerRect = container.getBoundingClientRect();
    const boxRect = box.getBoundingClientRect();
    const width = containerRect.width;
    const height = containerRect.height;
    if (!width || !height) return;
    const maxX = Math.max(0, width - boxRect.width);
    const maxY = Math.max(0, height - boxRect.height);
    const x = clamp2(mapState.toolboxPos.x, 0, maxX);
    const y = clamp2(mapState.toolboxPos.y, 0, maxY);
    mapState.toolboxPos = { x, y };
    box.style.left = `${x}px`;
    box.style.top = `${y}px`;
  }
  function determineBaseCursor() {
    if (mapState.draggingView || mapState.nodeDrag || mapState.areaDrag) return "grabbing";
    switch (mapState.tool) {
      case TOOL.AREA:
        return "crosshair";
      case TOOL.NAVIGATE:
        return "grab";
      case TOOL.HIDE:
      case TOOL.BREAK:
      case TOOL.ADD_LINK:
        return "grab";
      default:
        return "pointer";
    }
  }
  function refreshCursor(options = {}) {
    if (!mapState.svg) return;
    const { keepOverride = false } = options;
    const base = determineBaseCursor();
    mapState.baseCursor = base;
    if (mapState.cursorOverride) {
      const overrideStyle = CURSOR_STYLE[mapState.cursorOverride];
      if (keepOverride && overrideStyle) {
        mapState.svg.style.cursor = overrideStyle;
        return;
      }
      mapState.cursorOverride = null;
    }
    mapState.svg.style.cursor = base;
  }
  function applyCursorOverride(kind) {
    if (!mapState.svg) return;
    if (mapState.nodeDrag || mapState.areaDrag || mapState.draggingView) return;
    const style = CURSOR_STYLE[kind];
    if (!style) return;
    mapState.cursorOverride = kind;
    mapState.svg.style.cursor = style;
  }
  function clearCursorOverride(kind) {
    if (mapState.cursorOverride !== kind) return;
    mapState.cursorOverride = null;
    refreshCursor();
  }
  async function persistNodePosition(id, options = {}) {
    const tab = getActiveTab();
    if (!tab) return;
    const pos = mapState.positions[id];
    if (!pos) return;
    const layout = ensureTabLayout(tab);
    layout[id] = { x: pos.x, y: pos.y };
    if (options.persist !== false) {
      await persistMapConfig();
    }
  }
  function gatherHiddenLinks(items, itemMap) {
    const hidden = [];
    const seen = /* @__PURE__ */ new Set();
    items.forEach((it) => {
      (it.links || []).forEach((link) => {
        if (!link.hidden) return;
        const other = itemMap[link.id];
        if (!other) return;
        const key = it.id < link.id ? `${it.id}|${link.id}` : `${link.id}|${it.id}`;
        if (seen.has(key)) return;
        seen.add(key);
        hidden.push({ a: it, b: other });
      });
    });
    return hidden;
  }
  async function handleAddLinkClick(nodeId) {
    if (!mapState.pendingLink) {
      mapState.pendingLink = nodeId;
      updatePendingHighlight();
      return;
    }
    if (mapState.pendingLink === nodeId) {
      mapState.pendingLink = null;
      updatePendingHighlight();
      return;
    }
    const from = mapState.itemMap[mapState.pendingLink];
    const to = mapState.itemMap[nodeId];
    if (!from || !to) {
      mapState.pendingLink = null;
      updatePendingHighlight();
      return;
    }
    const existing = (from.links || []).find((l) => l.id === nodeId);
    if (existing) {
      if (existing.hidden) {
        if (confirm("A hidden link already exists. Unhide it?")) {
          applyLocalLinkHidden(from.id, to.id, false);
          const forward = getLinkInfo(from.id, to.id);
          if (forward) {
            forward.hidden = false;
            applyLinkVisibility(from.id, to.id, forward);
          }
          refreshToolboxBadges();
          setLinkHidden(from.id, to.id, false).then((result) => {
            if (result) {
              integrateItemUpdates(result.source, result.target);
            } else {
              return renderMap(mapState.root);
            }
            return null;
          }).catch((err) => {
            console.error(err);
          });
        }
      } else {
        alert("These concepts are already linked.");
      }
      mapState.pendingLink = null;
      updatePendingHighlight();
      return;
    }
    if (!confirm(`Create a link between ${titleOf4(from)} and ${titleOf4(to)}?`)) {
      mapState.pendingLink = null;
      updatePendingHighlight();
      return;
    }
    const label = prompt("Optional label for this link:", "") || "";
    const linkOptions = {
      name: label,
      color: DEFAULT_LINK_COLOR,
      style: DEFAULT_LINE_STYLE,
      decoration: DEFAULT_LINE_DECORATION,
      decorationDirection: DEFAULT_DECORATION_DIRECTION,
      glow: DEFAULT_LINE_GLOW,
      thickness: DEFAULT_LINE_THICKNESS,
      hidden: false
    };
    const optimistic = applyLocalLinkAddition(from.id, to.id, linkOptions);
    const forwardInfo = optimistic?.forward ? { ...optimistic.forward, hidden: false } : { ...normalizeLinkEntry(to.id, linkOptions), hidden: false };
    applyLinkVisibility(from.id, to.id, forwardInfo);
    mapState.pendingLink = null;
    updatePendingHighlight();
    try {
      const result = await createLink(from.id, to.id, linkOptions);
      if (result) {
        integrateItemUpdates(result.source, result.target);
      } else {
        await renderMap(mapState.root);
      }
    } catch (err) {
      console.error(err);
      await renderMap(mapState.root);
    }
  }
  function openLinkAssistant(nodeId) {
    const source = mapState.itemMap?.[nodeId];
    if (!source) return;
    mapState.pendingLink = nodeId;
    updatePendingHighlight();
    const win = createFloatingWindow({
      title: `Link ${titleOf4(source) || "concept"}`,
      width: 420,
      onClose: () => {
        if (mapState.pendingLink === nodeId) {
          mapState.pendingLink = null;
          updatePendingHighlight();
        }
      }
    });
    const container = document.createElement("div");
    container.className = "map-linker";
    const hint = document.createElement("p");
    hint.className = "map-linker-hint";
    hint.textContent = "Search for another concept to connect to this one.";
    container.appendChild(hint);
    const labelField = document.createElement("label");
    labelField.className = "map-linker-field";
    labelField.textContent = "Link label (optional)";
    const labelInput = document.createElement("input");
    labelInput.type = "text";
    labelInput.className = "input map-linker-label-input";
    labelInput.placeholder = "Add a short description for this relationship";
    labelField.appendChild(labelInput);
    container.appendChild(labelField);
    const searchField = document.createElement("label");
    searchField.className = "map-linker-field";
    searchField.textContent = "Link to";
    const searchInput = document.createElement("input");
    searchInput.type = "search";
    searchInput.className = "input map-linker-search";
    searchInput.placeholder = "Search concepts\u2026";
    searchField.appendChild(searchInput);
    container.appendChild(searchField);
    const list = document.createElement("div");
    list.className = "map-linker-results";
    container.appendChild(list);
    const allItems = Object.values(mapState.itemMap || {});
    const existingLinks = /* @__PURE__ */ new Map();
    (source.links || []).forEach((link) => {
      if (link?.id) {
        existingLinks.set(link.id, link);
      }
    });
    const renderResults = () => {
      const query = searchInput.value.trim().toLowerCase();
      list.innerHTML = "";
      const matches = allItems.filter((item) => item && item.id !== source.id).filter((item) => {
        if (!query) return true;
        const label = (titleOf4(item) || "").toLowerCase();
        return label.includes(query);
      }).sort((a, b) => (titleOf4(a) || "").localeCompare(titleOf4(b) || "")).slice(0, 15);
      if (!matches.length) {
        const empty = document.createElement("div");
        empty.className = "map-linker-empty";
        empty.textContent = query ? "No matching concepts." : "No available concepts to link.";
        list.appendChild(empty);
        return;
      }
      matches.forEach((target) => {
        const row = document.createElement("div");
        row.className = "map-linker-result";
        const info = document.createElement("div");
        info.className = "map-linker-result-info";
        const name = document.createElement("div");
        name.className = "map-linker-result-title";
        name.textContent = titleOf4(target) || target.id;
        info.appendChild(name);
        if (target.kind) {
          const meta = document.createElement("div");
          meta.className = "map-linker-result-meta";
          meta.textContent = target.kind;
          info.appendChild(meta);
        }
        row.appendChild(info);
        const actions = document.createElement("div");
        actions.className = "map-linker-result-actions";
        const linkInfo = existingLinks.get(target.id);
        if (linkInfo) {
          const status = document.createElement("span");
          status.className = "map-linker-result-status";
          status.textContent = linkInfo.hidden ? "Hidden link" : "Already linked";
          actions.appendChild(status);
          if (linkInfo.hidden) {
            const unhideBtn = document.createElement("button");
            unhideBtn.type = "button";
            unhideBtn.className = "btn secondary";
            unhideBtn.textContent = "Unhide link";
            unhideBtn.addEventListener("click", () => {
              applyLocalLinkHidden(source.id, target.id, false);
              const forward = getLinkInfo(source.id, target.id);
              if (forward) {
                forward.hidden = false;
                existingLinks.set(target.id, forward);
                applyLinkVisibility(source.id, target.id, forward);
              }
              updatePendingHighlight();
              refreshToolboxBadges();
              renderResults();
              setLinkHidden(source.id, target.id, false).then((result) => {
                if (result) {
                  integrateItemUpdates(result.source, result.target);
                } else {
                  return renderMap(mapState.root);
                }
                return null;
              }).catch((err) => {
                console.error(err);
              });
            });
            actions.appendChild(unhideBtn);
          }
        } else {
          const linkBtn = document.createElement("button");
          linkBtn.type = "button";
          linkBtn.className = "btn primary";
          linkBtn.textContent = "Link concepts";
          linkBtn.addEventListener("click", async () => {
            try {
              const label = labelInput.value.trim();
              const result = await createLink(source.id, target.id, {
                name: label,
                color: DEFAULT_LINK_COLOR,
                style: DEFAULT_LINE_STYLE,
                decoration: DEFAULT_LINE_DECORATION,
                decorationDirection: DEFAULT_DECORATION_DIRECTION,
                glow: DEFAULT_LINE_GLOW,
                thickness: DEFAULT_LINE_THICKNESS,
                hidden: false
              });
              if (result) {
                integrateItemUpdates(result.source, result.target);
                existingLinks.set(target.id, result.forward);
                applyLinkVisibility(source.id, target.id, result.forward);
                updatePendingHighlight();
                labelInput.value = "";
                requestAnimationFrame(() => {
                  searchInput.focus();
                  searchInput.select();
                });
                refreshToolboxBadges();
                renderResults();
              }
            } catch (err) {
              console.error(err);
            }
          });
          actions.appendChild(linkBtn);
        }
        row.appendChild(actions);
        list.appendChild(row);
      });
    };
    searchInput.addEventListener("input", renderResults);
    renderResults();
    win.setContent(container);
    requestAnimationFrame(() => {
      searchInput.focus();
      searchInput.select();
    });
  }
  function handleEdgeClick(path, aId, bId, evt) {
    hideEdgeTooltip(path);
    if (mapState.edgeDragJustCompleted) {
      mapState.edgeDragJustCompleted = false;
      return;
    }
    if (mapState.tool === TOOL.NAVIGATE) {
      openLineMenu(evt, path, aId, bId);
    } else if (mapState.tool === TOOL.BREAK) {
      if (confirm("Are you sure you want to delete this link?")) {
        applyLocalLinkRemoval(aId, bId);
        removeEdgeBetween(aId, bId);
        updatePendingHighlight();
        refreshToolboxBadges();
        removeLink(aId, bId).then((result) => {
          if (result) {
            integrateItemUpdates(result.source, result.target);
          } else {
            return renderMap(mapState.root);
          }
          return null;
        }).catch((err) => {
          console.error(err);
        });
      }
    } else if (mapState.tool === TOOL.HIDE) {
      if (confirm("Hide this link on the map?")) {
        applyLocalLinkHidden(aId, bId, true);
        applyLinkVisibility(aId, bId, { hidden: true });
        updatePendingHighlight();
        refreshToolboxBadges();
        setLinkHidden(aId, bId, true).then((result) => {
          if (result) {
            integrateItemUpdates(result.source, result.target);
          } else {
            return renderMap(mapState.root);
          }
          return null;
        }).catch((err) => {
          console.error(err);
        });
      }
    }
  }
  function showEdgeTooltip(line, evt) {
    const tooltip = mapState.edgeTooltip;
    const container = mapState.container;
    if (!tooltip || !container) return;
    const text = line?.dataset?.label || "";
    if (!text) {
      hideEdgeTooltip(line);
      return;
    }
    tooltip.textContent = text;
    tooltip.classList.remove("hidden");
    mapState.hoveredEdge = line;
    if (evt && Number.isFinite(evt.clientX) && Number.isFinite(evt.clientY)) {
      mapState.hoveredEdgePointer = { x: evt.clientX, y: evt.clientY };
    }
    positionEdgeTooltip(evt);
  }
  function moveEdgeTooltip(line, evt) {
    if (mapState.hoveredEdge !== line) return;
    if (!mapState.edgeTooltip || mapState.edgeTooltip.classList.contains("hidden")) return;
    if (evt && Number.isFinite(evt.clientX) && Number.isFinite(evt.clientY)) {
      mapState.hoveredEdgePointer = { x: evt.clientX, y: evt.clientY };
    }
    positionEdgeTooltip(evt);
  }
  function hideEdgeTooltip(line) {
    if (line && mapState.hoveredEdge && mapState.hoveredEdge !== line) return;
    const tooltip = mapState.edgeTooltip;
    if (!tooltip) return;
    tooltip.classList.add("hidden");
    tooltip.textContent = "";
    mapState.hoveredEdge = null;
  }
  function positionEdgeTooltip(evt) {
    const tooltip = mapState.edgeTooltip;
    const container = mapState.container;
    if (!tooltip || !container) return;
    const rect = container.getBoundingClientRect();
    const pointer = evt && Number.isFinite(evt.clientX) && Number.isFinite(evt.clientY) ? { x: evt.clientX, y: evt.clientY } : mapState.hoveredEdgePointer;
    const rawX = pointer.x - rect.left + 14;
    const rawY = pointer.y - rect.top + 14;
    const maxX = rect.width - tooltip.offsetWidth - 12;
    const maxY = rect.height - tooltip.offsetHeight - 12;
    const clampedX = clamp2(rawX, 12, Math.max(12, maxX));
    const clampedY = clamp2(rawY, 12, Math.max(12, maxY));
    tooltip.style.left = `${clampedX}px`;
    tooltip.style.top = `${clampedY}px`;
  }
  function adjustScale() {
    const svg = mapState.svg;
    if (!svg) return;
    const vb = svg.getAttribute("viewBox");
    if (!vb) return;
    const parts = vb.split(/\s+/).map(Number);
    const [, , w, h] = parts;
    if (!Number.isFinite(w) || w <= 0) return;
    const height = Number.isFinite(h) && h > 0 ? h : w;
    const defaultSize = Number.isFinite(mapState.defaultViewSize) ? mapState.defaultViewSize : w;
    const zoomRatio = w / defaultSize;
    const normalized2 = clamp2(zoomRatio, 0.35, 4.5);
    const nodeScale = clamp2(Math.pow(normalized2, 0.28), 0.78, 1.6);
    const labelScale = clamp2(Math.pow(normalized2, 0.34), 0.92, 2.85);
    const lineScale = clamp2(Math.pow(normalized2, -0.4), 0.55, 2.1);
    mapState.lastScaleSize = { w, h: height };
    mapState.currentScales = { nodeScale, labelScale, lineScale, zoomRatio };
    updateMarkerSizes();
    mapState.elements.forEach((entry, id) => {
      updateNodeGeometry(id, entry);
    });
    const allEdges = mapState.allEdges;
    if (allEdges && allEdges.size) {
      const stale = [];
      allEdges.forEach((line) => {
        if (!line || !line.isConnected || !line.ownerSVGElement) {
          stale.push(line);
          return;
        }
        if (line.dataset.a && line.dataset.b) {
          const geometry = getLineGeometry(line.dataset.a, line.dataset.b, { line });
          if (geometry?.pathData) {
            refreshEdgeGeometry(line, { geometry, animate: false });
          } else {
            removeEdgeAnimation(line);
            removeLineHandles(line);
            syncLineDecoration(line, geometry);
            updateLineStrokeWidth(line);
          }
        } else {
          updateLineStrokeWidth(line);
          syncLineDecoration(line);
        }
      });
      if (stale.length) {
        stale.forEach(unregisterEdgeElement);
      }
    } else {
      const edgeContainer = mapState.edgeLayer || svg;
      edgeContainer.querySelectorAll(".map-edge").forEach((line) => {
        if (line.dataset.a && line.dataset.b) {
          const geometry = getLineGeometry(line.dataset.a, line.dataset.b, { line });
          if (geometry?.pathData) {
            refreshEdgeGeometry(line, { geometry, animate: false });
          } else {
            removeEdgeAnimation(line);
            removeLineHandles(line);
            syncLineDecoration(line, geometry);
            updateLineStrokeWidth(line);
          }
        } else {
          updateLineStrokeWidth(line);
          syncLineDecoration(line);
        }
      });
    }
  }
  function getNodeBaseRadius(id) {
    if (mapState.nodeRadii && mapState.nodeRadii.has(id)) {
      return mapState.nodeRadii.get(id);
    }
    const entry = mapState.elements?.get(id);
    if (entry?.circle) {
      return Number(entry.circle.dataset.radius) || 20;
    }
    return 20;
  }
  function getNodeRadius(id) {
    const base = getNodeBaseRadius(id);
    const scales = getCurrentScales();
    return base * (scales.nodeScale || 1);
  }
  function getNodeFill(item) {
    if (!item || typeof item !== "object") {
      return "var(--gray)";
    }
    if (item.color && typeof item.color === "string") {
      return item.color;
    }
    return KIND_FALLBACK_COLORS[item.kind] || "var(--gray)";
  }
  function refreshNodeColor(id) {
    const entry = mapState.elements?.get(id);
    const item = mapState.itemMap?.[id];
    if (entry?.circle && item) {
      entry.circle.setAttribute("fill", getNodeFill(item));
    }
  }
  function computeTrimmedSegment(aId, bId, options = {}) {
    const positions = mapState.positions || {};
    const a = positions[aId];
    const b = positions[bId];
    if (!a || !b) return null;
    const dx = b.x - a.x;
    const dy = b.y - a.y;
    const len = Math.hypot(dx, dy);
    if (!len) return null;
    const ux = dx / len;
    const uy = dy / len;
    const extraA = Number(options.trimA) || 0;
    const extraB = Number(options.trimB) || 0;
    const trimA = Math.min(getNodeRadius(aId) + 6 + extraA, len / 2);
    const trimB = Math.min(getNodeRadius(bId) + 6 + extraB, len / 2);
    const startX = a.x + ux * trimA;
    const startY = a.y + uy * trimA;
    const endX = b.x - ux * trimB;
    const endY = b.y - uy * trimB;
    const trimmedLength = Math.hypot(endX - startX, endY - startY);
    return {
      startX,
      startY,
      endX,
      endY,
      ux,
      uy,
      trimmedLength: trimmedLength || 0
    };
  }
  function getDefaultHandlePositions(count = CURVE_HANDLE_COUNT) {
    const total = Math.max(0, Math.round(Number(count) || 0));
    if (total <= 0) {
      return [];
    }
    return Array.from({ length: total }, (_, idx) => {
      const raw = (idx + 1) / (total + 1);
      return clampHandlePosition(raw);
    });
  }
  function clampHandleOffset(value) {
    const num = Number(value);
    if (!Number.isFinite(num)) return 0;
    return clamp2(num, -CURVE_HANDLE_MAX_OFFSET, CURVE_HANDLE_MAX_OFFSET);
  }
  function clampHandlePosition(value) {
    const num = Number(value);
    if (!Number.isFinite(num)) return DEFAULT_CURVE_ANCHOR;
    return clamp2(num, 0.08, 0.92);
  }
  function normalizeCurveHandle(entry) {
    if (!entry) return null;
    if (Array.isArray(entry)) {
      if (entry.length < 2) return null;
      return {
        position: clampHandlePosition(entry[0]),
        offset: clampHandleOffset(entry[1])
      };
    }
    if (typeof entry === "object") {
      if (Object.prototype.hasOwnProperty.call(entry, "position") || Object.prototype.hasOwnProperty.call(entry, "offset")) {
        return {
          position: clampHandlePosition(entry.position),
          offset: clampHandleOffset(entry.offset)
        };
      }
    }
    const num = Number(entry);
    if (Number.isFinite(num)) {
      return {
        position: DEFAULT_CURVE_ANCHOR,
        offset: clampHandleOffset(num)
      };
    }
    return null;
  }
  function parseCurveHandles(value) {
    if (!value) return null;
    if (Array.isArray(value)) {
      const normalized2 = value.map(normalizeCurveHandle).filter(Boolean);
      return normalized2.length ? normalized2 : null;
    }
    if (typeof value === "string") {
      try {
        const parsed = JSON.parse(value);
        if (Array.isArray(parsed)) {
          const normalized2 = parsed.map(normalizeCurveHandle).filter(Boolean);
          if (normalized2.length) return normalized2;
        }
      } catch {
      }
      const pieces = value.split(/[|,\s]+/).map(Number).filter((n) => Number.isFinite(n));
      if (pieces.length) {
        const positions = getDefaultHandlePositions(pieces.length);
        return pieces.map((offset, idx) => ({
          position: positions[idx] ?? DEFAULT_CURVE_ANCHOR,
          offset: clampHandleOffset(offset)
        }));
      }
      return null;
    }
    if (typeof value === "object") {
      return parseCurveHandles(Object.values(value));
    }
    return null;
  }
  function mergeCurveHandles(baseHandles, overrides) {
    const base = Array.isArray(baseHandles) ? baseHandles.map((handle) => ({ position: handle.position, offset: handle.offset })) : [];
    if (!Array.isArray(overrides) || !overrides.length) {
      return base;
    }
    overrides.forEach((override) => {
      const handle = normalizeCurveHandle(override);
      if (!handle) return;
      if (!base.length) {
        base.push({
          position: clampHandlePosition(handle.position),
          offset: clampHandleOffset(handle.offset)
        });
        return;
      }
      let bestIndex = 0;
      let bestDist = Infinity;
      base.forEach((candidate, idx) => {
        const candidatePos = candidate?.position ?? DEFAULT_CURVE_ANCHOR;
        const dist = Math.abs(candidatePos - handle.position);
        if (dist < bestDist) {
          bestDist = dist;
          bestIndex = idx;
        }
      });
      const nextPosition = Object.prototype.hasOwnProperty.call(handle, "position") ? clampHandlePosition(handle.position) : clampHandlePosition(base[bestIndex].position);
      const replacement = {
        position: nextPosition,
        offset: clampHandleOffset(handle.offset)
      };
      if (bestDist > 0.12) {
        base.splice(bestIndex + (replacement.position > base[bestIndex].position ? 1 : 0), 0, replacement);
      } else {
        base[bestIndex] = replacement;
      }
    });
    base.sort((a, b) => a.position - b.position);
    return base;
  }
  function encodeCurveHandles(handles) {
    if (!Array.isArray(handles) || !handles.length) return "";
    const simplified = handles.map((handle) => ({
      position: clampHandlePosition(handle.position),
      offset: clampHandleOffset(handle.offset)
    }));
    return JSON.stringify(simplified);
  }
  function getHandleWeight() {
    return 1;
  }
  function resolveLineHandles(line, info = {}, overrides = {}, context = {}, options = {}) {
    const datasetHandles = line?.dataset?.handles ? parseCurveHandles(line.dataset.handles) : null;
    const hasExplicitHandles = Object.prototype.hasOwnProperty.call(info, "curveHandles") || Object.prototype.hasOwnProperty.call(info, "curvePoints") || Object.prototype.hasOwnProperty.call(info, "curveOffsets") || Object.prototype.hasOwnProperty.call(info, "handles");
    const infoHandleSource = hasExplicitHandles ? info.curveHandles ?? info.curvePoints ?? info.curveOffsets ?? info.handles : void 0;
    const infoHandles = parseCurveHandles(infoHandleSource);
    const clearExisting = options?.clearExisting === true || hasExplicitHandles && (!infoHandles || !infoHandles.length) && (Array.isArray(infoHandleSource) ? infoHandleSource.length === 0 : infoHandleSource == null || infoHandleSource === "");
    let handles = [];
    if (!clearExisting && datasetHandles && datasetHandles.length) {
      handles = mergeCurveHandles(handles, datasetHandles);
    }
    if (infoHandles && infoHandles.length) {
      handles = mergeCurveHandles(handles, infoHandles);
    } else if (clearExisting) {
      handles = [];
    }
    if (Number.isFinite(overrides.curveOverride)) {
      const anchor = Number.isFinite(overrides.anchorOverride) ? overrides.anchorOverride : DEFAULT_CURVE_ANCHOR;
      handles = mergeCurveHandles(handles, [{ position: anchor, offset: overrides.curveOverride }]);
    }
    return handles.map((handle) => ({
      position: clampHandlePosition(handle.position),
      offset: clampHandleOffset(handle.offset)
    }));
  }
  function buildCurvePoints(segment, handles) {
    const { startX, startY, endX, endY, ux, uy } = segment;
    const dx = endX - startX;
    const dy = endY - startY;
    const length = segment.trimmedLength || Math.hypot(dx, dy) || 1;
    const nx = -uy;
    const ny = ux;
    const points = [{ x: startX, y: startY }];
    const meta = [];
    handles.forEach((handle) => {
      const position = clampHandlePosition(handle.position);
      const baseX = startX + dx * position;
      const baseY = startY + dy * position;
      const normalized2 = clampHandleOffset(handle.offset);
      const weight = getHandleWeight(position);
      const offset = normalized2 * length * weight;
      const point = {
        x: baseX + nx * offset,
        y: baseY + ny * offset
      };
      points.push(point);
      meta.push({
        position,
        offset: normalized2,
        base: { x: baseX, y: baseY },
        weight,
        point
      });
    });
    points.push({ x: endX, y: endY });
    return { points, meta };
  }
  function buildCurveSegments(points) {
    if (!Array.isArray(points) || points.length < 2) return [];
    const segments = [];
    for (let i = 0; i < points.length - 1; i += 1) {
      const p0 = points[i === 0 ? i : i - 1];
      const p1 = points[i];
      const p2 = points[i + 1];
      const p3 = points[i + 2 < points.length ? i + 2 : points.length - 1];
      const c1 = {
        x: p1.x + (p2.x - p0.x) / 6,
        y: p1.y + (p2.y - p0.y) / 6
      };
      const c2 = {
        x: p2.x - (p3.x - p1.x) / 6,
        y: p2.y - (p3.y - p1.y) / 6
      };
      segments.push({
        from: p1,
        to: p2,
        c1,
        c2
      });
    }
    return segments;
  }
  function cubicPoint(p0, c1, c2, p1, t) {
    const mt = 1 - t;
    const mt2 = mt * mt;
    const t2 = t * t;
    return {
      x: mt2 * mt * p0.x + 3 * mt2 * t * c1.x + 3 * mt * t2 * c2.x + t * t2 * p1.x,
      y: mt2 * mt * p0.y + 3 * mt2 * t * c1.y + 3 * mt * t2 * c2.y + t * t2 * p1.y
    };
  }
  function cubicTangent(p0, c1, c2, p1, t) {
    const dx = 3 * (1 - t) * (1 - t) * (c1.x - p0.x) + 6 * (1 - t) * t * (c2.x - c1.x) + 3 * t * t * (p1.x - c2.x);
    const dy = 3 * (1 - t) * (1 - t) * (c1.y - p0.y) + 6 * (1 - t) * t * (c2.y - c1.y) + 3 * t * t * (p1.y - c2.y);
    const len = Math.hypot(dx, dy) || 1;
    return { x: dx / len, y: dy / len };
  }
  function approximateCubicLength(p0, c1, c2, p1) {
    let prev = p0;
    let length = 0;
    const steps = 12;
    for (let i = 1; i <= steps; i += 1) {
      const t = i / steps;
      const next = cubicPoint(p0, c1, c2, p1, t);
      length += Math.hypot(next.x - prev.x, next.y - prev.y);
      prev = next;
    }
    return length;
  }
  function buildPathData(start, segments) {
    if (!start) return "";
    if (!segments.length) return "";
    let path = `M${start.x} ${start.y}`;
    segments.forEach((segment) => {
      path += ` C${segment.c1.x} ${segment.c1.y} ${segment.c2.x} ${segment.c2.y} ${segment.to.x} ${segment.to.y}`;
    });
    return path;
  }
  function removeLineGap(line) {
    if (!line) return;
    if (line._gapLayer) {
      line._gapLayer.remove();
      line._gapLayer = null;
    }
    if (line._gapSample) {
      line._gapSample = null;
    }
  }
  function updateLineGapVisuals(line) {
    if (!line?._gapLayer) return;
    const baseWidth = Number(line.dataset?.baseWidth) || getLineThicknessValue(line.dataset?.thickness);
    const strokeWidth = Math.max(baseWidth * LINE_GAP_STROKE_MULTIPLIER, baseWidth + 4);
    const radius = Math.max(baseWidth * 0.75, 3);
    line._gapLayer.querySelectorAll(".map-edge-gap").forEach((circle) => {
      circle.setAttribute("stroke-width", strokeWidth);
      circle.setAttribute("r", radius);
    });
  }
  function updateLineCrossovers(line, geometry, options = {}) {
    removeLineGap(line);
  }
  function getPointAlongSegments(segments, ratio) {
    if (!segments.length) return null;
    const clamped = clamp2(ratio, 0, 1);
    let total = 0;
    const lengths = segments.map((segment) => {
      const length = approximateCubicLength(segment.from, segment.c1, segment.c2, segment.to);
      total += length;
      return length;
    });
    if (!total) {
      const first = segments[0].from;
      const last = segments[segments.length - 1].to;
      return {
        point: {
          x: first.x + (last.x - first.x) * clamped,
          y: first.y + (last.y - first.y) * clamped
        },
        tangent: normalizeVector(last.x - first.x, last.y - first.y)
      };
    }
    let accumulated = 0;
    for (let i = 0; i < segments.length; i += 1) {
      const segment = segments[i];
      const length = lengths[i];
      const nextAccum = accumulated + length;
      const threshold = clamped * total;
      if (threshold <= nextAccum || i === segments.length - 1) {
        const remaining = threshold - accumulated;
        const localT = length ? clamp2(remaining / length, 0, 1) : 0;
        const point = cubicPoint(segment.from, segment.c1, segment.c2, segment.to, localT);
        const tangent2 = cubicTangent(segment.from, segment.c1, segment.c2, segment.to, localT);
        return { point, tangent: tangent2 };
      }
      accumulated = nextAccum;
    }
    const lastSegment = segments[segments.length - 1];
    const lastPoint = { ...lastSegment.to };
    const tangent = cubicTangent(lastSegment.from, lastSegment.c1, lastSegment.c2, lastSegment.to, 1);
    return { point: lastPoint, tangent };
  }
  function findNearestHandleIndex(geometry, pointer) {
    if (!geometry || !Array.isArray(geometry.handles) || !geometry.handles.length || !pointer) {
      return 0;
    }
    let bestIndex = 0;
    let bestDist = Infinity;
    geometry.handles.forEach((handle, index) => {
      const px = handle.point?.x ?? handle.base?.x ?? 0;
      const py = handle.point?.y ?? handle.base?.y ?? 0;
      const dist = Math.hypot(pointer.x - px, pointer.y - py);
      if (dist < bestDist) {
        bestDist = dist;
        bestIndex = index;
      }
    });
    return bestIndex;
  }
  function buildHandleMetaFromPointer(geometry, pointer) {
    if (!geometry || !pointer) return null;
    const dx = geometry.endX - geometry.startX;
    const dy = geometry.endY - geometry.startY;
    const baseLength = geometry.trimmedLength || Math.hypot(dx, dy) || 1;
    if (!baseLength) return null;
    const projection = ((pointer.x - geometry.startX) * dx + (pointer.y - geometry.startY) * dy) / (baseLength * baseLength);
    const position = clampHandlePosition(projection);
    const baseX = geometry.startX + dx * position;
    const baseY = geometry.startY + dy * position;
    const nx = -geometry.uy;
    const ny = geometry.ux;
    const weight = getHandleWeight(position);
    const rawOffset = ((pointer.x - baseX) * nx + (pointer.y - baseY) * ny) / (baseLength || 1);
    const normalized2 = clampHandleOffset(rawOffset / (weight || 1));
    const offsetDistance = normalized2 * baseLength * weight;
    const point = {
      x: baseX + nx * offsetDistance,
      y: baseY + ny * offsetDistance
    };
    return { position, offset: normalized2, base: { x: baseX, y: baseY }, weight, point };
  }
  function prepareHandlesForDrag(geometry, pointer, hintIndex = 0, options = {}) {
    if (!geometry) {
      return { handles: [], index: -1 };
    }
    const handles = Array.isArray(geometry.handles) ? geometry.handles.map((handle) => ({
      position: clampHandlePosition(handle.position),
      offset: clampHandleOffset(handle.offset),
      base: handle.base,
      point: handle.point,
      weight: handle.weight ?? getHandleWeight(handle.position)
    })) : [];
    const originalLength = handles.length;
    let createdIndex = -1;
    const { forceCreate = false } = options;
    let insertedHandle = null;
    let index = clamp2(Math.round(hintIndex ?? 0), 0, Math.max(0, handles.length - 1));
    const pointerMeta = pointer ? { x: pointer.x, y: pointer.y } : null;
    if (pointerMeta) {
      let nearestIndex = handles.length ? findNearestHandleIndex({ ...geometry, handles }, pointerMeta) : -1;
      let nearestDistance = Infinity;
      if (handles.length && nearestIndex >= 0) {
        const candidate = handles[nearestIndex];
        const px = candidate?.point?.x ?? candidate?.base?.x ?? geometry.startX;
        const py = candidate?.point?.y ?? candidate?.base?.y ?? geometry.startY;
        nearestDistance = Math.hypot(pointerMeta.x - px, pointerMeta.y - py);
      }
      const threshold = Math.max((geometry.baseWidth || 6) * 2.4, 26);
      const shouldInsert = forceCreate || !handles.length || nearestDistance > threshold;
      if (shouldInsert) {
        const inserted = buildHandleMetaFromPointer(geometry, pointerMeta);
        if (inserted) {
          handles.push(inserted);
          handles.sort((a, b) => a.position - b.position);
          nearestIndex = handles.indexOf(inserted);
          createdIndex = nearestIndex;
          insertedHandle = inserted;
        }
      }
      if (handles.length) {
        const targetIndex = nearestIndex >= 0 ? nearestIndex : handles.indexOf(insertedHandle);
        index = clamp2(targetIndex >= 0 ? targetIndex : index, 0, handles.length - 1);
      }
    } else if (forceCreate) {
      const defaultPointer = {
        x: geometry.startX + (geometry.endX - geometry.startX) * DEFAULT_CURVE_ANCHOR,
        y: geometry.startY + (geometry.endY - geometry.startY) * DEFAULT_CURVE_ANCHOR
      };
      const inserted = buildHandleMetaFromPointer(geometry, defaultPointer);
      if (inserted) {
        handles.push(inserted);
        handles.sort((a, b) => a.position - b.position);
        createdIndex = handles.indexOf(inserted);
        index = clamp2(createdIndex, 0, handles.length - 1);
      }
    }
    geometry.handles = handles;
    return { handles, index, createdIndex, originalLength };
  }
  function computeDecorationTrim(decoration, direction, baseWidth) {
    const arrowAllowance = Math.max(22, baseWidth * 4.2);
    const inhibitAllowance = Math.max(12, baseWidth * 2.6);
    let trimA = 0;
    let trimB = 0;
    if (decoration === "arrow") {
      if (direction === "start" || direction === "both") {
        trimA += arrowAllowance;
      }
      if (direction === "end" || direction === "both") {
        trimB += arrowAllowance;
      }
    }
    if (decoration === "inhibit") {
      if (direction === "start" || direction === "both") {
        trimA += inhibitAllowance;
      }
      if (direction === "end" || direction === "both") {
        trimB += inhibitAllowance;
      }
    }
    return { trimA, trimB };
  }
  function getLineGeometry(aId, bId, options = {}) {
    const line = options.line || null;
    const appearanceSource = {
      style: options.style ?? options.linkStyle ?? line?.dataset?.style,
      decoration: options.decoration ?? line?.dataset?.decoration,
      decorationDirection: options.decorationDirection ?? options.direction ?? line?.dataset?.direction ?? line?.dataset?.decorationDirection,
      glow: options.glow ?? line?.dataset?.glow
    };
    const appearance = normalizeLinkAppearance(appearanceSource);
    const { style, decoration, decorationDirection } = appearance;
    const thicknessKey = options.thickness ?? line?.dataset?.thickness ?? DEFAULT_LINE_THICKNESS;
    const baseWidth = getLineThicknessValue(thicknessKey);
    const trims = computeDecorationTrim(decoration, decorationDirection, baseWidth);
    const segment = computeTrimmedSegment(aId, bId, trims);
    if (!segment) return null;
    let curveOverride;
    if (Object.prototype.hasOwnProperty.call(options, "curve")) {
      const manual = Number(options.curve);
      curveOverride = Number.isFinite(manual) ? clampHandleOffset(manual) : void 0;
    } else if (line && Object.prototype.hasOwnProperty.call(line.dataset || {}, "curve")) {
      const manual = Number(line.dataset.curve);
      curveOverride = Number.isFinite(manual) ? clampHandleOffset(manual) : void 0;
    }
    let anchorOverride;
    if (Object.prototype.hasOwnProperty.call(options, "anchor")) {
      anchorOverride = normalizeAnchorValue(options.anchor);
    } else if (Object.prototype.hasOwnProperty.call(options, "curveAnchor")) {
      anchorOverride = normalizeAnchorValue(options.curveAnchor);
    } else if (line && Object.prototype.hasOwnProperty.call(line.dataset || {}, "anchor")) {
      anchorOverride = normalizeAnchorValue(line.dataset.anchor);
    }
    const handles = resolveLineHandles(
      line,
      options,
      { curveOverride, anchorOverride },
      { segment, aId, bId, decoration, decorationDirection }
    );
    const { points, meta } = buildCurvePoints(segment, handles);
    const segments = buildCurveSegments(points);
    const pathData = buildPathData(points[0], segments);
    const mid = getPointAlongSegments(segments, 0.5) || { point: points[Math.floor(points.length / 2)], tangent: { x: segment.ux, y: segment.uy } };
    const firstSegment = segments[0];
    const lastSegment = segments[segments.length - 1];
    const startTangent = firstSegment ? cubicTangent(firstSegment.from, firstSegment.c1, firstSegment.c2, firstSegment.to, 0) : { x: segment.ux, y: segment.uy };
    const endTangent = lastSegment ? cubicTangent(lastSegment.from, lastSegment.c1, lastSegment.c2, lastSegment.to, 1) : { x: segment.ux, y: segment.uy };
    let dominant = { position: DEFAULT_CURVE_ANCHOR, offset: 0 };
    meta.forEach((handle) => {
      if (Math.abs(handle.offset) > Math.abs(dominant.offset)) {
        dominant = { position: handle.position, offset: handle.offset };
      }
    });
    const geometry = {
      ...segment,
      style,
      decoration,
      decorationDirection,
      baseWidth,
      anchor: dominant.position,
      curve: dominant.offset,
      handles: meta,
      pathData,
      startTangent,
      endTangent,
      midPoint: mid.point,
      midTangent: mid.tangent,
      segments
    };
    if (line) {
      line._lastSegment = segment;
    }
    return geometry;
  }
  function hashMarkerKey(input = "") {
    const text = String(input);
    let hash = 2166136261;
    for (let i = 0; i < text.length; i += 1) {
      hash ^= text.charCodeAt(i);
      hash = Math.imul(hash, 16777619);
    }
    return (hash >>> 0).toString(36);
  }
  function applyMarkerColor(marker, color) {
    if (!marker) return;
    marker.setAttribute("color", color);
    marker.style.color = color;
    marker.querySelectorAll("path").forEach((path) => {
      path.setAttribute("fill", color);
      path.setAttribute("stroke", color);
    });
  }
  function ensureArrowMarker(color, direction) {
    const defs = mapState.markerDefs;
    if (!defs || !direction) {
      return direction === "start" ? "arrow-start" : "arrow-end";
    }
    const normalizedColor = (color || DEFAULT_LINK_COLOR).trim();
    if (!mapState.lineMarkerCache) {
      mapState.lineMarkerCache = /* @__PURE__ */ new Map();
    }
    const key = `${direction}:${normalizedColor}`;
    if (mapState.lineMarkerCache.has(key)) {
      return mapState.lineMarkerCache.get(key);
    }
    const baseId = direction === "start" ? "arrow-start" : "arrow-end";
    const baseMarker = mapState.lineMarkers?.get(baseId) || document.getElementById(baseId);
    const uniqueId = `${baseId}-${hashMarkerKey(key)}`;
    let marker = mapState.lineMarkers?.get(uniqueId) || document.getElementById(uniqueId);
    if (!marker) {
      if (baseMarker) {
        marker = baseMarker.cloneNode(true);
      } else {
        marker = document.createElementNS("http://www.w3.org/2000/svg", "marker");
        marker.setAttribute("viewBox", "0 0 16 16");
        marker.setAttribute("markerUnits", "strokeWidth");
        marker.setAttribute("markerWidth", "9");
        marker.setAttribute("markerHeight", "9");
        marker.setAttribute("orient", "auto");
        const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
        const d = direction === "start" ? "M14 2 L2 8 L14 14 L10 8 Z" : "M2 2 L14 8 L2 14 L6 8 Z";
        path.setAttribute("d", d);
        marker.appendChild(path);
      }
      marker.setAttribute("id", uniqueId);
      defs.appendChild(marker);
    }
    applyMarkerColor(marker, normalizedColor);
    if (mapState.lineMarkers) {
      mapState.lineMarkers.set(uniqueId, marker);
    }
    mapState.lineMarkerCache.set(key, uniqueId);
    updateMarkerSizes();
    return uniqueId;
  }
  function applyLineStyle(line, info = {}) {
    if (!line) return;
    if (line.dataset && Object.prototype.hasOwnProperty.call(line.dataset, "autoCurve")) {
      delete line.dataset.autoCurve;
    }
    const previousColor = line.dataset.color;
    const previousThickness = line.dataset.thickness;
    const previousLabel = line.dataset.label;
    const color = info.color ?? previousColor ?? DEFAULT_LINK_COLOR;
    const thickness = info.thickness ?? previousThickness ?? DEFAULT_LINE_THICKNESS;
    const label = info.name ?? previousLabel ?? "";
    const datasetAppearance = {
      style: line.dataset.style,
      decoration: line.dataset.decoration,
      decorationDirection: line.dataset.direction ?? line.dataset.decorationDirection,
      glow: line.dataset.glow
    };
    const overrideAppearance = {};
    if (Object.prototype.hasOwnProperty.call(info, "style")) overrideAppearance.style = info.style;
    if (Object.prototype.hasOwnProperty.call(info, "decoration")) overrideAppearance.decoration = info.decoration;
    if (Object.prototype.hasOwnProperty.call(info, "decorationDirection")) {
      overrideAppearance.decorationDirection = info.decorationDirection;
    } else if (Object.prototype.hasOwnProperty.call(info, "direction")) {
      overrideAppearance.decorationDirection = info.direction;
    }
    if (Object.prototype.hasOwnProperty.call(info, "glow")) overrideAppearance.glow = info.glow;
    const appearance = normalizeLinkAppearance({
      ...datasetAppearance,
      ...overrideAppearance
    });
    const { style, decoration, decorationDirection, glow } = appearance;
    line.dataset.color = color;
    line.dataset.style = style;
    if (decoration && decoration !== "none") {
      line.dataset.decoration = decoration;
    } else {
      delete line.dataset.decoration;
    }
    if (decorationDirection) {
      line.dataset.direction = decorationDirection;
    } else {
      delete line.dataset.direction;
    }
    if (glow) {
      line.dataset.glow = "1";
    } else {
      delete line.dataset.glow;
    }
    const baseWidthValue = getLineThicknessValue(thickness);
    line.dataset.thickness = thickness;
    line.dataset.baseWidth = String(baseWidthValue);
    line.dataset.label = label;
    const hasExplicitHandles = Object.prototype.hasOwnProperty.call(info, "curveHandles") || Object.prototype.hasOwnProperty.call(info, "curvePoints") || Object.prototype.hasOwnProperty.call(info, "curveOffsets") || Object.prototype.hasOwnProperty.call(info, "handles");
    const handleSource = hasExplicitHandles ? info.curveHandles ?? info.curvePoints ?? info.curveOffsets ?? info.handles : void 0;
    const shouldClearHandles = hasExplicitHandles && (!handleSource || Array.isArray(handleSource) && handleSource.length === 0);
    let curveOverride = Object.prototype.hasOwnProperty.call(info, "curve") ? clampHandleOffset(info.curve) : void 0;
    let anchorOverride = Object.prototype.hasOwnProperty.call(info, "anchor") ? normalizeAnchorValue(info.anchor) : Object.prototype.hasOwnProperty.call(info, "curveAnchor") ? normalizeAnchorValue(info.curveAnchor) : void 0;
    if (shouldClearHandles) {
      curveOverride = void 0;
      if (!Number.isFinite(anchorOverride)) {
        anchorOverride = void 0;
      }
    }
    const aId = line.dataset.a;
    const bId = line.dataset.b;
    let segmentContext = null;
    if (aId && bId) {
      segmentContext = computeTrimmedSegment(aId, bId, computeDecorationTrim(decoration, decorationDirection, baseWidthValue));
    }
    const handles = resolveLineHandles(
      line,
      info,
      { curveOverride, anchorOverride },
      { segment: segmentContext, aId, bId, decoration, decorationDirection },
      { clearExisting: shouldClearHandles }
    );
    const encodedHandles = encodeCurveHandles(handles);
    if (encodedHandles) {
      line.dataset.handles = encodedHandles;
    } else {
      delete line.dataset.handles;
    }
    let dominant = { position: DEFAULT_CURVE_ANCHOR, offset: 0 };
    handles.forEach((handle) => {
      if (Math.abs(handle.offset) > Math.abs(dominant.offset)) {
        dominant = handle;
      }
    });
    if (handles.length && Math.abs(dominant.offset) > 1e-4) {
      line.dataset.curve = String(clampHandleOffset(dominant.offset));
    } else {
      delete line.dataset.curve;
    }
    if (handles.length && Number.isFinite(dominant.position)) {
      line.dataset.anchor = String(clampHandlePosition(dominant.position));
    } else {
      delete line.dataset.anchor;
    }
    let geometry = null;
    if (line.dataset.a && line.dataset.b) {
      geometry = getLineGeometry(line.dataset.a, line.dataset.b, {
        ...info,
        style,
        decoration,
        decorationDirection,
        curveHandles: handles,
        curve: dominant.offset,
        anchor: dominant.position,
        line
      });
      if (geometry?.pathData) {
        line.setAttribute("d", geometry.pathData);
      }
    }
    line._lastGeometry = geometry || null;
    updateLineCrossovers(line, geometry);
    updateLineStrokeWidth(line);
    syncLineHandles(line, geometry);
    LINE_STYLE_CLASSNAMES.forEach((cls) => line.classList.remove(cls));
    if (style) {
      line.classList.add(`map-edge--${style}`);
    }
    LINE_DECORATION_CLASSNAMES.forEach((cls) => line.classList.remove(cls));
    if (decoration && decoration !== "none") {
      line.classList.add(`map-edge--decoration-${decoration}`);
    }
    line.classList.toggle("map-edge--glow", glow);
    line.classList.toggle("edge-glow", glow);
    line.style.stroke = color;
    line.style.color = color;
    line.setAttribute("stroke", color);
    line.setAttribute("color", color);
    line.style.filter = "";
    line.removeAttribute("marker-start");
    line.removeAttribute("marker-end");
    line.removeAttribute("marker-mid");
    line.removeAttribute("stroke-dasharray");
    if (style === "dashed") {
      const base = getLineThicknessValue(thickness);
      line.setAttribute("stroke-dasharray", `${base * 3},${base * 2}`);
      line.setAttribute("stroke-linecap", "round");
    } else if (style === "dotted") {
      const base = Math.max(1, getLineThicknessValue(thickness) * 0.9);
      line.setAttribute("stroke-dasharray", `${base},${base * 2.1}`);
      line.setAttribute("stroke-linecap", "round");
    } else {
      line.removeAttribute("stroke-dasharray");
      line.setAttribute("stroke-linecap", "round");
    }
    if (decoration === "arrow") {
      if (decorationDirection === "start" || decorationDirection === "both") {
        const startId = ensureArrowMarker(color, "start");
        line.setAttribute("marker-start", `url(#${startId})`);
      }
      if (decorationDirection === "end" || decorationDirection === "both") {
        const endId = ensureArrowMarker(color, "end");
        line.setAttribute("marker-end", `url(#${endId})`);
      }
    }
    const title = line.querySelector("title");
    if (title) title.remove();
    if (label) {
      line.setAttribute("aria-label", label);
    } else {
      line.removeAttribute("aria-label");
    }
    if (mapState.hoveredEdge === line) {
      if (label) {
        showEdgeTooltip(line, { clientX: mapState.hoveredEdgePointer.x, clientY: mapState.hoveredEdgePointer.y });
      } else {
        hideEdgeTooltip(line);
      }
    }
    syncLineDecoration(line, geometry);
  }
  function clamp2(value, min, max) {
    return Math.min(Math.max(value, min), max);
  }
  function normalizeAnchorValue(value) {
    const num = Number(value);
    if (!Number.isFinite(num)) return void 0;
    return clamp2(num, 0.1, 0.9);
  }
  function updateLineStrokeWidth(line) {
    if (!line) return;
    const baseWidth = Number(line.dataset.baseWidth) || getLineThicknessValue(line.dataset.thickness);
    const { lineScale = 1 } = getCurrentScales();
    const multiplier = line._hoverActive ? LINE_HOVER_WIDTH_MULTIPLIER : 1;
    const strokeWidth = baseWidth * lineScale * multiplier;
    if (Number.isFinite(strokeWidth)) {
      line.setAttribute("stroke-width", strokeWidth);
    }
    if (line._overlay) {
      const overlayBase = Number(line._overlay.dataset.baseWidth) || baseWidth * 0.85;
      const overlayWidth = overlayBase * lineScale * multiplier;
      if (Number.isFinite(overlayWidth)) {
        line._overlay.setAttribute("stroke-width", overlayWidth);
      }
    }
    updateLineGapVisuals(line);
  }
  function isLineHovered(line) {
    if (!line) return false;
    if (typeof line.matches === "function" && line.matches(":hover")) {
      return true;
    }
    if (Array.isArray(line._handleElements)) {
      return line._handleElements.some((handle) => typeof handle.matches === "function" && handle.matches(":hover"));
    }
    return false;
  }
  function applyLineHover(line) {
    if (!line || line._hoverActive) return;
    line._hoverActive = true;
    updateLineStrokeWidth(line);
    line.classList.add("map-edge--hover");
  }
  function clearLineHover(line, options = {}) {
    if (!line) return;
    const { force = false } = options;
    if (!force && isLineHovered(line)) {
      return;
    }
    if (line._hoverActive) {
      line._hoverActive = false;
      updateLineStrokeWidth(line);
    }
    line.classList.remove("map-edge--hover");
  }
  function removeLineHandles(line) {
    if (!line) return;
    if (line._handleElements) {
      line._handleElements.forEach((circle) => circle.remove());
    }
    line._handleElements = null;
    if (line._handleHideTimer) {
      clearTimeout(line._handleHideTimer);
      line._handleHideTimer = null;
    }
    if (line._handleStickyRelease) {
      clearTimeout(line._handleStickyRelease);
      line._handleStickyRelease = null;
    }
    line._handleVisible = false;
    line._handleSticky = false;
  }
  function holdLineHandles(line) {
    if (!line) return;
    if (line._handleStickyRelease) {
      clearTimeout(line._handleStickyRelease);
      line._handleStickyRelease = null;
    }
    setLineHandlesVisible(line, true, { sticky: true });
  }
  function scheduleHandleRelease(line) {
    if (!line) return;
    if (line._handleStickyRelease) {
      clearTimeout(line._handleStickyRelease);
    }
    line._handleStickyRelease = setTimeout(() => {
      line._handleStickyRelease = null;
      line._handleSticky = false;
      if (!isLineHovered(line)) {
        hideLineHandles(line, { force: true });
      }
    }, HANDLE_STICKY_RELEASE_DELAY);
  }
  function ensureLineHandles(line, geometry) {
    if (!line) return;
    const parent = line.parentNode;
    if (!parent) {
      removeLineHandles(line);
      return;
    }
    const handles = Array.isArray(geometry?.handles) ? geometry.handles : [];
    if (!handles.length) {
      removeLineHandles(line);
      return;
    }
    const elements = Array.isArray(line._handleElements) ? line._handleElements.slice() : [];
    const nextElements = [];
    const color = getLineStrokeColor(line);
    const { lineScale = 1 } = getCurrentScales();
    const baseRadius = clamp2((geometry?.baseWidth || 3) * lineScale * 1.15 + 6, 6, 16);
    const targetRadius = baseRadius + Math.max(6, baseRadius * 0.8);
    const updateEntry = (entry, handle, index) => {
      const point = handle?.point || handle?.base || {
        x: geometry.startX + (geometry.endX - geometry.startX) * (handle?.position ?? DEFAULT_CURVE_ANCHOR),
        y: geometry.startY + (geometry.endY - geometry.startY) * (handle?.position ?? DEFAULT_CURVE_ANCHOR)
      };
      entry.dataset.index = String(index);
      entry.dataset.position = String(handle?.position ?? DEFAULT_CURVE_ANCHOR);
      entry._target.dataset.index = entry.dataset.index;
      entry._target.dataset.position = entry.dataset.position;
      entry._target.setAttribute("cx", point.x);
      entry._target.setAttribute("cy", point.y);
      entry._target.setAttribute("r", targetRadius);
      entry._visual.setAttribute("cx", point.x);
      entry._visual.setAttribute("cy", point.y);
      entry._visual.setAttribute("r", baseRadius);
      entry._visual.style.stroke = color;
      entry._visual.style.color = color;
    };
    const createHandleEntry = () => {
      const wrapper = document.createElementNS("http://www.w3.org/2000/svg", "g");
      wrapper.classList.add("map-edge-handle");
      const target = document.createElementNS("http://www.w3.org/2000/svg", "circle");
      target.classList.add("map-edge-handle__target");
      target.setAttribute("fill", "transparent");
      target.setAttribute("stroke", "rgba(34, 197, 94, 0)");
      target.setAttribute("stroke-width", "10");
      target.setAttribute("pointer-events", "all");
      target.style.cursor = "grab";
      target.style.transition = "stroke 140ms ease, stroke-width 140ms ease";
      const visual = document.createElementNS("http://www.w3.org/2000/svg", "circle");
      visual.classList.add("map-edge-handle__visual");
      visual.setAttribute("fill", "rgba(15, 23, 42, 0.85)");
      visual.setAttribute("stroke-width", "2");
      visual.setAttribute("pointer-events", "none");
      visual.style.transition = "transform 140ms ease, fill 140ms ease, filter 140ms ease";
      wrapper.append(target, visual);
      wrapper._target = target;
      wrapper._visual = visual;
      wrapper._hoverActive = false;
      wrapper._setHover = (active) => {
        wrapper._hoverActive = active;
        wrapper.classList.toggle("is-hovered", active);
        target.setAttribute("stroke", active ? "rgba(34, 197, 94, 0.6)" : "rgba(34, 197, 94, 0)");
        target.setAttribute("stroke-width", active ? "12" : "10");
        visual.setAttribute("fill", active ? "rgba(34, 197, 94, 0.82)" : "rgba(15, 23, 42, 0.85)");
        visual.style.filter = active ? "drop-shadow(0 0 10px rgba(34, 197, 94, 0.45))" : "";
        visual.style.transform = active ? "scale(1.18)" : "scale(1)";
      };
      target.addEventListener("pointerdown", (evt) => {
        if (evt.button !== 0) return;
        if (mapState.tool !== TOOL.NAVIGATE) return;
        evt.stopPropagation();
        if (typeof evt.preventDefault === "function") {
          evt.preventDefault();
        }
        const handleIndex = Number(evt.currentTarget?.dataset?.index) || 0;
        startHandlePress(line, handleIndex, evt);
      });
      target.addEventListener("pointerenter", () => {
        if (typeof wrapper._setHover === "function") {
          wrapper._setHover(true);
        }
        showLineHandles(line);
        holdLineHandles(line);
        applyLineHover(line);
      });
      target.addEventListener("pointerleave", () => {
        if (typeof wrapper._setHover === "function") {
          wrapper._setHover(false);
        }
        scheduleHandleRelease(line);
        clearLineHover(line);
      });
      target.addEventListener("pointercancel", () => {
        if (typeof wrapper._setHover === "function") {
          wrapper._setHover(false);
        }
      });
      parent.appendChild(wrapper);
      return wrapper;
    };
    handles.forEach((handle, index) => {
      let entry = elements.shift();
      if (!entry) {
        entry = createHandleEntry();
      }
      updateEntry(entry, handle, index);
      nextElements.push(entry);
    });
    elements.forEach((entry) => entry.remove());
    line._handleElements = nextElements;
    line._handleGeometry = geometry || null;
  }
  function setLineHandlesVisible(line, visible, options = {}) {
    if (!line?._handleElements) return;
    const { force = false, sticky } = options;
    if (typeof sticky === "boolean") {
      line._handleSticky = sticky;
    }
    if (!visible && line._handleSticky && !force) {
      return;
    }
    if (line._handleHideTimer) {
      clearTimeout(line._handleHideTimer);
      line._handleHideTimer = null;
    }
    line._handleElements.forEach((entry) => {
      if (!visible && typeof entry._setHover === "function") {
        entry._setHover(false);
      }
      entry.classList.toggle("visible", visible);
      if (entry._target) {
        entry._target.style.pointerEvents = visible ? "auto" : "none";
      }
    });
    line._handleVisible = visible;
  }
  function showLineHandles(line, geometry = null) {
    if (!line) return;
    const geo = geometry || getLineGeometry(line.dataset?.a, line.dataset?.b, { line });
    if (!geo) return;
    ensureLineHandles(line, geo);
    setLineHandlesVisible(line, true);
  }
  function hideLineHandles(line, options = {}) {
    if (!line) return;
    const { force = false } = options;
    if (line._handleSticky && !force) {
      return;
    }
    if (line._handleStickyRelease) {
      clearTimeout(line._handleStickyRelease);
      line._handleStickyRelease = null;
    }
    if (line._handleHideTimer) {
      clearTimeout(line._handleHideTimer);
    }
    const delay = force ? 0 : 120;
    line._handleHideTimer = setTimeout(() => {
      line._handleHideTimer = null;
      if (line._handleSticky && !force || !force && isLineHovered(line)) {
        if (!force) {
          setLineHandlesVisible(line, true, { force: true });
        }
        return;
      }
      setLineHandlesVisible(line, false, { force: true });
      if (!isLineHovered(line) || force) {
        clearLineHover(line, { force: true });
      }
    }, delay);
  }
  function syncLineHandles(line, geometry = null) {
    if (!line) return;
    if (!line._handleElements || !line._handleVisible && !line._handleSticky && mapState.edgeDrag?.line !== line) {
      return;
    }
    const geo = geometry || getLineGeometry(line.dataset?.a, line.dataset?.b, { line });
    if (!geo) return;
    ensureLineHandles(line, geo);
    if (line._handleVisible) {
      setLineHandlesVisible(line, true, { force: true });
    }
  }
  function syncLineDecoration(line, geometry = null) {
    const decoration = line?.dataset?.decoration || DEFAULT_LINE_DECORATION;
    if (decoration === "block") {
      const overlay = ensureLineOverlay(line);
      if (overlay) updateBlockedOverlay(line, overlay, geometry);
    } else if (decoration === "inhibit") {
      const overlay = ensureLineOverlay(line);
      if (overlay) updateInhibitOverlay(line, overlay, geometry);
    } else {
      removeLineOverlay(line);
    }
  }
  function getLineStrokeColor(line) {
    if (!line) return DEFAULT_LINK_COLOR;
    return line.dataset?.color || line.getAttribute?.("stroke") || DEFAULT_LINK_COLOR;
  }
  function ensureLineOverlay(line) {
    if (!line || !line.parentNode) return null;
    let overlay = line._overlay;
    if (overlay && overlay.parentNode !== line.parentNode) {
      overlay.remove();
      overlay = null;
    }
    if (!overlay) {
      overlay = document.createElementNS("http://www.w3.org/2000/svg", "path");
      overlay.classList.add("map-edge-decoration");
      overlay.setAttribute("fill", "none");
      overlay.setAttribute("pointer-events", "none");
      overlay.setAttribute("stroke-linecap", "round");
      overlay.setAttribute("stroke-linejoin", "round");
      line.parentNode.insertBefore(overlay, line.nextSibling);
      line._overlay = overlay;
    }
    return overlay;
  }
  function removeLineOverlay(line) {
    if (line && line._overlay) {
      line._overlay.remove();
      line._overlay = null;
    }
  }
  function normalizeVector(x, y) {
    const len = Math.hypot(x, y) || 1;
    return { x: x / len, y: y / len };
  }
  function updateBlockedOverlay(line, overlay, geometryOverride = null) {
    if (!line || !overlay) return;
    const geometry = geometryOverride || getLineGeometry(line.dataset.a, line.dataset.b, { line });
    if (!geometry) return;
    const mid = geometry.midPoint || {
      x: (geometry.startX + geometry.endX) / 2,
      y: (geometry.startY + geometry.endY) / 2
    };
    const tangent = geometry.midTangent || { x: geometry.ux, y: geometry.uy };
    const normal = { x: -tangent.y, y: tangent.x };
    const diag1 = normalizeVector(tangent.x + normal.x, tangent.y + normal.y);
    const diag2 = normalizeVector(tangent.x - normal.x, tangent.y - normal.y);
    const { lineScale = 1 } = getCurrentScales();
    const scaledWidth = geometry.baseWidth * lineScale;
    const armLength = Math.max(26, scaledWidth * 3.8);
    const pathData = `M${mid.x - diag1.x * armLength} ${mid.y - diag1.y * armLength} L${mid.x + diag1.x * armLength} ${mid.y + diag1.y * armLength} M${mid.x - diag2.x * armLength} ${mid.y - diag2.y * armLength} L${mid.x + diag2.x * armLength} ${mid.y + diag2.y * armLength}`;
    overlay.setAttribute("d", pathData);
    const overlayBase = Math.max(geometry.baseWidth * 1.35, 2.8);
    overlay.dataset.baseWidth = String(overlayBase);
    overlay.dataset.decoration = "block";
    const color = getLineStrokeColor(line);
    overlay.setAttribute("stroke", color);
    overlay.style.stroke = color;
    overlay.setAttribute("stroke-width", overlayBase * lineScale);
  }
  function ensureItemLinks(item) {
    if (!item) return [];
    if (!Array.isArray(item.links)) {
      item.links = [];
    }
    return item.links;
  }
  function applyLocalLinkAddition(aId, bId, info = {}) {
    const source = mapState.itemMap?.[aId];
    const target = mapState.itemMap?.[bId];
    if (!source || !target) return null;
    const forward = normalizeLinkEntry(bId, info);
    const reverse = normalizeLinkEntry(aId, info);
    if (reverse.decoration && reverse.decoration !== "none" && reverse.decoration !== "block") {
      reverse.decorationDirection = flipDecorationDirection(forward.decorationDirection);
    }
    source.links = ensureItemLinks(source).filter((link) => String(link?.id) !== String(bId));
    target.links = ensureItemLinks(target).filter((link) => String(link?.id) !== String(aId));
    source.links.push({ ...forward });
    target.links.push({ ...reverse });
    return { forward: { ...forward }, reverse: { ...reverse }, source, target };
  }
  function applyLocalLinkHidden(aId, bId, hidden) {
    const source = mapState.itemMap?.[aId];
    const target = mapState.itemMap?.[bId];
    if (source) {
      ensureItemLinks(source).forEach((link) => {
        if (String(link?.id) === String(bId)) {
          link.hidden = hidden;
        }
      });
    }
    if (target) {
      ensureItemLinks(target).forEach((link) => {
        if (String(link?.id) === String(aId)) {
          link.hidden = hidden;
        }
      });
    }
  }
  function applyLocalLinkRemoval(aId, bId) {
    const source = mapState.itemMap?.[aId];
    const target = mapState.itemMap?.[bId];
    if (source) {
      source.links = ensureItemLinks(source).filter((link) => String(link?.id) !== String(bId));
    }
    if (target) {
      target.links = ensureItemLinks(target).filter((link) => String(link?.id) !== String(aId));
    }
  }
  function applyLocalNodeHidden(id, hidden) {
    const item = mapState.itemMap?.[id];
    if (item) {
      item.mapHidden = hidden;
    }
    if (!hidden) {
      return;
    }
    if (mapState.selectionIds?.length) {
      mapState.selectionIds = mapState.selectionIds.filter((selected) => selected !== id);
      updateSelectionHighlight();
    }
    if (mapState.positions && Object.prototype.hasOwnProperty.call(mapState.positions, id)) {
      delete mapState.positions[id];
    }
    const entry = mapState.elements.get(id);
    if (entry) {
      entry.circle?.remove();
      entry.label?.remove();
      mapState.elements.delete(id);
    }
    if (mapState.edgeRefs) {
      const edges = mapState.edgeRefs.get(String(id));
      if (edges && edges.size) {
        Array.from(edges).forEach((edge) => {
          const other = edge?.dataset?.a === String(id) ? edge?.dataset?.b : edge?.dataset?.a;
          if (other) {
            applyLinkVisibility(id, other, { hidden: true });
          }
        });
      }
    }
    updatePendingHighlight();
  }
  function updateInhibitOverlay(line, overlay, geometryOverride = null) {
    if (!line || !overlay) return;
    const geometry = geometryOverride || getLineGeometry(line.dataset.a, line.dataset.b, { line });
    if (!geometry) return;
    const start = { x: geometry.startX, y: geometry.startY };
    const end = { x: geometry.endX, y: geometry.endY };
    const { lineScale = 1 } = getCurrentScales();
    const scaledWidth = geometry.baseWidth * lineScale;
    const stemLength = Math.max(24, scaledWidth * 4.4);
    const barLength = Math.max(22, scaledWidth * 3.2);
    const retreat = Math.max(8, scaledWidth * 1.35);
    const segments = [];
    const buildSegment = (tip, tangent, directionSign) => {
      const stemStart = { x: tip.x - tangent.x * stemLength * directionSign, y: tip.y - tangent.y * stemLength * directionSign };
      const mid = { x: tip.x - tangent.x * retreat * directionSign, y: tip.y - tangent.y * retreat * directionSign };
      const normal = { x: -tangent.y, y: tangent.x };
      const halfBar = barLength / 2;
      const barA = { x: mid.x + normal.x * halfBar, y: mid.y + normal.y * halfBar };
      const barB = { x: mid.x - normal.x * halfBar, y: mid.y - normal.y * halfBar };
      return `M${stemStart.x} ${stemStart.y} L${tip.x} ${tip.y} M${barA.x} ${barA.y} L${barB.x} ${barB.y}`;
    };
    const direction = geometry.decorationDirection || line.dataset.direction || DEFAULT_DECORATION_DIRECTION;
    if (direction === "start" || direction === "both") {
      const tangentStart = geometry.startTangent || { x: geometry.ux, y: geometry.uy };
      segments.push(buildSegment(start, tangentStart, -1));
    }
    if (direction === "end" || direction === "both") {
      const tangentEnd = geometry.endTangent || { x: geometry.ux, y: geometry.uy };
      segments.push(buildSegment(end, tangentEnd, 1));
    }
    overlay.setAttribute("d", segments.join(" "));
    const overlayBase = Math.max(geometry.baseWidth * 0.95, 2.6);
    overlay.dataset.baseWidth = String(overlayBase);
    overlay.dataset.decoration = "inhibit";
    overlay.dataset.direction = direction;
    const color = getLineStrokeColor(line);
    overlay.setAttribute("stroke", color);
    overlay.style.stroke = color;
    overlay.setAttribute("stroke-width", overlayBase * lineScale);
  }
  async function setNodeHidden(id, hidden) {
    const item = await getItem(id);
    if (!item) return;
    item.mapHidden = hidden;
    await upsertItem(item);
  }
  async function createLink(aId, bId, info) {
    const a = await getItem(aId);
    const b = await getItem(bId);
    if (!a || !b) return null;
    const linkInfo = normalizeLinkEntry(bId, info);
    const reverseInfo = normalizeLinkEntry(aId, info);
    if (reverseInfo.decoration && reverseInfo.decoration !== "none" && reverseInfo.decoration !== "block") {
      reverseInfo.decorationDirection = flipDecorationDirection(linkInfo.decorationDirection);
    }
    a.links = Array.isArray(a.links) ? a.links.filter((l) => String(l?.id) !== String(bId)) : [];
    b.links = Array.isArray(b.links) ? b.links.filter((l) => String(l?.id) !== String(aId)) : [];
    a.links.push({ ...linkInfo });
    b.links.push({ ...reverseInfo });
    await upsertItem(a);
    await upsertItem(b);
    return { source: a, target: b, forward: { ...linkInfo }, reverse: { ...reverseInfo } };
  }
  async function removeLink(aId, bId) {
    const a = await getItem(aId);
    const b = await getItem(bId);
    if (!a || !b) return null;
    a.links = (a.links || []).filter((l) => l.id !== bId);
    b.links = (b.links || []).filter((l) => l.id !== aId);
    await upsertItem(a);
    await upsertItem(b);
    return { source: a, target: b };
  }
  async function setLinkHidden(aId, bId, hidden) {
    return updateLink(aId, bId, { hidden });
  }
  function titleOf4(item) {
    return item?.name || item?.concept || "";
  }
  function closeLineMenu(options = {}) {
    const { commit = false } = options;
    const active = mapState.activeLineMenu;
    if (!active) return;
    if (active.cleanup) {
      try {
        active.cleanup();
      } catch {
      }
    }
    if (!commit && active.restore) {
      try {
        active.restore();
      } catch {
      }
    }
    if (active.menu?.parentNode) {
      active.menu.remove();
    }
    mapState.activeLineMenu = null;
  }
  function positionLineMenu(menu, pageX, pageY) {
    if (!menu) return;
    const margin = 12;
    const width = menu.offsetWidth || 0;
    const height = menu.offsetHeight || 0;
    const viewportWidth = typeof window !== "undefined" && window.innerWidth || document.documentElement.clientWidth || width;
    const viewportHeight = typeof window !== "undefined" && window.innerHeight || document.documentElement.clientHeight || height;
    const scrollX = typeof window !== "undefined" ? window.scrollX : document.documentElement?.scrollLeft || 0;
    const scrollY = typeof window !== "undefined" ? window.scrollY : document.documentElement?.scrollTop || 0;
    const left = clamp2(pageX + margin, margin + scrollX, scrollX + viewportWidth - width - margin);
    const top = clamp2(pageY + margin, margin + scrollY, scrollY + viewportHeight - height - margin);
    menu.style.left = `${left}px`;
    menu.style.top = `${top}px`;
  }
  async function openLineMenu(evt, line, aId, bId) {
    closeLineMenu();
    const existing = await getItem(aId);
    if (!existing) return;
    const link = existing.links.find((l) => l.id === bId) || {};
    const appearance = normalizeLinkAppearance({
      style: link.style ?? link.linkStyle ?? DEFAULT_LINE_STYLE,
      decoration: link.decoration,
      decorationDirection: link.decorationDirection,
      glow: link.glow
    });
    const initial = {
      color: line?.dataset?.color || link.color || DEFAULT_LINK_COLOR,
      style: line?.dataset?.style || appearance.style,
      decoration: line?.dataset?.decoration || appearance.decoration,
      decorationDirection: line?.dataset?.direction || line?.dataset?.decorationDirection || appearance.decorationDirection || DEFAULT_DECORATION_DIRECTION,
      glow: line?.dataset?.glow === "1" || Boolean(appearance.glow),
      thickness: line?.dataset?.thickness || link.thickness || DEFAULT_LINE_THICKNESS,
      name: line?.dataset?.label || link.name || ""
    };
    const existingHandles = parseCurveHandles(line?.dataset?.handles) || [];
    const initialCurveMagnitude = Math.abs(Number(line?.dataset?.curve || 0));
    const canStraighten = existingHandles.length > 0 || initialCurveMagnitude > 1e-3;
    const menu = document.createElement("div");
    menu.className = "line-menu";
    const header = document.createElement("div");
    header.className = "line-menu__header";
    const titleEl = document.createElement("h3");
    titleEl.textContent = "Line styling";
    header.appendChild(titleEl);
    const closeBtn = document.createElement("button");
    closeBtn.type = "button";
    closeBtn.className = "line-menu__close";
    closeBtn.innerHTML = ICONS.close;
    closeBtn.addEventListener("click", () => closeLineMenu());
    header.appendChild(closeBtn);
    menu.appendChild(header);
    const body = document.createElement("div");
    body.className = "line-menu__body";
    menu.appendChild(body);
    const colorLabel = document.createElement("label");
    colorLabel.className = "line-menu__field";
    colorLabel.textContent = "Color";
    const colorInput = document.createElement("input");
    colorInput.type = "color";
    colorInput.value = /^#([0-9a-f]{3}|[0-9a-f]{6})$/i.test(initial.color) ? initial.color : "#888888";
    colorLabel.appendChild(colorInput);
    body.appendChild(colorLabel);
    const typeLabel = document.createElement("label");
    typeLabel.className = "line-menu__field";
    typeLabel.textContent = "Line type";
    const typeSel = document.createElement("select");
    LINE_TYPE_PRESETS.forEach((option) => {
      const opt = document.createElement("option");
      opt.value = option.value;
      opt.textContent = option.label;
      typeSel.appendChild(opt);
    });
    const initialPresetValue = inferLineTypePreset(initial.style, initial.decoration);
    typeSel.value = initialPresetValue;
    typeLabel.appendChild(typeSel);
    const typeRow = document.createElement("div");
    typeRow.className = "line-menu__row";
    typeRow.appendChild(typeLabel);
    const flipBtn = document.createElement("button");
    flipBtn.type = "button";
    flipBtn.className = "btn ghost";
    flipBtn.textContent = "Flip direction";
    typeRow.appendChild(flipBtn);
    body.appendChild(typeRow);
    let currentDirection = initial.decoration === "arrow" || initial.decoration === "inhibit" ? initial.decorationDirection : DEFAULT_DECORATION_DIRECTION;
    const glowField = document.createElement("label");
    glowField.className = "line-menu-toggle";
    const glowInput = document.createElement("input");
    glowInput.type = "checkbox";
    glowInput.checked = initial.glow;
    glowField.appendChild(glowInput);
    glowField.appendChild(document.createTextNode(" Glow highlight"));
    body.appendChild(glowField);
    const thickLabel = document.createElement("label");
    thickLabel.className = "line-menu__field";
    thickLabel.textContent = "Thickness";
    const thickSel = document.createElement("select");
    LINE_THICKNESS_OPTIONS.forEach((option) => {
      const opt = document.createElement("option");
      opt.value = option.value;
      opt.textContent = option.label;
      thickSel.appendChild(opt);
    });
    thickSel.value = initial.thickness;
    thickLabel.appendChild(thickSel);
    body.appendChild(thickLabel);
    const nameLabel = document.createElement("label");
    nameLabel.className = "line-menu__field";
    nameLabel.textContent = "Label";
    const nameInput = document.createElement("input");
    nameInput.type = "text";
    nameInput.value = initial.name;
    nameLabel.appendChild(nameInput);
    body.appendChild(nameLabel);
    let updateStraightenState = () => {
    };
    const buildPatch = () => {
      const preset = getLineTypePreset(typeSel.value);
      const styleValue = preset?.style ?? DEFAULT_LINE_STYLE;
      const decorationValue = preset?.decoration ?? DEFAULT_LINE_DECORATION;
      const directional = isDirectionalPreset(preset);
      const directionValue = directional ? normalizeDecorationDirection(currentDirection, decorationValue, styleValue) : DEFAULT_DECORATION_DIRECTION;
      return {
        color: colorInput.value,
        style: styleValue,
        decoration: decorationValue,
        decorationDirection: directionValue,
        glow: glowInput.checked,
        thickness: thickSel.value,
        name: nameInput.value
      };
    };
    const applyPreview = () => {
      applyLineStyle(line, buildPatch());
      updateStraightenState();
    };
    const updateFlipState = () => {
      const preset = getLineTypePreset(typeSel.value);
      const directional = isDirectionalPreset(preset);
      if (directional) {
        currentDirection = normalizeDecorationDirection(currentDirection, preset.decoration, preset.style);
      } else {
        currentDirection = DEFAULT_DECORATION_DIRECTION;
      }
      flipBtn.hidden = !directional;
      flipBtn.disabled = !directional || currentDirection === "both";
    };
    flipBtn.addEventListener("click", () => {
      const preset = getLineTypePreset(typeSel.value);
      if (!isDirectionalPreset(preset)) return;
      if (currentDirection === "both") {
        currentDirection = preset.direction ?? DEFAULT_DECORATION_DIRECTION;
      } else {
        currentDirection = currentDirection === "start" ? "end" : "start";
      }
      updateFlipState();
      applyPreview();
    });
    typeSel.addEventListener("change", () => {
      const preset = getLineTypePreset(typeSel.value);
      if (isDirectionalPreset(preset)) {
        if (preset.value !== initialPresetValue) {
          currentDirection = preset.direction ?? DEFAULT_DECORATION_DIRECTION;
        } else {
          currentDirection = normalizeDecorationDirection(currentDirection, preset.decoration, preset.style);
        }
      } else {
        currentDirection = DEFAULT_DECORATION_DIRECTION;
      }
      updateFlipState();
      applyPreview();
    });
    const actions = document.createElement("div");
    actions.className = "line-menu__actions";
    const straightenBtn = document.createElement("button");
    straightenBtn.type = "button";
    straightenBtn.className = "btn ghost";
    straightenBtn.textContent = "Straighten line";
    straightenBtn.disabled = !canStraighten;
    straightenBtn.addEventListener("click", async () => {
      if (straightenBtn.disabled) return;
      straightenBtn.disabled = true;
      await straightenLine(line);
      applyPreview();
    });
    actions.appendChild(straightenBtn);
    const saveBtn = document.createElement("button");
    saveBtn.type = "button";
    saveBtn.className = "btn primary";
    saveBtn.textContent = "Save changes";
    saveBtn.addEventListener("click", async () => {
      const patch = buildPatch();
      await updateLink(aId, bId, patch);
      applyLineStyle(line, patch);
      closeLineMenu({ commit: true });
    });
    actions.appendChild(saveBtn);
    menu.appendChild(actions);
    updateStraightenState = () => {
      const handles = parseCurveHandles(line?.dataset?.handles) || [];
      const magnitude = Math.abs(Number(line?.dataset?.curve || 0));
      straightenBtn.disabled = !(handles.length || magnitude > 1e-3);
    };
    updateStraightenState();
    let observer = null;
    if (typeof MutationObserver !== "undefined" && line) {
      observer = new MutationObserver(updateStraightenState);
      observer.observe(line, { attributes: true, attributeFilter: ["data-handles", "data-curve"] });
    }
    colorInput.addEventListener("input", applyPreview);
    glowInput.addEventListener("change", applyPreview);
    thickSel.addEventListener("change", applyPreview);
    nameInput.addEventListener("input", applyPreview);
    updateFlipState();
    applyPreview();
    document.body.appendChild(menu);
    requestAnimationFrame(() => {
      positionLineMenu(menu, evt.pageX, evt.pageY);
    });
    const handleOutside = (event) => {
      if (menu.contains(event.target)) return;
      closeLineMenu();
    };
    document.addEventListener("pointerdown", handleOutside, true);
    const menuState = {
      menu,
      restore: () => applyLineStyle(line, initial),
      cleanup: () => {
        document.removeEventListener("pointerdown", handleOutside, true);
        if (observer) observer.disconnect();
      }
    };
    mapState.activeLineMenu = menuState;
  }
  async function updateLink(aId, bId, patch) {
    const a = await getItem(aId);
    const b = await getItem(bId);
    if (!a || !b) return null;
    const existingForward = Array.isArray(a.links) ? a.links.find((x) => String(x?.id) === String(bId)) : null;
    const forwardDecoration = Object.prototype.hasOwnProperty.call(patch, "decoration") ? patch.decoration : existingForward?.decoration ?? DEFAULT_LINE_DECORATION;
    const forwardDirection = Object.prototype.hasOwnProperty.call(patch, "decorationDirection") ? patch.decorationDirection : existingForward?.decorationDirection ?? DEFAULT_DECORATION_DIRECTION;
    const reversePatch = { ...patch };
    if (Object.prototype.hasOwnProperty.call(patch, "decoration")) {
      reversePatch.decoration = forwardDecoration;
    }
    if (forwardDecoration && forwardDecoration !== "none" && forwardDecoration !== "block") {
      reversePatch.decorationDirection = flipDecorationDirection(forwardDirection);
    } else if (Object.prototype.hasOwnProperty.call(patch, "decorationDirection")) {
      reversePatch.decorationDirection = DEFAULT_DECORATION_DIRECTION;
    }
    const apply = (item, otherId, patchValue) => {
      item.links = item.links || [];
      let link = item.links.find((x) => String(x?.id) === String(otherId));
      if (link) {
        Object.assign(link, patchValue);
      } else {
        link = normalizeLinkEntry(otherId, patchValue);
        item.links.push(link);
      }
      return { ...link };
    };
    const forward = apply(a, bId, patch);
    const reverse = apply(b, aId, reversePatch);
    await upsertItem(a);
    await upsertItem(b);
    return { source: a, target: b, forward, reverse };
  }
  function applyLinkPatchToState(aId, bId, patch = {}) {
    const source = mapState.itemMap?.[aId];
    const forwardLink = source?.links?.find((x) => String(x?.id) === String(bId)) || null;
    const forwardDecoration = Object.prototype.hasOwnProperty.call(patch, "decoration") ? patch.decoration : forwardLink?.decoration ?? DEFAULT_LINE_DECORATION;
    const forwardDirection = Object.prototype.hasOwnProperty.call(patch, "decorationDirection") ? patch.decorationDirection : forwardLink?.decorationDirection ?? DEFAULT_DECORATION_DIRECTION;
    const reversePatch = { ...patch };
    if (Object.prototype.hasOwnProperty.call(patch, "decoration")) {
      reversePatch.decoration = forwardDecoration;
    }
    if (forwardDecoration && forwardDecoration !== "none" && forwardDecoration !== "block") {
      reversePatch.decorationDirection = flipDecorationDirection(forwardDirection);
    } else if (Object.prototype.hasOwnProperty.call(patch, "decorationDirection")) {
      reversePatch.decorationDirection = DEFAULT_DECORATION_DIRECTION;
    }
    const assign = (item, otherId, patchValue) => {
      if (!item || !Array.isArray(item.links)) return;
      const link = item.links.find((x) => String(x?.id) === String(otherId));
      if (link) Object.assign(link, patchValue);
    };
    assign(source, bId, patch);
    assign(mapState.itemMap?.[bId], aId, reversePatch);
  }

  // js/ui/components/entry-controls.js
  var defaultOptions = [
    { value: "disease", label: "Disease" },
    { value: "drug", label: "Drug" },
    { value: "concept", label: "Concept" }
  ];
  function createEntryAddControl(onAdded, initialKind = "disease") {
    const wrapper = document.createElement("div");
    wrapper.className = "entry-add-control";
    const button = document.createElement("button");
    button.type = "button";
    button.className = "fab-btn";
    button.innerHTML = '<span class="sr-only">Add new entry</span><svg viewBox="0 0 24 24" aria-hidden="true" focusable="false"><path d="M12 5v14M5 12h14" stroke="currentColor" stroke-width="2.4" stroke-linecap="round" stroke-linejoin="round"/></svg>';
    button.setAttribute("aria-label", "Add new entry");
    const menu = document.createElement("div");
    menu.className = "entry-add-menu hidden";
    const options = [...defaultOptions];
    if (initialKind) {
      const idx = options.findIndex((opt) => opt.value === initialKind);
      if (idx > 0) {
        const [preferred] = options.splice(idx, 1);
        options.unshift(preferred);
      }
    }
    options.forEach((opt) => {
      const item = document.createElement("button");
      item.type = "button";
      item.className = "entry-add-menu-item";
      item.textContent = opt.label;
      item.addEventListener("click", () => {
        closeMenu();
        openEditor(opt.value, onAdded);
      });
      menu.appendChild(item);
    });
    function setOpen(open) {
      menu.classList.toggle("hidden", !open);
      wrapper.classList.toggle("open", open);
      button.setAttribute("aria-expanded", open ? "true" : "false");
      if (open) document.addEventListener("mousedown", handleOutside);
      else document.removeEventListener("mousedown", handleOutside);
    }
    function closeMenu() {
      setOpen(false);
    }
    function handleOutside(e) {
      if (!wrapper.contains(e.target)) {
        closeMenu();
      }
    }
    button.addEventListener("click", () => {
      const willOpen = menu.classList.contains("hidden");
      setOpen(willOpen);
    });
    wrapper.appendChild(button);
    wrapper.appendChild(menu);
    setOpen(false);
    return wrapper;
  }

  // js/app-shell.js
  function createAppShell({
    state: state2,
    setTab: setTab2,
    setSubtab: setSubtab2,
    setQuery: setQuery2,
    findItemsByFilter: findItemsByFilter2,
    renderSettings: renderSettings2,
    renderCardList: renderCardList2,
    renderCards: renderCards2,
    renderBuilder: renderBuilder2,
    renderLectures: renderLectures2,
    renderFlashcards: renderFlashcards2,
    renderReview: renderReview2,
    renderQuiz: renderQuiz2,
    renderBlockMode: renderBlockMode2,
    renderBlockBoard: renderBlockBoard2,
    renderExams: renderExams2,
    renderExamRunner: renderExamRunner2,
    renderMap: renderMap2,
    createEntryAddControl: createEntryAddControl2
  }) {
    const tabs2 = ["Block Board", "Lists", "Cards", "Study", "Exams", "Map", "Lectures"];
    const listTabConfig = [
      { label: "Diseases", kind: "disease" },
      { label: "Drugs", kind: "drug" },
      { label: "Concepts", kind: "concept" }
    ];
    function resolveListKind2() {
      const active = state2?.subtab?.Lists;
      const match = listTabConfig.find((cfg) => cfg.label === active);
      return match ? match.kind : "disease";
    }
    async function renderApp2() {
      const root = document.getElementById("app");
      const activeEl = document.activeElement;
      const shouldRestoreSearch = activeEl && activeEl.dataset && activeEl.dataset.role === "global-search";
      const selectionStart = shouldRestoreSearch && typeof activeEl.selectionStart === "number" ? activeEl.selectionStart : null;
      const selectionEnd = shouldRestoreSearch && typeof activeEl.selectionEnd === "number" ? activeEl.selectionEnd : null;
      root.innerHTML = "";
      const header = document.createElement("header");
      header.className = "header";
      const left = document.createElement("div");
      left.className = "header-left";
      const brand = document.createElement("div");
      brand.className = "brand";
      brand.textContent = "\u2728 Sevenn";
      left.appendChild(brand);
      const nav = document.createElement("nav");
      nav.className = "tabs";
      nav.setAttribute("aria-label", "Primary sections");
      const tabClassMap = {
        "Block Board": "tab-block-board",
        Lists: "tab-lists",
        Lectures: "tab-lectures",
        Cards: "tab-cards",
        Study: "tab-study",
        Exams: "tab-exams",
        Map: "tab-map"
      };
      tabs2.forEach((t) => {
        const btn = document.createElement("button");
        btn.type = "button";
        btn.className = "tab";
        if (state2.tab === t) btn.classList.add("active");
        const variant = tabClassMap[t];
        if (variant) btn.classList.add(variant);
        btn.textContent = t;
        btn.addEventListener("click", () => {
          const wasActive = state2.tab === t;
          if (t === "Study" && wasActive && state2.subtab?.Study === "Review" && !state2.flashSession && !state2.quizSession) {
            setSubtab2("Study", "Builder");
          }
          setTab2(t);
          renderApp2();
        });
        nav.appendChild(btn);
      });
      left.appendChild(nav);
      header.appendChild(left);
      const right = document.createElement("div");
      right.className = "header-right";
      const searchField = document.createElement("label");
      searchField.className = "search-field";
      searchField.setAttribute("aria-label", "Search entries");
      const searchIcon = document.createElement("span");
      searchIcon.className = "search-icon";
      searchIcon.setAttribute("aria-hidden", "true");
      searchIcon.innerHTML = '<svg viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 14.5L18 18" stroke="currentColor" stroke-width="1.6" stroke-linecap="round"/><circle cx="9" cy="9" r="5.8" stroke="currentColor" stroke-width="1.6"/></svg>';
      searchField.appendChild(searchIcon);
      const search = document.createElement("input");
      search.type = "search";
      search.placeholder = "Search entries";
      search.value = state2.query;
      search.autocomplete = "off";
      search.spellcheck = false;
      search.className = "search-input";
      search.dataset.role = "global-search";
      search.addEventListener("input", (e) => {
        setQuery2(e.target.value);
        renderApp2();
      });
      search.addEventListener("search", (e) => {
        setQuery2(e.target.value);
        renderApp2();
      });
      searchField.appendChild(search);
      right.appendChild(searchField);
      const settingsBtn = document.createElement("button");
      settingsBtn.type = "button";
      settingsBtn.className = "header-settings-btn";
      if (state2.tab === "Settings") settingsBtn.classList.add("active");
      settingsBtn.setAttribute("aria-label", "Settings");
      settingsBtn.innerHTML = '<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M9.594 3.94c.09-.542.56-.94 1.11-.94h2.593c.55 0 1.02.398 1.11.94l.213 1.281c.063.374.313.686.645.87.074.04.147.083.22.127.325.196.72.257 1.075.124l1.217-.456a1.125 1.125 0 0 1 1.37.49l1.296 2.247a1.125 1.125 0 0 1-.26 1.431l-1.003.827c-.293.241-.438.613-.43.992a7.723 7.723 0 0 1 0 .255c-.008.378.137.75.43.991l1.004.827c.424.35.534.955.26 1.43l-1.298 2.247a1.125 1.125 0 0 1-1.369.491l-1.217-.456c-.355-.133-.75-.072-1.076.124a6.47 6.47 0 0 1-.22.128c-.331.183-.581.495-.644.869l-.213 1.281c-.09.543-.56.94-1.11.94h-2.594c-.55 0-1.019-.398-1.11-.94l-.213-1.281c-.062-.374-.312-.686-.644-.87a6.52 6.52 0 0 1-.22-.127c-.325-.196-.72-.257-1.076-.124l-1.217.456a1.125 1.125 0 0 1-1.369-.49l-1.297-2.247a1.125 1.125 0 0 1 .26-1.431l1.004-.827c.292-.24.437-.613.43-.991a6.932 6.932 0 0 1 0-.255c.007-.38-.138-.751-.43-.992l-1.004-.827a1.125 1.125 0 0 1-.26-1.43l1.297-2.247a1.125 1.125 0 0 1 1.37-.491l1.216.456c.356.133.751.072 1.076-.124.072-.044.146-.086.22-.128.332-.183.582-.495.644-.869z" stroke="currentColor" stroke-width="1.6" stroke-linecap="round" stroke-linejoin="round"/><circle cx="12" cy="12" r="2.8" stroke="currentColor" stroke-width="1.6"/></svg>';
      settingsBtn.addEventListener("click", () => {
        setTab2("Settings");
        renderApp2();
      });
      right.appendChild(settingsBtn);
      header.appendChild(right);
      root.appendChild(header);
      if (shouldRestoreSearch) {
        requestAnimationFrame(() => {
          search.focus();
          if (selectionStart !== null && selectionEnd !== null && search.setSelectionRange) {
            search.setSelectionRange(selectionStart, selectionEnd);
          } else {
            const len = search.value.length;
            if (search.setSelectionRange) search.setSelectionRange(len, len);
          }
        });
      }
      const main = document.createElement("main");
      if (state2.tab === "Map") main.className = "map-main";
      root.appendChild(main);
      if (state2.tab === "Settings") {
        await renderSettings2(main);
      } else if (state2.tab === "Lists") {
        const kind = resolveListKind2();
        const listMeta = listTabConfig.find((cfg) => cfg.kind === kind) || listTabConfig[0];
        const createTarget = listMeta?.kind || "disease";
        main.appendChild(createEntryAddControl2(renderApp2, createTarget));
        const content = document.createElement("div");
        content.className = "tab-content";
        main.appendChild(content);
        const selector = document.createElement("div");
        selector.className = "list-subtabs";
        selector.setAttribute("role", "tablist");
        listTabConfig.forEach((cfg) => {
          const btn = document.createElement("button");
          btn.type = "button";
          btn.className = "list-subtab";
          btn.textContent = cfg.label;
          btn.dataset.listKind = cfg.kind;
          btn.setAttribute("role", "tab");
          if (cfg.kind === kind) btn.classList.add("active");
          btn.addEventListener("click", () => {
            if (state2.subtab?.Lists === cfg.label) return;
            setSubtab2("Lists", cfg.label);
            renderApp2();
          });
          selector.appendChild(btn);
        });
        content.appendChild(selector);
        const listHost = document.createElement("div");
        listHost.className = "list-host";
        content.appendChild(listHost);
        const filter = { ...state2.filters, types: [kind], query: state2.query };
        const query = findItemsByFilter2(filter);
        await renderCardList2(listHost, query, kind, renderApp2);
      } else if (state2.tab === "Block Board") {
        main.appendChild(createEntryAddControl2(renderApp2, "disease"));
        const content = document.createElement("div");
        content.className = "tab-content";
        main.appendChild(content);
        await renderBlockBoard2(content, renderApp2);
      } else if (state2.tab === "Lectures") {
        const content = document.createElement("div");
        content.className = "tab-content";
        main.appendChild(content);
        await renderLectures2(content, renderApp2);
      } else if (state2.tab === "Cards") {
        main.appendChild(createEntryAddControl2(renderApp2, "disease"));
        const content = document.createElement("div");
        content.className = "tab-content";
        main.appendChild(content);
        const filter = { ...state2.filters, query: state2.query };
        const query = findItemsByFilter2(filter);
        const items = await query.toArray();
        await renderCards2(content, items, renderApp2);
      } else if (state2.tab === "Study") {
        main.appendChild(createEntryAddControl2(renderApp2, "disease"));
        const content = document.createElement("div");
        content.className = "tab-content";
        main.appendChild(content);
        if (state2.flashSession) {
          renderFlashcards2(content, renderApp2);
        } else if (state2.quizSession) {
          renderQuiz2(content, renderApp2);
        } else {
          const activeStudy = state2.subtab.Study === "Blocks" ? "Blocks" : state2.subtab.Study || "Builder";
          if (activeStudy === "Review") {
            await renderReview2(content, renderApp2);
          } else if (activeStudy === "Blocks") {
            renderBlockMode2(content, renderApp2);
          } else {
            const wrap = document.createElement("div");
            await renderBuilder2(wrap, renderApp2);
            content.appendChild(wrap);
          }
        }
      } else if (state2.tab === "Exams") {
        main.appendChild(createEntryAddControl2(renderApp2, "disease"));
        const content = document.createElement("div");
        content.className = "tab-content";
        main.appendChild(content);
        if (state2.examSession) {
          renderExamRunner2(content, renderApp2);
        } else {
          await renderExams2(content, renderApp2);
        }
      } else if (state2.tab === "Map") {
        main.appendChild(createEntryAddControl2(renderApp2, "disease"));
        const mapHost = document.createElement("div");
        mapHost.className = "tab-content map-host";
        main.appendChild(mapHost);
        await renderMap2(mapHost);
      } else {
        main.textContent = `Currently viewing: ${state2.tab}`;
      }
    }
    return { renderApp: renderApp2, tabs: tabs2, resolveListKind: resolveListKind2 };
  }

  // js/main.js
  var { renderApp, tabs, resolveListKind } = createAppShell({
    state,
    setTab,
    setSubtab,
    setQuery,
    findItemsByFilter,
    renderSettings,
    renderCardList,
    renderCards,
    renderBuilder,
    renderLectures,
    renderFlashcards,
    renderReview,
    renderQuiz,
    renderBlockMode,
    renderBlockBoard,
    renderExams,
    renderExamRunner,
    renderMap,
    createEntryAddControl
  });
  async function bootstrap() {
    try {
      await initDB();
      try {
        await loadBlockCatalog();
      } catch (err) {
        console.warn("Failed to prime block catalog", err);
      }
      renderApp();
    } catch (err) {
      const root = document.getElementById("app");
      if (root) root.textContent = "Failed to load app";
      console.error(err);
    }
  }
  if (typeof window !== "undefined" && !globalThis.__SEVENN_TEST__) {
    bootstrap();
  }
  return __toCommonJS(main_exports);
})();
